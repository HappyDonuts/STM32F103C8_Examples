
bp_Encoder_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005864  08005864  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005864  08005864  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800586c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000084  080058f0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  080058f0  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c0c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002245  00000000  00000000  00031cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  00033f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00034b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f5f  00000000  00000000  00035668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a294  00000000  00000000  0004b5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072f21  00000000  00000000  0005585b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c877c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000c87f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08004304 	.word	0x08004304

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08004304 	.word	0x08004304

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x28>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x28>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f941 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f002 fb56 	bl	8003134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f959 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f921 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000018 	.word	0x20000018
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000004 	.word	0x20000004
 8000b14:	200004c0 	.word	0x200004c0

08000b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200004c0 	.word	0x200004c0

08000b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff fff0 	bl	8000b18 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d005      	beq.n	8000b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_Delay+0x40>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b52:	bf00      	nop
 8000b54:	f7ff ffe0 	bl	8000b18 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f7      	bhi.n	8000b54 <HAL_Delay+0x28>
  {
  }
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000004 	.word	0x20000004

08000b70 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <NVIC_EnableIRQ+0x2c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da0b      	bge.n	8000c30 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <NVIC_SetPriority+0x4c>)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	3b04      	subs	r3, #4
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2e:	e009      	b.n	8000c44 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <NVIC_SetPriority+0x50>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff90 	bl	8000c04 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff31 	bl	8000b70 <NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff46 	bl	8000bb8 <NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff90 	bl	8000c58 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5f 	bl	8000c04 <NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff39 	bl	8000bd4 <NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
 8000da6:	e127      	b.n	8000ff8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000da8:	2201      	movs	r2, #1
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 8116 	bne.w	8000ff2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b12      	cmp	r3, #18
 8000dcc:	d034      	beq.n	8000e38 <HAL_GPIO_Init+0xb4>
 8000dce:	2b12      	cmp	r3, #18
 8000dd0:	d80d      	bhi.n	8000dee <HAL_GPIO_Init+0x6a>
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d02b      	beq.n	8000e2e <HAL_GPIO_Init+0xaa>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d804      	bhi.n	8000de4 <HAL_GPIO_Init+0x60>
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d031      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d01c      	beq.n	8000e1c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de2:	e048      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d043      	beq.n	8000e70 <HAL_GPIO_Init+0xec>
 8000de8:	2b11      	cmp	r3, #17
 8000dea:	d01b      	beq.n	8000e24 <HAL_GPIO_Init+0xa0>
          break;
 8000dec:	e043      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000dee:	4a87      	ldr	r2, [pc, #540]	; (800100c <HAL_GPIO_Init+0x288>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d026      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
 8000df4:	4a85      	ldr	r2, [pc, #532]	; (800100c <HAL_GPIO_Init+0x288>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d806      	bhi.n	8000e08 <HAL_GPIO_Init+0x84>
 8000dfa:	4a85      	ldr	r2, [pc, #532]	; (8001010 <HAL_GPIO_Init+0x28c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d020      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
 8000e00:	4a84      	ldr	r2, [pc, #528]	; (8001014 <HAL_GPIO_Init+0x290>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01d      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
          break;
 8000e06:	e036      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e08:	4a83      	ldr	r2, [pc, #524]	; (8001018 <HAL_GPIO_Init+0x294>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
 8000e0e:	4a83      	ldr	r2, [pc, #524]	; (800101c <HAL_GPIO_Init+0x298>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d016      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
 8000e14:	4a82      	ldr	r2, [pc, #520]	; (8001020 <HAL_GPIO_Init+0x29c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0xbe>
          break;
 8000e1a:	e02c      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	623b      	str	r3, [r7, #32]
          break;
 8000e22:	e028      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e023      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	3308      	adds	r3, #8
 8000e34:	623b      	str	r3, [r7, #32]
          break;
 8000e36:	e01e      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	330c      	adds	r3, #12
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	e019      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e012      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d105      	bne.n	8000e64 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	611a      	str	r2, [r3, #16]
          break;
 8000e62:	e008      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e64:	2308      	movs	r3, #8
 8000e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	615a      	str	r2, [r3, #20]
          break;
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d801      	bhi.n	8000e80 <HAL_GPIO_Init+0xfc>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	e001      	b.n	8000e84 <HAL_GPIO_Init+0x100>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3304      	adds	r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2bff      	cmp	r3, #255	; 0xff
 8000e8a:	d802      	bhi.n	8000e92 <HAL_GPIO_Init+0x10e>
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x114>
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	3b08      	subs	r3, #8
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	6a39      	ldr	r1, [r7, #32]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 8096 	beq.w	8000ff2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec6:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_GPIO_Init+0x2a0>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	4a56      	ldr	r2, [pc, #344]	; (8001024 <HAL_GPIO_Init+0x2a0>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6193      	str	r3, [r2, #24]
 8000ed2:	4b54      	ldr	r3, [pc, #336]	; (8001024 <HAL_GPIO_Init+0x2a0>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000ede:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_GPIO_Init+0x2a4>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	4013      	ands	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a49      	ldr	r2, [pc, #292]	; (800102c <HAL_GPIO_Init+0x2a8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x1ae>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	; (8001030 <HAL_GPIO_Init+0x2ac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x1aa>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_GPIO_Init+0x2b0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x1a6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a46      	ldr	r2, [pc, #280]	; (8001038 <HAL_GPIO_Init+0x2b4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x1a2>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x1b0>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x1b0>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x1b0>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x1b0>
 8000f32:	2300      	movs	r3, #0
 8000f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f44:	4938      	ldr	r1, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x2a4>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4936      	ldr	r1, [pc, #216]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4931      	ldr	r1, [pc, #196]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	492c      	ldr	r1, [pc, #176]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4927      	ldr	r1, [pc, #156]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4922      	ldr	r1, [pc, #136]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	608b      	str	r3, [r1, #8]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	491d      	ldr	r1, [pc, #116]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	4918      	ldr	r1, [pc, #96]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4913      	ldr	r1, [pc, #76]	; (800103c <HAL_GPIO_Init+0x2b8>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f aed4 	bls.w	8000da8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	372c      	adds	r7, #44	; 0x2c
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	10210000 	.word	0x10210000
 8001010:	10110000 	.word	0x10110000
 8001014:	10120000 	.word	0x10120000
 8001018:	10310000 	.word	0x10310000
 800101c:	10320000 	.word	0x10320000
 8001020:	10220000 	.word	0x10220000
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	40010800 	.word	0x40010800
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40011000 	.word	0x40011000
 8001038:	40011400 	.word	0x40011400
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fc4c 	bl	80028fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0e7      	b.n	800125a <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 f87a 	bl	8003198 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010bc:	f001 f8d8 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80010c0:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a67      	ldr	r2, [pc, #412]	; (8001264 <HAL_I2C_Init+0x1f4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d807      	bhi.n	80010dc <HAL_I2C_Init+0x6c>
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4a66      	ldr	r2, [pc, #408]	; (8001268 <HAL_I2C_Init+0x1f8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf94      	ite	ls
 80010d4:	2301      	movls	r3, #1
 80010d6:	2300      	movhi	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	e006      	b.n	80010ea <HAL_I2C_Init+0x7a>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4a63      	ldr	r2, [pc, #396]	; (800126c <HAL_I2C_Init+0x1fc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	bf94      	ite	ls
 80010e4:	2301      	movls	r3, #1
 80010e6:	2300      	movhi	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0b3      	b.n	800125a <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_I2C_Init+0x200>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9b      	lsrs	r3, r3, #18
 80010fc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a56      	ldr	r2, [pc, #344]	; (8001264 <HAL_I2C_Init+0x1f4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d802      	bhi.n	8001116 <HAL_I2C_Init+0xa6>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	e009      	b.n	800112a <HAL_I2C_Init+0xba>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_I2C_Init+0x204>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	3301      	adds	r3, #1
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_I2C_Init+0x1f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d80d      	bhi.n	8001156 <HAL_I2C_Init+0xe6>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fbb2 f3f3 	udiv	r3, r2, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf38      	it	cc
 8001152:	2304      	movcc	r3, #4
 8001154:	e04f      	b.n	80011f6 <HAL_I2C_Init+0x186>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d111      	bne.n	8001182 <HAL_I2C_Init+0x112>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1e59      	subs	r1, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001170:	3301      	adds	r3, #1
 8001172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001176:	2b00      	cmp	r3, #0
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	e012      	b.n	80011a8 <HAL_I2C_Init+0x138>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1e59      	subs	r1, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009a      	lsls	r2, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	fbb1 f3f3 	udiv	r3, r1, r3
 8001198:	3301      	adds	r3, #1
 800119a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf0c      	ite	eq
 80011a2:	2301      	moveq	r3, #1
 80011a4:	2300      	movne	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Init+0x140>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e022      	b.n	80011f6 <HAL_I2C_Init+0x186>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10e      	bne.n	80011d6 <HAL_I2C_Init+0x166>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1e59      	subs	r1, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d4:	e00f      	b.n	80011f6 <HAL_I2C_Init+0x186>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1e59      	subs	r1, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009a      	lsls	r2, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69d9      	ldr	r1, [r3, #28]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6919      	ldr	r1, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6959      	ldr	r1, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2220      	movs	r2, #32
 8001246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	000186a0 	.word	0x000186a0
 8001268:	001e847f 	.word	0x001e847f
 800126c:	003d08ff 	.word	0x003d08ff
 8001270:	431bde83 	.word	0x431bde83
 8001274:	10624dd3 	.word	0x10624dd3

08001278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	461a      	mov	r2, r3
 8001284:	460b      	mov	r3, r1
 8001286:	817b      	strh	r3, [r7, #10]
 8001288:	4613      	mov	r3, r2
 800128a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001290:	f7ff fc42 	bl	8000b18 <HAL_GetTick>
 8001294:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b20      	cmp	r3, #32
 80012a0:	f040 80ee 	bne.w	8001480 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2319      	movs	r3, #25
 80012aa:	2201      	movs	r2, #1
 80012ac:	4977      	ldr	r1, [pc, #476]	; (800148c <HAL_I2C_Master_Transmit+0x214>)
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 faa2 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80012ba:	2302      	movs	r3, #2
 80012bc:	e0e1      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_I2C_Master_Transmit+0x54>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0da      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d007      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001300:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2221      	movs	r2, #33	; 0x21
 8001306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2210      	movs	r2, #16
 800130e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	893a      	ldrh	r2, [r7, #8]
 8001322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a5a      	ldr	r2, [pc, #360]	; (8001490 <HAL_I2C_Master_Transmit+0x218>)
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132e:	b29a      	uxth	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001334:	8979      	ldrh	r1, [r7, #10]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	6a3a      	ldr	r2, [r7, #32]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f9da 	bl	80016f4 <I2C_MasterRequestWrite>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00f      	beq.n	8001366 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b04      	cmp	r3, #4
 800134c:	d105      	bne.n	800135a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e093      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e08d      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800137c:	e066      	b.n	800144c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	6a39      	ldr	r1, [r7, #32]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 faf7 	bl	8001976 <I2C_WaitOnTXEFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00f      	beq.n	80013ae <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b04      	cmp	r3, #4
 8001394:	d109      	bne.n	80013aa <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06b      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e069      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	6251      	str	r1, [r2, #36]	; 0x24
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d119      	bne.n	800141c <HAL_I2C_Master_Transmit+0x1a4>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	1c59      	adds	r1, r3, #1
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6251      	str	r1, [r2, #36]	; 0x24
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fae5 	bl	80019f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00f      	beq.n	800144c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2b04      	cmp	r3, #4
 8001432:	d109      	bne.n	8001448 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001442:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e01c      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e01a      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d194      	bne.n	800137e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001480:	2302      	movs	r3, #2
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	00100002 	.word	0x00100002
 8001490:	ffff0000 	.word	0xffff0000

08001494 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	460b      	mov	r3, r1
 80014a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fb2e 	bl	8000b18 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	f040 810b 	bne.w	80016e2 <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2319      	movs	r3, #25
 80014d2:	2201      	movs	r2, #1
 80014d4:	4985      	ldr	r1, [pc, #532]	; (80016ec <HAL_I2C_IsDeviceReady+0x258>)
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f98e 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e0fe      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_I2C_IsDeviceReady+0x60>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0f7      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d007      	beq.n	800151a <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2224      	movs	r2, #36	; 0x24
 800152e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_I2C_IsDeviceReady+0x25c>)
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2200      	movs	r2, #0
 8001556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f94c 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0bc      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff facd 	bl	8000b18 <HAL_GetTick>
 800157e:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b02      	cmp	r3, #2
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80015b8:	e02a      	b.n	8001610 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_I2C_IsDeviceReady+0x13c>
 80015c0:	f7ff faaa 	bl	8000b18 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d203      	bcs.n	80015d8 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	22a0      	movs	r2, #160	; 0xa0
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <HAL_I2C_IsDeviceReady+0x18e>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <HAL_I2C_IsDeviceReady+0x18e>
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2ba0      	cmp	r3, #160	; 0xa0
 8001620:	d1cb      	bne.n	80015ba <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b02      	cmp	r3, #2
 8001636:	d129      	bne.n	800168c <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001646:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2319      	movs	r3, #25
 8001664:	2201      	movs	r2, #1
 8001666:	4921      	ldr	r1, [pc, #132]	; (80016ec <HAL_I2C_IsDeviceReady+0x258>)
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f8c5 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e035      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e02b      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016a4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2319      	movs	r3, #25
 80016ac:	2201      	movs	r2, #1
 80016ae:	490f      	ldr	r1, [pc, #60]	; (80016ec <HAL_I2C_IsDeviceReady+0x258>)
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f8a1 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e011      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	617a      	str	r2, [r7, #20]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f63f af38 	bhi.w	800153e <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	00100002 	.word	0x00100002
 80016f0:	ffff0000 	.word	0xffff0000

080016f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	460b      	mov	r3, r1
 8001702:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d006      	beq.n	800171e <I2C_MasterRequestWrite+0x2a>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d003      	beq.n	800171e <I2C_MasterRequestWrite+0x2a>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800171c:	d108      	bne.n	8001730 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e00b      	b.n	8001748 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	2b12      	cmp	r3, #18
 8001736:	d107      	bne.n	8001748 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f84f 	bl	80017f8 <I2C_WaitOnFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e041      	b.n	80017e8 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176c:	d108      	bne.n	8001780 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800176e:	897b      	ldrh	r3, [r7, #10]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	e021      	b.n	80017c4 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001780:	897b      	ldrh	r3, [r7, #10]
 8001782:	11db      	asrs	r3, r3, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 0306 	and.w	r3, r3, #6
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f063 030f 	orn	r3, r3, #15
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4914      	ldr	r1, [pc, #80]	; (80017f0 <I2C_MasterRequestWrite+0xfc>)
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f87b 	bl	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d101      	bne.n	80017b6 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e018      	b.n	80017e8 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e016      	b.n	80017e8 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	490a      	ldr	r1, [pc, #40]	; (80017f4 <I2C_MasterRequestWrite+0x100>)
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f865 	bl	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d101      	bne.n	80017e2 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e002      	b.n	80017e8 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e000      	b.n	80017e8 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	00010008 	.word	0x00010008
 80017f4:	00010002 	.word	0x00010002

080017f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001808:	e01f      	b.n	800184a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d01b      	beq.n	800184a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001818:	f7ff f97e 	bl	8000b18 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d210      	bcs.n	800184a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2220      	movs	r2, #32
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e023      	b.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10d      	bne.n	8001870 <I2C_WaitOnFlagUntilTimeout+0x78>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4013      	ands	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	e00c      	b.n	800188a <I2C_WaitOnFlagUntilTimeout+0x92>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4013      	ands	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	429a      	cmp	r2, r3
 800188e:	d0bc      	beq.n	800180a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018a8:	e040      	b.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d11c      	bne.n	80018f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018d2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2204      	movs	r2, #4
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e03c      	b.n	800196e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fa:	d017      	beq.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001902:	f7ff f909 	bl	8000b18 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e020      	b.n	800196e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10c      	bne.n	8001950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	43da      	mvns	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	4013      	ands	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e00b      	b.n	8001968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4013      	ands	r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d19e      	bne.n	80018aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001982:	e029      	b.n	80019d8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f870 	bl	8001a6a <I2C_IsAcknowledgeFailed>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e029      	b.n	80019e8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d01d      	beq.n	80019d8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019a2:	f7ff f8b9 	bl	8000b18 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d212      	bcs.n	80019d8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e007      	b.n	80019e8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b80      	cmp	r3, #128	; 0x80
 80019e4:	d1ce      	bne.n	8001984 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019fc:	e029      	b.n	8001a52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f833 	bl	8001a6a <I2C_IsAcknowledgeFailed>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e029      	b.n	8001a62 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d01d      	beq.n	8001a52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a1c:	f7ff f87c 	bl	8000b18 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d212      	bcs.n	8001a52 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e007      	b.n	8001a62 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d1ce      	bne.n	80019fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d114      	bne.n	8001aac <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a8a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8087 	beq.w	8001be0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ad2:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d00c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ade:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d112      	bne.n	8001b10 <HAL_RCC_OscConfig+0x58>
 8001aea:	4b8c      	ldr	r3, [pc, #560]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d10b      	bne.n	8001b10 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d06c      	beq.n	8001bde <HAL_RCC_OscConfig+0x126>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d168      	bne.n	8001bde <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e22d      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d106      	bne.n	8001b28 <HAL_RCC_OscConfig+0x70>
 8001b1a:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7f      	ldr	r2, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e02e      	b.n	8001b86 <HAL_RCC_OscConfig+0xce>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x92>
 8001b30:	4b7a      	ldr	r3, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a79      	ldr	r2, [pc, #484]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b77      	ldr	r3, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a76      	ldr	r2, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e01d      	b.n	8001b86 <HAL_RCC_OscConfig+0xce>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0xb6>
 8001b54:	4b71      	ldr	r3, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a70      	ldr	r2, [pc, #448]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6d      	ldr	r2, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0xce>
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a67      	ldr	r2, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d013      	beq.n	8001bb6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe ffc3 	bl	8000b18 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7fe ffbf 	bl	8000b18 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1e1      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0xde>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7fe ffaf 	bl	8000b18 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbe:	f7fe ffab 	bl	8000b18 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1cd      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x106>
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d063      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf8:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d11c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x186>
 8001c04:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x170>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e1a1      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3c:	e03a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d020      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x268>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff64 	bl	8000b18 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7fe ff60 	bl	8000b18 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e182      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4926      	ldr	r1, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
 8001c86:	e015      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x268>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ff43 	bl	8000b18 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7fe ff3f 	bl	8000b18 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e161      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d039      	beq.n	8001d34 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d019      	beq.n	8001cfc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7fe ff23 	bl	8000b18 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7fe ff1f 	bl	8000b18 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e141      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_RCC_OscConfig+0x264>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f000 facf 	bl	8002298 <RCC_Delay>
 8001cfa:	e01b      	b.n	8001d34 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ff09 	bl	8000b18 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e00e      	b.n	8001d28 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7fe ff05 	bl	8000b18 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d907      	bls.n	8001d28 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e127      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000
 8001d24:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ea      	bne.n	8001d0a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a6 	beq.w	8001e8e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a87      	ldr	r2, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x4c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x4c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7e      	ldr	r2, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x4c0>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe fec7 	bl	8000b18 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe fec3 	bl	8000b18 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0e5      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x30a>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_OscConfig+0x366>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x32c>
 8001dca:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	e01c      	b.n	8001e1e <HAL_RCC_OscConfig+0x366>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x34e>
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a5d      	ldr	r2, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x366>
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fe77 	bl	8000b18 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fe73 	bl	8000b18 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e093      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fe61 	bl	8000b18 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe fe5d 	bl	8000b18 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e07d      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d069      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d061      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d146      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe32 	bl	8000b18 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fe2e 	bl	8000b18 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e050      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d108      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4921      	ldr	r1, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a19      	ldr	r1, [r3, #32]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	430b      	orrs	r3, r1
 8001f04:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe02 	bl	8000b18 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe fdfe 	bl	8000b18 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e020      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x460>
 8001f36:	e018      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fdeb 	bl	8000b18 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe fde7 	bl	8000b18 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e009      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x4bc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x48e>
 8001f64:	e001      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f8e:	4b7e      	ldr	r3, [pc, #504]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d910      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9c:	4b7a      	ldr	r3, [pc, #488]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 0207 	bic.w	r2, r3, #7
 8001fa4:	4978      	ldr	r1, [pc, #480]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0e0      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d020      	beq.n	800200c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a6c      	ldr	r2, [pc, #432]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8001fdc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8001ff4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ff8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4961      	ldr	r1, [pc, #388]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d06a      	beq.n	80020ee <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	4b5a      	ldr	r3, [pc, #360]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d115      	bne.n	8002058 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0a7      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e09b      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e093      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 0203 	bic.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4949      	ldr	r1, [pc, #292]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206a:	f7fe fd55 	bl	8000b18 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d112      	bne.n	800209e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe fd4d 	bl	8000b18 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e077      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_ClockConfig+0xfa>
 800209c:	e027      	b.n	80020ee <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d11d      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fd36 	bl	8000b18 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e060      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x128>
 80020ca:	e010      	b.n	80020ee <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe fd24 	bl	8000b18 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04e      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ee      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d210      	bcs.n	800211e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 0207 	bic.w	r2, r3, #7
 8002104:	4920      	ldr	r1, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e030      	b.n	8002180 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d009      	beq.n	800215c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	490d      	ldr	r1, [pc, #52]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215c:	f000 f81c 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002160:	4601      	mov	r1, r0
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCC_ClockConfig+0x210>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	fa21 f303 	lsr.w	r3, r1, r3
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_RCC_ClockConfig+0x214>)
 8002176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002178:	2000      	movs	r0, #0
 800217a:	f7fe fc8b 	bl	8000a94 <HAL_InitTick>
  
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	08005810 	.word	0x08005810
 8002194:	20000018 	.word	0x20000018

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b490      	push	{r4, r7}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	1d3c      	adds	r4, r7, #4
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x46>
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e02d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002210:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6a3b      	ldr	r3, [r7, #32]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	0800431c 	.word	0x0800431c
 800224c:	0800432c 	.word	0x0800432c
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000018 	.word	0x20000018

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08005820 	.word	0x08005820

08002298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <RCC_Delay+0x34>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <RCC_Delay+0x38>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a5b      	lsrs	r3, r3, #9
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80022b4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <RCC_Delay+0x1c>
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000018 	.word	0x20000018
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e081      	b.n	80023f8 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 ff83 	bl	8003214 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0207 	bic.w	r2, r2, #7
 8002324:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f000 f89d 	bl	8002470 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	4313      	orrs	r3, r2
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800237c:	f023 030c 	bic.w	r3, r3, #12
 8002380:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4313      	orrs	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	011a      	lsls	r2, r3, #4
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	4313      	orrs	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80023c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4313      	orrs	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_TIM_Encoder_Start+0x16>
 8002410:	2b04      	cmp	r3, #4
 8002412:	d008      	beq.n	8002426 <HAL_TIM_Encoder_Start+0x26>
 8002414:	e00f      	b.n	8002436 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f88c 	bl	800253c <TIM_CCxChannelCmd>
      break;
 8002424:	e016      	b.n	8002454 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	2104      	movs	r1, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f884 	bl	800253c <TIM_CCxChannelCmd>
      break;
 8002434:	e00e      	b.n	8002454 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f87c 	bl	800253c <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f875 	bl	800253c <TIM_CCxChannelCmd>
     break;
 8002452:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00b      	beq.n	80024a4 <TIM_Base_SetConfig+0x34>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d007      	beq.n	80024a4 <TIM_Base_SetConfig+0x34>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <TIM_Base_SetConfig+0xc4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0x34>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a26      	ldr	r2, [pc, #152]	; (8002538 <TIM_Base_SetConfig+0xc8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d108      	bne.n	80024b6 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d007      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <TIM_Base_SetConfig+0xc4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <TIM_Base_SetConfig+0xc8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d108      	bne.n	80024e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800254c:	2201      	movs	r2, #1
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	43db      	mvns	r3, r3
 800255e:	401a      	ands	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e032      	b.n	80025fe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025b6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800260c:	f7fe fa2c 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002610:	f000 f866 	bl	80026e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002614:	f000 f926 	bl	8002864 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002618:	f000 f8a2 	bl	8002760 <MX_I2C1_Init>
  MX_TIM2_Init();
 800261c:	f000 f8ce 	bl	80027bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  set_oled_addr(0x78);
 8002620:	2078      	movs	r0, #120	; 0x78
 8002622:	f000 f983 	bl	800292c <set_oled_addr>
  ssd1306_sel_I2C(&hi2c1);
 8002626:	482a      	ldr	r0, [pc, #168]	; (80026d0 <main+0xc8>)
 8002628:	f000 fcfa 	bl	8003020 <ssd1306_sel_I2C>
  SSD1306_Init ();
 800262c:	f000 f98e 	bl	800294c <SSD1306_Init>

  SSD1306_Putint(n_pulsos_a, 1);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <main+0xcc>)
 8002632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fbc9 	bl	8002dd0 <SSD1306_Putint>
  SSD1306_UpdateScreen();
 800263e:	f000 fa7b 	bl	8002b38 <SSD1306_UpdateScreen>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8002642:	2104      	movs	r1, #4
 8002644:	4824      	ldr	r0, [pc, #144]	; (80026d8 <main+0xd0>)
 8002646:	f7ff fedb 	bl	8002400 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  n_pulsos_a = (TIM2->CNT);
 800264a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b21a      	sxth	r2, r3
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <main+0xcc>)
 8002654:	801a      	strh	r2, [r3, #0]
		  n_pulsos_a = n_pulsos_a/4;
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <main+0xcc>)
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da00      	bge.n	8002662 <main+0x5a>
 8002660:	3303      	adds	r3, #3
 8002662:	109b      	asrs	r3, r3, #2
 8002664:	b21a      	sxth	r2, r3
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <main+0xcc>)
 8002668:	801a      	strh	r2, [r3, #0]
		  if(n_pulsos_a < 0){
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <main+0xcc>)
 800266c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da06      	bge.n	8002682 <main+0x7a>
			  n_pulsos_a = 0;
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <main+0xcc>)
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
			  TIM2->CNT = 0;
 800267a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  if (n_pulsos_a > 100){
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <main+0xcc>)
 8002684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	dd07      	ble.n	800269c <main+0x94>
			  n_pulsos_a = 100;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <main+0xcc>)
 800268e:	2264      	movs	r2, #100	; 0x64
 8002690:	801a      	strh	r2, [r3, #0]
			  TIM2->CNT = 400;
 8002692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002696:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  if (prev_a != n_pulsos_a){
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <main+0xd4>)
 800269e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <main+0xcc>)
 80026a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d00d      	beq.n	80026c8 <main+0xc0>
			  prev_a = n_pulsos_a;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <main+0xcc>)
 80026ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <main+0xd4>)
 80026b4:	801a      	strh	r2, [r3, #0]
			  SSD1306_Putint(n_pulsos_a, 1);
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <main+0xcc>)
 80026b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fb86 	bl	8002dd0 <SSD1306_Putint>
			  SSD1306_UpdateScreen();
 80026c4:	f000 fa38 	bl	8002b38 <SSD1306_UpdateScreen>
			  }
	  HAL_Delay(50);
 80026c8:	2032      	movs	r0, #50	; 0x32
 80026ca:	f7fe fa2f 	bl	8000b2c <HAL_Delay>
	  n_pulsos_a = (TIM2->CNT);
 80026ce:	e7bc      	b.n	800264a <main+0x42>
 80026d0:	200004c4 	.word	0x200004c4
 80026d4:	200000a0 	.word	0x200000a0
 80026d8:	20000518 	.word	0x20000518
 80026dc:	200000a2 	.word	0x200000a2

080026e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b090      	sub	sp, #64	; 0x40
 80026e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e6:	f107 0318 	add.w	r3, r7, #24
 80026ea:	2228      	movs	r2, #40	; 0x28
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 feb9 	bl	8003466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002706:	2301      	movs	r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800270a:	2310      	movs	r3, #16
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270e:	2302      	movs	r3, #2
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002712:	2300      	movs	r3, #0
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002716:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f9c9 	bl	8001ab8 <HAL_RCC_OscConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800272c:	f000 f8f7 	bl	800291e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002730:	230f      	movs	r3, #15
 8002732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002734:	2302      	movs	r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fc19 	bl	8001f80 <HAL_RCC_ClockConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002754:	f000 f8e3 	bl	800291e <Error_Handler>
  }
}
 8002758:	bf00      	nop
 800275a:	3740      	adds	r7, #64	; 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <MX_I2C1_Init+0x54>)
 8002768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_I2C1_Init+0x50>)
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_I2C1_Init+0x58>)
 800276e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_I2C1_Init+0x50>)
 800277e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_I2C1_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_I2C1_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <MX_I2C1_Init+0x50>)
 800279e:	f7fe fc67 	bl	8001070 <HAL_I2C_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027a8:	f000 f8b9 	bl	800291e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200004c4 	.word	0x200004c4
 80027b4:	40005400 	.word	0x40005400
 80027b8:	00061a80 	.word	0x00061a80

080027bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fe4b 	bl	8003466 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_TIM2_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002800:	2303      	movs	r3, #3
 8002802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4619      	mov	r1, r3
 800282a:	480d      	ldr	r0, [pc, #52]	; (8002860 <MX_TIM2_Init+0xa4>)
 800282c:	f7ff fd52 	bl	80022d4 <HAL_TIM_Encoder_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002836:	f000 f872 	bl	800291e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <MX_TIM2_Init+0xa4>)
 8002848:	f7ff fe9a 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002852:	f000 f864 	bl	800291e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	3730      	adds	r7, #48	; 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000518 	.word	0x20000518

08002864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_GPIO_Init+0x8c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <MX_GPIO_Init+0x8c>)
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_GPIO_Init+0x8c>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <MX_GPIO_Init+0x8c>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <MX_GPIO_Init+0x8c>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_GPIO_Init+0x8c>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_GPIO_Init+0x8c>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <MX_GPIO_Init+0x8c>)
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_GPIO_Init+0x8c>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c0:	2304      	movs	r3, #4
 80028c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_GPIO_Init+0x90>)
 80028c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	4809      	ldr	r0, [pc, #36]	; (80028f8 <MX_GPIO_Init+0x94>)
 80028d4:	f7fe fa56 	bl	8000d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	2008      	movs	r0, #8
 80028de:	f7fe fa1a 	bl	8000d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80028e2:	2008      	movs	r0, #8
 80028e4:	f7fe fa33 	bl	8000d4e <HAL_NVIC_EnableIRQ>

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	10110000 	.word	0x10110000
 80028f8:	40010800 	.word	0x40010800

080028fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_2){
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d103      	bne.n	8002914 <HAL_GPIO_EXTI_Callback+0x18>
		TIM2->CNT = 0;
 800290c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <set_oled_addr>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void set_oled_addr(uint8_t addr){
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
	oled_addr = addr;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <set_oled_addr+0x1c>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	7013      	strb	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200005ac 	.word	0x200005ac

0800294c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0

	/* Init I2C */
//	ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c_current, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002952:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002956:	2201      	movs	r2, #1
 8002958:	2178      	movs	r1, #120	; 0x78
 800295a:	4874      	ldr	r0, [pc, #464]	; (8002b2c <SSD1306_Init+0x1e0>)
 800295c:	f7fe fd9a 	bl	8001494 <HAL_I2C_IsDeviceReady>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8002966:	2300      	movs	r3, #0
 8002968:	e0dc      	b.n	8002b24 <SSD1306_Init+0x1d8>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800296a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800296e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002970:	e002      	b.n	8002978 <SSD1306_Init+0x2c>
		p--;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3b01      	subs	r3, #1
 8002976:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f9      	bne.n	8002972 <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800297e:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	22ae      	movs	r2, #174	; 0xae
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fbb6 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <SSD1306_Init+0x1e4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fbaf 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800299a:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <SSD1306_Init+0x1e4>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2210      	movs	r2, #16
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fba8 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029a8:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	22b0      	movs	r2, #176	; 0xb0
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fba1 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80029b6:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	22c8      	movs	r2, #200	; 0xc8
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fb9a 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80029c4:	4b5a      	ldr	r3, [pc, #360]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fb93 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80029d2:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2210      	movs	r2, #16
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fb8c 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fb85 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2281      	movs	r2, #129	; 0x81
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fb7e 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <SSD1306_Init+0x1e4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fb77 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002a0a:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	22a1      	movs	r2, #161	; 0xa1
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fb70 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002a18:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	22a6      	movs	r2, #166	; 0xa6
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fb69 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002a26:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	22a8      	movs	r2, #168	; 0xa8
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb62 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fb5b 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	22a4      	movs	r2, #164	; 0xa4
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb54 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	22d3      	movs	r2, #211	; 0xd3
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb4d 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fb46 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	22d5      	movs	r2, #213	; 0xd5
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fb3f 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	22f0      	movs	r2, #240	; 0xf0
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fb38 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	22d9      	movs	r2, #217	; 0xd9
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fb31 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2222      	movs	r2, #34	; 0x22
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fb2a 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	22da      	movs	r2, #218	; 0xda
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fb23 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2212      	movs	r2, #18
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fb1c 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	22db      	movs	r2, #219	; 0xdb
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb15 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fb0e 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	228d      	movs	r2, #141	; 0x8d
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fb07 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2214      	movs	r2, #20
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb00 	bl	80030f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <SSD1306_Init+0x1e4>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	22af      	movs	r2, #175	; 0xaf
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 faf9 	bl	80030f8 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 f84e 	bl	8002ba8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002b0c:	f000 f814 	bl	8002b38 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <SSD1306_Init+0x1e8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <SSD1306_Init+0x1e8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SSD1306_Init+0x1e8>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000558 	.word	0x20000558
 8002b30:	200005ac 	.word	0x200005ac
 8002b34:	200004ac 	.word	0x200004ac

08002b38 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	e025      	b.n	8002b90 <SSD1306_UpdateScreen+0x58>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <SSD1306_UpdateScreen+0x68>)
 8002b46:	7818      	ldrb	r0, [r3, #0]
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	3b50      	subs	r3, #80	; 0x50
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2100      	movs	r1, #0
 8002b52:	f000 fad1 	bl	80030f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <SSD1306_UpdateScreen+0x68>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 faca 	bl	80030f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <SSD1306_UpdateScreen+0x68>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fac3 	bl	80030f8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(oled_addr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <SSD1306_UpdateScreen+0x68>)
 8002b74:	7818      	ldrb	r0, [r3, #0]
 8002b76:	79fa      	ldrb	r2, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <SSD1306_UpdateScreen+0x6c>)
 8002b80:	441a      	add	r2, r3
 8002b82:	2381      	movs	r3, #129	; 0x81
 8002b84:	2140      	movs	r1, #64	; 0x40
 8002b86:	f000 fa5d 	bl	8003044 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	71fb      	strb	r3, [r7, #7]
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d9d6      	bls.n	8002b44 <SSD1306_UpdateScreen+0xc>
	}
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200005ac 	.word	0x200005ac
 8002ba4:	200000a4 	.word	0x200000a4

08002ba8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <SSD1306_Fill+0x14>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <SSD1306_Fill+0x16>
 8002bbc:	23ff      	movs	r3, #255	; 0xff
 8002bbe:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <SSD1306_Fill+0x2c>)
 8002bc6:	f000 fc4e 	bl	8003466 <memset>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200000a4 	.word	0x200000a4

08002bd8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002bd8:	b490      	push	{r4, r7}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
 8002be2:	460b      	mov	r3, r1
 8002be4:	80bb      	strh	r3, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	70fb      	strb	r3, [r7, #3]
	if (
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d850      	bhi.n	8002c92 <SSD1306_DrawPixel+0xba>
		x >= SSD1306_WIDTH ||
 8002bf0:	88bb      	ldrh	r3, [r7, #4]
 8002bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8002bf4:	d84d      	bhi.n	8002c92 <SSD1306_DrawPixel+0xba>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <SSD1306_DrawPixel+0xc4>)
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d11e      	bne.n	8002c50 <SSD1306_DrawPixel+0x78>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	01db      	lsls	r3, r3, #7
 8002c20:	440b      	add	r3, r1
 8002c22:	4413      	add	r3, r2
 8002c24:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <SSD1306_DrawPixel+0xc8>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	b25a      	sxtb	r2, r3
 8002c2a:	88bb      	ldrh	r3, [r7, #4]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b25c      	sxtb	r4, r3
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	4601      	mov	r1, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	01db      	lsls	r3, r3, #7
 8002c44:	440b      	add	r3, r1
 8002c46:	4413      	add	r3, r2
 8002c48:	b2e1      	uxtb	r1, r4
 8002c4a:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <SSD1306_DrawPixel+0xc8>)
 8002c4c:	54d1      	strb	r1, [r2, r3]
 8002c4e:	e021      	b.n	8002c94 <SSD1306_DrawPixel+0xbc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	b298      	uxth	r0, r3
 8002c58:	4601      	mov	r1, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	01db      	lsls	r3, r3, #7
 8002c5e:	440b      	add	r3, r1
 8002c60:	4413      	add	r3, r2
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <SSD1306_DrawPixel+0xc8>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	b25a      	sxtb	r2, r3
 8002c68:	88bb      	ldrh	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b25c      	sxtb	r4, r3
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	4601      	mov	r1, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	440b      	add	r3, r1
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2e1      	uxtb	r1, r4
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <SSD1306_DrawPixel+0xc8>)
 8002c8e:	54d1      	strb	r1, [r2, r3]
 8002c90:	e000      	b.n	8002c94 <SSD1306_DrawPixel+0xbc>
		return;
 8002c92:	bf00      	nop
	}
}
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc90      	pop	{r4, r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	200004ac 	.word	0x200004ac
 8002ca0:	200000a4 	.word	0x200000a4

08002ca4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	80fb      	strh	r3, [r7, #6]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <SSD1306_GotoXY+0x28>)
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <SSD1306_GotoXY+0x28>)
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	8053      	strh	r3, [r2, #2]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	200004ac 	.word	0x200004ac

08002cd0 <SSD1306_Putc>:

char SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
	if (
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	dc07      	bgt.n	8002d00 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002cf2:	885b      	ldrh	r3, [r3, #2]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002cfc:	2b3f      	cmp	r3, #63	; 0x3f
 8002cfe:	dd01      	ble.n	8002d04 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e05e      	b.n	8002dc2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e04b      	b.n	8002da2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	3b20      	subs	r3, #32
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	7849      	ldrb	r1, [r1, #1]
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	440b      	add	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e030      	b.n	8002d90 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	b298      	uxth	r0, r3
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002d4c:	885a      	ldrh	r2, [r3, #2]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	79ba      	ldrb	r2, [r7, #6]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7ff ff3d 	bl	8002bd8 <SSD1306_DrawPixel>
 8002d5e:	e014      	b.n	8002d8a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	b298      	uxth	r0, r3
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002d6e:	885a      	ldrh	r2, [r3, #2]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	b299      	uxth	r1, r3
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff ff27 	bl	8002bd8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d3c8      	bcc.n	8002d2e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	461a      	mov	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d3ad      	bcc.n	8002d0a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <SSD1306_Putc+0xfc>)
 8002dbe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200004ac 	.word	0x200004ac

08002dd0 <SSD1306_Putint>:

void SSD1306_Putint(int data, uint8_t slot) {
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
 8002ddc:	466b      	mov	r3, sp
 8002dde:	461d      	mov	r5, r3

	char menos_char = ' ';
 8002de0:	2320      	movs	r3, #32
 8002de2:	767b      	strb	r3, [r7, #25]
	if (data < 0) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da04      	bge.n	8002df4 <SSD1306_Putint+0x24>
		data = -data;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	425b      	negs	r3, r3
 8002dee:	607b      	str	r3, [r7, #4]
		menos_char = '-';
 8002df0:	232d      	movs	r3, #45	; 0x2d
 8002df2:	767b      	strb	r3, [r7, #25]
	}

	int size = size_int(data);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8bf 	bl	8002f78 <size_int>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	617b      	str	r3, [r7, #20]
	char data_char[size];		// String de chars=
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	1e43      	subs	r3, r0, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	00d4      	lsls	r4, r2, #3
 8002e16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	00d4      	lsls	r4, r2, #3
 8002e2e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4603      	mov	r3, r0
 8002e36:	3307      	adds	r3, #7
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	ebad 0d03 	sub.w	sp, sp, r3
 8002e40:	466b      	mov	r3, sp
 8002e42:	3300      	adds	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4946      	ldr	r1, [pc, #280]	; (8002f64 <SSD1306_Putint+0x194>)
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fb13 	bl	8003478 <siprintf>

	uint16_t x_slot = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	837b      	strh	r3, [r7, #26]
	uint16_t y_slot = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	83bb      	strh	r3, [r7, #28]
	uint8_t slot_mini = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	77fb      	strb	r3, [r7, #31]
	switch (slot) {
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d829      	bhi.n	8002eba <SSD1306_Putint+0xea>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <SSD1306_Putint+0x9c>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e8b 	.word	0x08002e8b
 8002e74:	08002e95 	.word	0x08002e95
 8002e78:	08002e9f 	.word	0x08002e9f
 8002e7c:	08002ead 	.word	0x08002ead
	case 1:
		x_slot = 2;
 8002e80:	2302      	movs	r3, #2
 8002e82:	837b      	strh	r3, [r7, #26]
		y_slot = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	83bb      	strh	r3, [r7, #28]
		break;
 8002e88:	e017      	b.n	8002eba <SSD1306_Putint+0xea>
	case 2:
		x_slot = 2;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	837b      	strh	r3, [r7, #26]
		y_slot = 17;
 8002e8e:	2311      	movs	r3, #17
 8002e90:	83bb      	strh	r3, [r7, #28]
		break;
 8002e92:	e012      	b.n	8002eba <SSD1306_Putint+0xea>
	case 3:
		x_slot = 2;
 8002e94:	2302      	movs	r3, #2
 8002e96:	837b      	strh	r3, [r7, #26]
		y_slot = 35;
 8002e98:	2323      	movs	r3, #35	; 0x23
 8002e9a:	83bb      	strh	r3, [r7, #28]
		break;
 8002e9c:	e00d      	b.n	8002eba <SSD1306_Putint+0xea>
	case 4:
		x_slot = 22;
 8002e9e:	2316      	movs	r3, #22
 8002ea0:	837b      	strh	r3, [r7, #26]
		y_slot = 53;
 8002ea2:	2335      	movs	r3, #53	; 0x35
 8002ea4:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
		break;
 8002eaa:	e006      	b.n	8002eba <SSD1306_Putint+0xea>
	case 5:
		x_slot = 70;
 8002eac:	2346      	movs	r3, #70	; 0x46
 8002eae:	837b      	strh	r3, [r7, #26]
		y_slot = 53;
 8002eb0:	2335      	movs	r3, #53	; 0x35
 8002eb2:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
		break;
 8002eb8:	bf00      	nop
	}
	if (slot_mini == 1){
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d127      	bne.n	8002f10 <SSD1306_Putint+0x140>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 8002ec0:	8bba      	ldrh	r2, [r7, #28]
 8002ec2:	8b7b      	ldrh	r3, [r7, #26]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff feec 	bl	8002ca4 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4926      	ldr	r1, [pc, #152]	; (8002f68 <SSD1306_Putint+0x198>)
 8002ed0:	4826      	ldr	r0, [pc, #152]	; (8002f6c <SSD1306_Putint+0x19c>)
 8002ed2:	f000 f87f 	bl	8002fd4 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 8002ed6:	8bba      	ldrh	r2, [r7, #28]
 8002ed8:	8b7b      	ldrh	r3, [r7, #26]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fee1 	bl	8002ca4 <SSD1306_GotoXY>
		SSD1306_Putc (menos_char, &Font_7x10, 1);	// Write minus char if necessary
 8002ee2:	7e7b      	ldrb	r3, [r7, #25]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4920      	ldr	r1, [pc, #128]	; (8002f68 <SSD1306_Putint+0x198>)
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fef1 	bl	8002cd0 <SSD1306_Putc>
		SSD1306_GotoXY (x_slot+7,y_slot);			// Shif a char correspondig to the minus char
 8002eee:	8b7b      	ldrh	r3, [r7, #26]
 8002ef0:	3307      	adds	r3, #7
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8bba      	ldrh	r2, [r7, #28]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fed3 	bl	8002ca4 <SSD1306_GotoXY>
		SSD1306_Puts (data_char, &Font_7x10, 1);	// Write the value
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4919      	ldr	r1, [pc, #100]	; (8002f68 <SSD1306_Putint+0x198>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f865 	bl	8002fd4 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 8002f0a:	bf00      	nop
 8002f0c:	46ad      	mov	sp, r5
 8002f0e:	e025      	b.n	8002f5c <SSD1306_Putint+0x18c>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 8002f10:	8bba      	ldrh	r2, [r7, #28]
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fec4 	bl	8002ca4 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4914      	ldr	r1, [pc, #80]	; (8002f70 <SSD1306_Putint+0x1a0>)
 8002f20:	4814      	ldr	r0, [pc, #80]	; (8002f74 <SSD1306_Putint+0x1a4>)
 8002f22:	f000 f857 	bl	8002fd4 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 8002f26:	8bba      	ldrh	r2, [r7, #28]
 8002f28:	8b7b      	ldrh	r3, [r7, #26]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff feb9 	bl	8002ca4 <SSD1306_GotoXY>
	SSD1306_Putc (menos_char, &Font_11x18, 1);
 8002f32:	7e7b      	ldrb	r3, [r7, #25]
 8002f34:	2201      	movs	r2, #1
 8002f36:	490e      	ldr	r1, [pc, #56]	; (8002f70 <SSD1306_Putint+0x1a0>)
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fec9 	bl	8002cd0 <SSD1306_Putc>
	SSD1306_GotoXY (x_slot+11,y_slot);
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	330b      	adds	r3, #11
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	8bba      	ldrh	r2, [r7, #28]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff feab 	bl	8002ca4 <SSD1306_GotoXY>
	SSD1306_Puts (data_char, &Font_11x18, 1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4907      	ldr	r1, [pc, #28]	; (8002f70 <SSD1306_Putint+0x1a0>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f83d 	bl	8002fd4 <SSD1306_Puts>
 8002f5a:	46ad      	mov	sp, r5
//	SSD1306_UpdateScreen();
}
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	08004330 	.word	0x08004330
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	08004334 	.word	0x08004334
 8002f70:	20000010 	.word	0x20000010
 8002f74:	0800433c 	.word	0x0800433c

08002f78 <size_int>:
	SSD1306_GotoXY (x_slot,y_slot);
	SSD1306_Puts (float_str, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

uint8_t size_int(int data){
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <size_int+0x14>
		size = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e01b      	b.n	8002fc4 <size_int+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fa31 	bl	80003f4 <__aeabi_i2d>
 8002f92:	4603      	mov	r3, r0
 8002f94:	460c      	mov	r4, r1
 8002f96:	4618      	mov	r0, r3
 8002f98:	4621      	mov	r1, r4
 8002f9a:	f000 fef9 	bl	8003d90 <log10>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	f000 fe6f 	bl	8003c88 <floor>
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <size_int+0x58>)
 8002fb0:	f7fd f8d4 	bl	800015c <__adddf3>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	4621      	mov	r1, r4
 8002fbc:	f7fd fd34 	bl	8000a28 <__aeabi_d2uiz>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd90      	pop	{r4, r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	3ff00000 	.word	0x3ff00000

08002fd4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002fe2:	e012      	b.n	800300a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	79fa      	ldrb	r2, [r7, #7]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fe6f 	bl	8002cd0 <SSD1306_Putc>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d002      	beq.n	8003004 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	e008      	b.n	8003016 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e8      	bne.n	8002fe4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	781b      	ldrb	r3, [r3, #0]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <ssd1306_sel_I2C>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_sel_I2C(I2C_HandleTypeDef *hi2c) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	hi2c_current = *hi2c;
 8003028:	4a05      	ldr	r2, [pc, #20]	; (8003040 <ssd1306_sel_I2C+0x20>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	2354      	movs	r3, #84	; 0x54
 8003032:	461a      	mov	r2, r3
 8003034:	f000 fa0c 	bl	8003450 <memcpy>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000558 	.word	0x20000558

08003044 <ssd1306_I2C_WriteMulti>:
//	//while(p>0)
//	//	p--;
//	//MX_I2C1_Init();
//}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	603a      	str	r2, [r7, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
 8003052:	460b      	mov	r3, r1
 8003054:	71bb      	strb	r3, [r7, #6]
 8003056:	4613      	mov	r3, r2
 8003058:	80bb      	strh	r3, [r7, #4]
 800305a:	466b      	mov	r3, sp
 800305c:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800305e:	88bb      	ldrh	r3, [r7, #4]
 8003060:	1c58      	adds	r0, r3, #1
 8003062:	1e43      	subs	r3, r0, #1
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4603      	mov	r3, r0
 8003068:	4619      	mov	r1, r3
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	f04f 0400 	mov.w	r4, #0
 8003076:	00d4      	lsls	r4, r2, #3
 8003078:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800307c:	00cb      	lsls	r3, r1, #3
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	00d4      	lsls	r4, r2, #3
 8003090:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003094:	00cb      	lsls	r3, r1, #3
 8003096:	4603      	mov	r3, r0
 8003098:	3307      	adds	r3, #7
 800309a:	08db      	lsrs	r3, r3, #3
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	ebad 0d03 	sub.w	sp, sp, r3
 80030a2:	ab02      	add	r3, sp, #8
 80030a4:	3300      	adds	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	79ba      	ldrb	r2, [r7, #6]
 80030ac:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
 80030b2:	e00a      	b.n	80030ca <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	441a      	add	r2, r3
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	7811      	ldrb	r1, [r2, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	3301      	adds	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	88ba      	ldrh	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d2ef      	bcs.n	80030b4 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, count, 10);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	b299      	uxth	r1, r3
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	88b8      	ldrh	r0, [r7, #4]
 80030dc:	230a      	movs	r3, #10
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4603      	mov	r3, r0
 80030e2:	4804      	ldr	r0, [pc, #16]	; (80030f4 <ssd1306_I2C_WriteMulti+0xb0>)
 80030e4:	f7fe f8c8 	bl	8001278 <HAL_I2C_Master_Transmit>
 80030e8:	46ad      	mov	sp, r5
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bdb0      	pop	{r4, r5, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000558 	.word	0x20000558

080030f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
 8003102:	460b      	mov	r3, r1
 8003104:	71bb      	strb	r3, [r7, #6]
 8003106:	4613      	mov	r3, r2
 8003108:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800310e:	797b      	ldrb	r3, [r7, #5]
 8003110:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, 2, 10);
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	b299      	uxth	r1, r3
 8003116:	f107 020c 	add.w	r2, r7, #12
 800311a:	230a      	movs	r3, #10
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2302      	movs	r3, #2
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <ssd1306_I2C_Write+0x38>)
 8003122:	f7fe f8a9 	bl	8001278 <HAL_I2C_Master_Transmit>
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000558 	.word	0x20000558

08003134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_MspInit+0x5c>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_MspInit+0x5c>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6193      	str	r3, [r2, #24]
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_MspInit+0x5c>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_MspInit+0x5c>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_MspInit+0x5c>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	61d3      	str	r3, [r2, #28]
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_MspInit+0x5c>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_MspInit+0x60>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_MspInit+0x60>)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	40021000 	.word	0x40021000
 8003194:	40010000 	.word	0x40010000

08003198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_I2C_MspInit+0x70>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d123      	bne.n	8003200 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031d0:	23c0      	movs	r3, #192	; 0xc0
 80031d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d4:	2312      	movs	r3, #18
 80031d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	4619      	mov	r1, r3
 80031e2:	480b      	ldr	r0, [pc, #44]	; (8003210 <HAL_I2C_MspInit+0x78>)
 80031e4:	f7fd fdce 	bl	8000d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f2:	61d3      	str	r3, [r2, #28]
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_I2C_MspInit+0x74>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003200:	bf00      	nop
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40005400 	.word	0x40005400
 800320c:	40021000 	.word	0x40021000
 8003210:	40010c00 	.word	0x40010c00

08003214 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d123      	bne.n	800327c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	61d3      	str	r3, [r2, #28]
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_TIM_Encoder_MspInit+0x70>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003264:	2303      	movs	r3, #3
 8003266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4619      	mov	r1, r3
 8003276:	4804      	ldr	r0, [pc, #16]	; (8003288 <HAL_TIM_Encoder_MspInit+0x74>)
 8003278:	f7fd fd84 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	40010800 	.word	0x40010800

0800328c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <HardFault_Handler+0x4>

0800329e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a2:	e7fe      	b.n	80032a2 <MemManage_Handler+0x4>

080032a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <BusFault_Handler+0x4>

080032aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <UsageFault_Handler+0x4>

080032b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d8:	f7fd fc0c 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}

080032e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032e4:	2004      	movs	r0, #4
 80032e6:	f7fd feab 	bl	8001040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x50>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x16>
		heap_end = &end;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <_sbrk+0x50>)
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <_sbrk+0x54>)
 8003304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <_sbrk+0x50>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <_sbrk+0x50>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	466a      	mov	r2, sp
 8003316:	4293      	cmp	r3, r2
 8003318:	d907      	bls.n	800332a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800331a:	f000 f86f 	bl	80033fc <__errno>
 800331e:	4602      	mov	r2, r0
 8003320:	230c      	movs	r3, #12
 8003322:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	e006      	b.n	8003338 <_sbrk+0x48>
	}

	heap_end += incr;
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <_sbrk+0x50>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a03      	ldr	r2, [pc, #12]	; (8003340 <_sbrk+0x50>)
 8003334:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200004b4 	.word	0x200004b4
 8003344:	200005b8 	.word	0x200005b8

08003348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <SystemInit+0x5c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <SystemInit+0x5c>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <SystemInit+0x5c>)
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4911      	ldr	r1, [pc, #68]	; (80033a4 <SystemInit+0x5c>)
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <SystemInit+0x60>)
 8003360:	4013      	ands	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <SystemInit+0x5c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <SystemInit+0x5c>)
 800336a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <SystemInit+0x5c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <SystemInit+0x5c>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <SystemInit+0x5c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <SystemInit+0x5c>)
 8003386:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800338a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SystemInit+0x5c>)
 800338e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003392:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <SystemInit+0x64>)
 8003396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800339a:	609a      	str	r2, [r3, #8]
#endif 
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40021000 	.word	0x40021000
 80033a8:	f8ff0000 	.word	0xf8ff0000
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033b2:	e003      	b.n	80033bc <LoopCopyDataInit>

080033b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033ba:	3104      	adds	r1, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033bc:	480a      	ldr	r0, [pc, #40]	; (80033e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80033c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033c4:	d3f6      	bcc.n	80033b4 <CopyDataInit>
  ldr r2, =_sbss
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80033c8:	e002      	b.n	80033d0 <LoopFillZerobss>

080033ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80033cc:	f842 3b04 	str.w	r3, [r2], #4

080033d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80033d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80033d4:	d3f9      	bcc.n	80033ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033d6:	f7ff ffb7 	bl	8003348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033da:	f000 f815 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033de:	f7ff f913 	bl	8002608 <main>
  bx lr
 80033e2:	4770      	bx	lr
  ldr r3, =_sidata
 80033e4:	0800586c 	.word	0x0800586c
  ldr r0, =_sdata
 80033e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80033ec:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 80033f0:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 80033f4:	200005b4 	.word	0x200005b4

080033f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC1_2_IRQHandler>
	...

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	2000001c 	.word	0x2000001c

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	2500      	movs	r5, #0
 800340c:	4e0c      	ldr	r6, [pc, #48]	; (8003440 <__libc_init_array+0x38>)
 800340e:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 8003410:	1ba4      	subs	r4, r4, r6
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	42a5      	cmp	r5, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	f000 ff74 	bl	8004304 <_init>
 800341c:	2500      	movs	r5, #0
 800341e:	4e0a      	ldr	r6, [pc, #40]	; (8003448 <__libc_init_array+0x40>)
 8003420:	4c0a      	ldr	r4, [pc, #40]	; (800344c <__libc_init_array+0x44>)
 8003422:	1ba4      	subs	r4, r4, r6
 8003424:	10a4      	asrs	r4, r4, #2
 8003426:	42a5      	cmp	r5, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003430:	4798      	blx	r3
 8003432:	3501      	adds	r5, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800343a:	4798      	blx	r3
 800343c:	3501      	adds	r5, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08005864 	.word	0x08005864
 8003444:	08005864 	.word	0x08005864
 8003448:	08005864 	.word	0x08005864
 800344c:	08005868 	.word	0x08005868

08003450 <memcpy>:
 8003450:	b510      	push	{r4, lr}
 8003452:	1e43      	subs	r3, r0, #1
 8003454:	440a      	add	r2, r1
 8003456:	4291      	cmp	r1, r2
 8003458:	d100      	bne.n	800345c <memcpy+0xc>
 800345a:	bd10      	pop	{r4, pc}
 800345c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003464:	e7f7      	b.n	8003456 <memcpy+0x6>

08003466 <memset>:
 8003466:	4603      	mov	r3, r0
 8003468:	4402      	add	r2, r0
 800346a:	4293      	cmp	r3, r2
 800346c:	d100      	bne.n	8003470 <memset+0xa>
 800346e:	4770      	bx	lr
 8003470:	f803 1b01 	strb.w	r1, [r3], #1
 8003474:	e7f9      	b.n	800346a <memset+0x4>
	...

08003478 <siprintf>:
 8003478:	b40e      	push	{r1, r2, r3}
 800347a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800347e:	b500      	push	{lr}
 8003480:	b09c      	sub	sp, #112	; 0x70
 8003482:	ab1d      	add	r3, sp, #116	; 0x74
 8003484:	9002      	str	r0, [sp, #8]
 8003486:	9006      	str	r0, [sp, #24]
 8003488:	9107      	str	r1, [sp, #28]
 800348a:	9104      	str	r1, [sp, #16]
 800348c:	4808      	ldr	r0, [pc, #32]	; (80034b0 <siprintf+0x38>)
 800348e:	4909      	ldr	r1, [pc, #36]	; (80034b4 <siprintf+0x3c>)
 8003490:	f853 2b04 	ldr.w	r2, [r3], #4
 8003494:	9105      	str	r1, [sp, #20]
 8003496:	6800      	ldr	r0, [r0, #0]
 8003498:	a902      	add	r1, sp, #8
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	f000 f866 	bl	800356c <_svfiprintf_r>
 80034a0:	2200      	movs	r2, #0
 80034a2:	9b02      	ldr	r3, [sp, #8]
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	b01c      	add	sp, #112	; 0x70
 80034a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034ac:	b003      	add	sp, #12
 80034ae:	4770      	bx	lr
 80034b0:	2000001c 	.word	0x2000001c
 80034b4:	ffff0208 	.word	0xffff0208

080034b8 <__ssputs_r>:
 80034b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	688e      	ldr	r6, [r1, #8]
 80034be:	4682      	mov	sl, r0
 80034c0:	429e      	cmp	r6, r3
 80034c2:	460c      	mov	r4, r1
 80034c4:	4690      	mov	r8, r2
 80034c6:	4699      	mov	r9, r3
 80034c8:	d837      	bhi.n	800353a <__ssputs_r+0x82>
 80034ca:	898a      	ldrh	r2, [r1, #12]
 80034cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034d0:	d031      	beq.n	8003536 <__ssputs_r+0x7e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	6825      	ldr	r5, [r4, #0]
 80034d6:	6909      	ldr	r1, [r1, #16]
 80034d8:	1a6f      	subs	r7, r5, r1
 80034da:	6965      	ldr	r5, [r4, #20]
 80034dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80034e4:	f109 0301 	add.w	r3, r9, #1
 80034e8:	443b      	add	r3, r7
 80034ea:	429d      	cmp	r5, r3
 80034ec:	bf38      	it	cc
 80034ee:	461d      	movcc	r5, r3
 80034f0:	0553      	lsls	r3, r2, #21
 80034f2:	d530      	bpl.n	8003556 <__ssputs_r+0x9e>
 80034f4:	4629      	mov	r1, r5
 80034f6:	f000 fb2d 	bl	8003b54 <_malloc_r>
 80034fa:	4606      	mov	r6, r0
 80034fc:	b950      	cbnz	r0, 8003514 <__ssputs_r+0x5c>
 80034fe:	230c      	movs	r3, #12
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f8ca 3000 	str.w	r3, [sl]
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	463a      	mov	r2, r7
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	f7ff ff9a 	bl	8003450 <memcpy>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	6126      	str	r6, [r4, #16]
 800352a:	443e      	add	r6, r7
 800352c:	6026      	str	r6, [r4, #0]
 800352e:	464e      	mov	r6, r9
 8003530:	6165      	str	r5, [r4, #20]
 8003532:	1bed      	subs	r5, r5, r7
 8003534:	60a5      	str	r5, [r4, #8]
 8003536:	454e      	cmp	r6, r9
 8003538:	d900      	bls.n	800353c <__ssputs_r+0x84>
 800353a:	464e      	mov	r6, r9
 800353c:	4632      	mov	r2, r6
 800353e:	4641      	mov	r1, r8
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	f000 faa1 	bl	8003a88 <memmove>
 8003546:	68a3      	ldr	r3, [r4, #8]
 8003548:	2000      	movs	r0, #0
 800354a:	1b9b      	subs	r3, r3, r6
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	441e      	add	r6, r3
 8003552:	6026      	str	r6, [r4, #0]
 8003554:	e7dc      	b.n	8003510 <__ssputs_r+0x58>
 8003556:	462a      	mov	r2, r5
 8003558:	f000 fb56 	bl	8003c08 <_realloc_r>
 800355c:	4606      	mov	r6, r0
 800355e:	2800      	cmp	r0, #0
 8003560:	d1e2      	bne.n	8003528 <__ssputs_r+0x70>
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	4650      	mov	r0, sl
 8003566:	f000 faa9 	bl	8003abc <_free_r>
 800356a:	e7c8      	b.n	80034fe <__ssputs_r+0x46>

0800356c <_svfiprintf_r>:
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	461d      	mov	r5, r3
 8003572:	898b      	ldrh	r3, [r1, #12]
 8003574:	b09d      	sub	sp, #116	; 0x74
 8003576:	061f      	lsls	r7, r3, #24
 8003578:	4680      	mov	r8, r0
 800357a:	460c      	mov	r4, r1
 800357c:	4616      	mov	r6, r2
 800357e:	d50f      	bpl.n	80035a0 <_svfiprintf_r+0x34>
 8003580:	690b      	ldr	r3, [r1, #16]
 8003582:	b96b      	cbnz	r3, 80035a0 <_svfiprintf_r+0x34>
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	f000 fae5 	bl	8003b54 <_malloc_r>
 800358a:	6020      	str	r0, [r4, #0]
 800358c:	6120      	str	r0, [r4, #16]
 800358e:	b928      	cbnz	r0, 800359c <_svfiprintf_r+0x30>
 8003590:	230c      	movs	r3, #12
 8003592:	f8c8 3000 	str.w	r3, [r8]
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	e0c8      	b.n	800372e <_svfiprintf_r+0x1c2>
 800359c:	2340      	movs	r3, #64	; 0x40
 800359e:	6163      	str	r3, [r4, #20]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9309      	str	r3, [sp, #36]	; 0x24
 80035a4:	2320      	movs	r3, #32
 80035a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035aa:	2330      	movs	r3, #48	; 0x30
 80035ac:	f04f 0b01 	mov.w	fp, #1
 80035b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035b4:	9503      	str	r5, [sp, #12]
 80035b6:	4637      	mov	r7, r6
 80035b8:	463d      	mov	r5, r7
 80035ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035be:	b10b      	cbz	r3, 80035c4 <_svfiprintf_r+0x58>
 80035c0:	2b25      	cmp	r3, #37	; 0x25
 80035c2:	d13e      	bne.n	8003642 <_svfiprintf_r+0xd6>
 80035c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80035c8:	d00b      	beq.n	80035e2 <_svfiprintf_r+0x76>
 80035ca:	4653      	mov	r3, sl
 80035cc:	4632      	mov	r2, r6
 80035ce:	4621      	mov	r1, r4
 80035d0:	4640      	mov	r0, r8
 80035d2:	f7ff ff71 	bl	80034b8 <__ssputs_r>
 80035d6:	3001      	adds	r0, #1
 80035d8:	f000 80a4 	beq.w	8003724 <_svfiprintf_r+0x1b8>
 80035dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035de:	4453      	add	r3, sl
 80035e0:	9309      	str	r3, [sp, #36]	; 0x24
 80035e2:	783b      	ldrb	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 809d 	beq.w	8003724 <_svfiprintf_r+0x1b8>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	9307      	str	r3, [sp, #28]
 80035f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035fc:	931a      	str	r3, [sp, #104]	; 0x68
 80035fe:	462f      	mov	r7, r5
 8003600:	2205      	movs	r2, #5
 8003602:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003606:	4850      	ldr	r0, [pc, #320]	; (8003748 <_svfiprintf_r+0x1dc>)
 8003608:	f000 fa30 	bl	8003a6c <memchr>
 800360c:	9b04      	ldr	r3, [sp, #16]
 800360e:	b9d0      	cbnz	r0, 8003646 <_svfiprintf_r+0xda>
 8003610:	06d9      	lsls	r1, r3, #27
 8003612:	bf44      	itt	mi
 8003614:	2220      	movmi	r2, #32
 8003616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800361a:	071a      	lsls	r2, r3, #28
 800361c:	bf44      	itt	mi
 800361e:	222b      	movmi	r2, #43	; 0x2b
 8003620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003624:	782a      	ldrb	r2, [r5, #0]
 8003626:	2a2a      	cmp	r2, #42	; 0x2a
 8003628:	d015      	beq.n	8003656 <_svfiprintf_r+0xea>
 800362a:	462f      	mov	r7, r5
 800362c:	2000      	movs	r0, #0
 800362e:	250a      	movs	r5, #10
 8003630:	9a07      	ldr	r2, [sp, #28]
 8003632:	4639      	mov	r1, r7
 8003634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003638:	3b30      	subs	r3, #48	; 0x30
 800363a:	2b09      	cmp	r3, #9
 800363c:	d94d      	bls.n	80036da <_svfiprintf_r+0x16e>
 800363e:	b1b8      	cbz	r0, 8003670 <_svfiprintf_r+0x104>
 8003640:	e00f      	b.n	8003662 <_svfiprintf_r+0xf6>
 8003642:	462f      	mov	r7, r5
 8003644:	e7b8      	b.n	80035b8 <_svfiprintf_r+0x4c>
 8003646:	4a40      	ldr	r2, [pc, #256]	; (8003748 <_svfiprintf_r+0x1dc>)
 8003648:	463d      	mov	r5, r7
 800364a:	1a80      	subs	r0, r0, r2
 800364c:	fa0b f000 	lsl.w	r0, fp, r0
 8003650:	4318      	orrs	r0, r3
 8003652:	9004      	str	r0, [sp, #16]
 8003654:	e7d3      	b.n	80035fe <_svfiprintf_r+0x92>
 8003656:	9a03      	ldr	r2, [sp, #12]
 8003658:	1d11      	adds	r1, r2, #4
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	9103      	str	r1, [sp, #12]
 800365e:	2a00      	cmp	r2, #0
 8003660:	db01      	blt.n	8003666 <_svfiprintf_r+0xfa>
 8003662:	9207      	str	r2, [sp, #28]
 8003664:	e004      	b.n	8003670 <_svfiprintf_r+0x104>
 8003666:	4252      	negs	r2, r2
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	9207      	str	r2, [sp, #28]
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	783b      	ldrb	r3, [r7, #0]
 8003672:	2b2e      	cmp	r3, #46	; 0x2e
 8003674:	d10c      	bne.n	8003690 <_svfiprintf_r+0x124>
 8003676:	787b      	ldrb	r3, [r7, #1]
 8003678:	2b2a      	cmp	r3, #42	; 0x2a
 800367a:	d133      	bne.n	80036e4 <_svfiprintf_r+0x178>
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	3702      	adds	r7, #2
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9203      	str	r2, [sp, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfb8      	it	lt
 800368a:	f04f 33ff 	movlt.w	r3, #4294967295
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	4d2e      	ldr	r5, [pc, #184]	; (800374c <_svfiprintf_r+0x1e0>)
 8003692:	2203      	movs	r2, #3
 8003694:	7839      	ldrb	r1, [r7, #0]
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f9e8 	bl	8003a6c <memchr>
 800369c:	b138      	cbz	r0, 80036ae <_svfiprintf_r+0x142>
 800369e:	2340      	movs	r3, #64	; 0x40
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	fa03 f000 	lsl.w	r0, r3, r0
 80036a6:	9b04      	ldr	r3, [sp, #16]
 80036a8:	3701      	adds	r7, #1
 80036aa:	4303      	orrs	r3, r0
 80036ac:	9304      	str	r3, [sp, #16]
 80036ae:	7839      	ldrb	r1, [r7, #0]
 80036b0:	2206      	movs	r2, #6
 80036b2:	4827      	ldr	r0, [pc, #156]	; (8003750 <_svfiprintf_r+0x1e4>)
 80036b4:	1c7e      	adds	r6, r7, #1
 80036b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036ba:	f000 f9d7 	bl	8003a6c <memchr>
 80036be:	2800      	cmp	r0, #0
 80036c0:	d038      	beq.n	8003734 <_svfiprintf_r+0x1c8>
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <_svfiprintf_r+0x1e8>)
 80036c4:	bb13      	cbnz	r3, 800370c <_svfiprintf_r+0x1a0>
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	3307      	adds	r3, #7
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	3308      	adds	r3, #8
 80036d0:	9303      	str	r3, [sp, #12]
 80036d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d4:	444b      	add	r3, r9
 80036d6:	9309      	str	r3, [sp, #36]	; 0x24
 80036d8:	e76d      	b.n	80035b6 <_svfiprintf_r+0x4a>
 80036da:	fb05 3202 	mla	r2, r5, r2, r3
 80036de:	2001      	movs	r0, #1
 80036e0:	460f      	mov	r7, r1
 80036e2:	e7a6      	b.n	8003632 <_svfiprintf_r+0xc6>
 80036e4:	2300      	movs	r3, #0
 80036e6:	250a      	movs	r5, #10
 80036e8:	4619      	mov	r1, r3
 80036ea:	3701      	adds	r7, #1
 80036ec:	9305      	str	r3, [sp, #20]
 80036ee:	4638      	mov	r0, r7
 80036f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f4:	3a30      	subs	r2, #48	; 0x30
 80036f6:	2a09      	cmp	r2, #9
 80036f8:	d903      	bls.n	8003702 <_svfiprintf_r+0x196>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c8      	beq.n	8003690 <_svfiprintf_r+0x124>
 80036fe:	9105      	str	r1, [sp, #20]
 8003700:	e7c6      	b.n	8003690 <_svfiprintf_r+0x124>
 8003702:	fb05 2101 	mla	r1, r5, r1, r2
 8003706:	2301      	movs	r3, #1
 8003708:	4607      	mov	r7, r0
 800370a:	e7f0      	b.n	80036ee <_svfiprintf_r+0x182>
 800370c:	ab03      	add	r3, sp, #12
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4622      	mov	r2, r4
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <_svfiprintf_r+0x1ec>)
 8003714:	a904      	add	r1, sp, #16
 8003716:	4640      	mov	r0, r8
 8003718:	f3af 8000 	nop.w
 800371c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003720:	4681      	mov	r9, r0
 8003722:	d1d6      	bne.n	80036d2 <_svfiprintf_r+0x166>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	065b      	lsls	r3, r3, #25
 8003728:	f53f af35 	bmi.w	8003596 <_svfiprintf_r+0x2a>
 800372c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372e:	b01d      	add	sp, #116	; 0x74
 8003730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4622      	mov	r2, r4
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <_svfiprintf_r+0x1ec>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4640      	mov	r0, r8
 8003740:	f000 f882 	bl	8003848 <_printf_i>
 8003744:	e7ea      	b.n	800371c <_svfiprintf_r+0x1b0>
 8003746:	bf00      	nop
 8003748:	08005828 	.word	0x08005828
 800374c:	0800582e 	.word	0x0800582e
 8003750:	08005832 	.word	0x08005832
 8003754:	00000000 	.word	0x00000000
 8003758:	080034b9 	.word	0x080034b9

0800375c <_printf_common>:
 800375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	4691      	mov	r9, r2
 8003762:	461f      	mov	r7, r3
 8003764:	688a      	ldr	r2, [r1, #8]
 8003766:	690b      	ldr	r3, [r1, #16]
 8003768:	4606      	mov	r6, r0
 800376a:	4293      	cmp	r3, r2
 800376c:	bfb8      	it	lt
 800376e:	4613      	movlt	r3, r2
 8003770:	f8c9 3000 	str.w	r3, [r9]
 8003774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003778:	460c      	mov	r4, r1
 800377a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800377e:	b112      	cbz	r2, 8003786 <_printf_common+0x2a>
 8003780:	3301      	adds	r3, #1
 8003782:	f8c9 3000 	str.w	r3, [r9]
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	0699      	lsls	r1, r3, #26
 800378a:	bf42      	ittt	mi
 800378c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003790:	3302      	addmi	r3, #2
 8003792:	f8c9 3000 	strmi.w	r3, [r9]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	f015 0506 	ands.w	r5, r5, #6
 800379c:	d107      	bne.n	80037ae <_printf_common+0x52>
 800379e:	f104 0a19 	add.w	sl, r4, #25
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	f8d9 2000 	ldr.w	r2, [r9]
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	42ab      	cmp	r3, r5
 80037ac:	dc29      	bgt.n	8003802 <_printf_common+0xa6>
 80037ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	3300      	adds	r3, #0
 80037b6:	bf18      	it	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	0692      	lsls	r2, r2, #26
 80037bc:	d42e      	bmi.n	800381c <_printf_common+0xc0>
 80037be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037c2:	4639      	mov	r1, r7
 80037c4:	4630      	mov	r0, r6
 80037c6:	47c0      	blx	r8
 80037c8:	3001      	adds	r0, #1
 80037ca:	d021      	beq.n	8003810 <_printf_common+0xb4>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	68e5      	ldr	r5, [r4, #12]
 80037d0:	f003 0306 	and.w	r3, r3, #6
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	bf18      	it	ne
 80037d8:	2500      	movne	r5, #0
 80037da:	f8d9 2000 	ldr.w	r2, [r9]
 80037de:	f04f 0900 	mov.w	r9, #0
 80037e2:	bf08      	it	eq
 80037e4:	1aad      	subeq	r5, r5, r2
 80037e6:	68a3      	ldr	r3, [r4, #8]
 80037e8:	6922      	ldr	r2, [r4, #16]
 80037ea:	bf08      	it	eq
 80037ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bfc4      	itt	gt
 80037f4:	1a9b      	subgt	r3, r3, r2
 80037f6:	18ed      	addgt	r5, r5, r3
 80037f8:	341a      	adds	r4, #26
 80037fa:	454d      	cmp	r5, r9
 80037fc:	d11a      	bne.n	8003834 <_printf_common+0xd8>
 80037fe:	2000      	movs	r0, #0
 8003800:	e008      	b.n	8003814 <_printf_common+0xb8>
 8003802:	2301      	movs	r3, #1
 8003804:	4652      	mov	r2, sl
 8003806:	4639      	mov	r1, r7
 8003808:	4630      	mov	r0, r6
 800380a:	47c0      	blx	r8
 800380c:	3001      	adds	r0, #1
 800380e:	d103      	bne.n	8003818 <_printf_common+0xbc>
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003818:	3501      	adds	r5, #1
 800381a:	e7c2      	b.n	80037a2 <_printf_common+0x46>
 800381c:	2030      	movs	r0, #48	; 0x30
 800381e:	18e1      	adds	r1, r4, r3
 8003820:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800382a:	4422      	add	r2, r4
 800382c:	3302      	adds	r3, #2
 800382e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003832:	e7c4      	b.n	80037be <_printf_common+0x62>
 8003834:	2301      	movs	r3, #1
 8003836:	4622      	mov	r2, r4
 8003838:	4639      	mov	r1, r7
 800383a:	4630      	mov	r0, r6
 800383c:	47c0      	blx	r8
 800383e:	3001      	adds	r0, #1
 8003840:	d0e6      	beq.n	8003810 <_printf_common+0xb4>
 8003842:	f109 0901 	add.w	r9, r9, #1
 8003846:	e7d8      	b.n	80037fa <_printf_common+0x9e>

08003848 <_printf_i>:
 8003848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800384c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003850:	460c      	mov	r4, r1
 8003852:	7e09      	ldrb	r1, [r1, #24]
 8003854:	b085      	sub	sp, #20
 8003856:	296e      	cmp	r1, #110	; 0x6e
 8003858:	4617      	mov	r7, r2
 800385a:	4606      	mov	r6, r0
 800385c:	4698      	mov	r8, r3
 800385e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003860:	f000 80b3 	beq.w	80039ca <_printf_i+0x182>
 8003864:	d822      	bhi.n	80038ac <_printf_i+0x64>
 8003866:	2963      	cmp	r1, #99	; 0x63
 8003868:	d036      	beq.n	80038d8 <_printf_i+0x90>
 800386a:	d80a      	bhi.n	8003882 <_printf_i+0x3a>
 800386c:	2900      	cmp	r1, #0
 800386e:	f000 80b9 	beq.w	80039e4 <_printf_i+0x19c>
 8003872:	2958      	cmp	r1, #88	; 0x58
 8003874:	f000 8083 	beq.w	800397e <_printf_i+0x136>
 8003878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003880:	e032      	b.n	80038e8 <_printf_i+0xa0>
 8003882:	2964      	cmp	r1, #100	; 0x64
 8003884:	d001      	beq.n	800388a <_printf_i+0x42>
 8003886:	2969      	cmp	r1, #105	; 0x69
 8003888:	d1f6      	bne.n	8003878 <_printf_i+0x30>
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	6813      	ldr	r3, [r2, #0]
 800388e:	0605      	lsls	r5, r0, #24
 8003890:	f103 0104 	add.w	r1, r3, #4
 8003894:	d52a      	bpl.n	80038ec <_printf_i+0xa4>
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da03      	bge.n	80038a6 <_printf_i+0x5e>
 800389e:	222d      	movs	r2, #45	; 0x2d
 80038a0:	425b      	negs	r3, r3
 80038a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038a6:	486f      	ldr	r0, [pc, #444]	; (8003a64 <_printf_i+0x21c>)
 80038a8:	220a      	movs	r2, #10
 80038aa:	e039      	b.n	8003920 <_printf_i+0xd8>
 80038ac:	2973      	cmp	r1, #115	; 0x73
 80038ae:	f000 809d 	beq.w	80039ec <_printf_i+0x1a4>
 80038b2:	d808      	bhi.n	80038c6 <_printf_i+0x7e>
 80038b4:	296f      	cmp	r1, #111	; 0x6f
 80038b6:	d020      	beq.n	80038fa <_printf_i+0xb2>
 80038b8:	2970      	cmp	r1, #112	; 0x70
 80038ba:	d1dd      	bne.n	8003878 <_printf_i+0x30>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	e003      	b.n	80038ce <_printf_i+0x86>
 80038c6:	2975      	cmp	r1, #117	; 0x75
 80038c8:	d017      	beq.n	80038fa <_printf_i+0xb2>
 80038ca:	2978      	cmp	r1, #120	; 0x78
 80038cc:	d1d4      	bne.n	8003878 <_printf_i+0x30>
 80038ce:	2378      	movs	r3, #120	; 0x78
 80038d0:	4865      	ldr	r0, [pc, #404]	; (8003a68 <_printf_i+0x220>)
 80038d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d6:	e055      	b.n	8003984 <_printf_i+0x13c>
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038de:	1d19      	adds	r1, r3, #4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6011      	str	r1, [r2, #0]
 80038e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038e8:	2301      	movs	r3, #1
 80038ea:	e08c      	b.n	8003a06 <_printf_i+0x1be>
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038f2:	6011      	str	r1, [r2, #0]
 80038f4:	bf18      	it	ne
 80038f6:	b21b      	sxthne	r3, r3
 80038f8:	e7cf      	b.n	800389a <_printf_i+0x52>
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	6825      	ldr	r5, [r4, #0]
 80038fe:	1d18      	adds	r0, r3, #4
 8003900:	6010      	str	r0, [r2, #0]
 8003902:	0628      	lsls	r0, r5, #24
 8003904:	d501      	bpl.n	800390a <_printf_i+0xc2>
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e002      	b.n	8003910 <_printf_i+0xc8>
 800390a:	0668      	lsls	r0, r5, #25
 800390c:	d5fb      	bpl.n	8003906 <_printf_i+0xbe>
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	296f      	cmp	r1, #111	; 0x6f
 8003912:	bf14      	ite	ne
 8003914:	220a      	movne	r2, #10
 8003916:	2208      	moveq	r2, #8
 8003918:	4852      	ldr	r0, [pc, #328]	; (8003a64 <_printf_i+0x21c>)
 800391a:	2100      	movs	r1, #0
 800391c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003920:	6865      	ldr	r5, [r4, #4]
 8003922:	2d00      	cmp	r5, #0
 8003924:	60a5      	str	r5, [r4, #8]
 8003926:	f2c0 8095 	blt.w	8003a54 <_printf_i+0x20c>
 800392a:	6821      	ldr	r1, [r4, #0]
 800392c:	f021 0104 	bic.w	r1, r1, #4
 8003930:	6021      	str	r1, [r4, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d13d      	bne.n	80039b2 <_printf_i+0x16a>
 8003936:	2d00      	cmp	r5, #0
 8003938:	f040 808e 	bne.w	8003a58 <_printf_i+0x210>
 800393c:	4665      	mov	r5, ip
 800393e:	2a08      	cmp	r2, #8
 8003940:	d10b      	bne.n	800395a <_printf_i+0x112>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	07db      	lsls	r3, r3, #31
 8003946:	d508      	bpl.n	800395a <_printf_i+0x112>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	bfde      	ittt	le
 8003950:	2330      	movle	r3, #48	; 0x30
 8003952:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003956:	f105 35ff 	addle.w	r5, r5, #4294967295
 800395a:	ebac 0305 	sub.w	r3, ip, r5
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	f8cd 8000 	str.w	r8, [sp]
 8003964:	463b      	mov	r3, r7
 8003966:	aa03      	add	r2, sp, #12
 8003968:	4621      	mov	r1, r4
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff fef6 	bl	800375c <_printf_common>
 8003970:	3001      	adds	r0, #1
 8003972:	d14d      	bne.n	8003a10 <_printf_i+0x1c8>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b005      	add	sp, #20
 800397a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800397e:	4839      	ldr	r0, [pc, #228]	; (8003a64 <_printf_i+0x21c>)
 8003980:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	6821      	ldr	r1, [r4, #0]
 8003988:	1d1d      	adds	r5, r3, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6015      	str	r5, [r2, #0]
 800398e:	060a      	lsls	r2, r1, #24
 8003990:	d50b      	bpl.n	80039aa <_printf_i+0x162>
 8003992:	07ca      	lsls	r2, r1, #31
 8003994:	bf44      	itt	mi
 8003996:	f041 0120 	orrmi.w	r1, r1, #32
 800399a:	6021      	strmi	r1, [r4, #0]
 800399c:	b91b      	cbnz	r3, 80039a6 <_printf_i+0x15e>
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	f022 0220 	bic.w	r2, r2, #32
 80039a4:	6022      	str	r2, [r4, #0]
 80039a6:	2210      	movs	r2, #16
 80039a8:	e7b7      	b.n	800391a <_printf_i+0xd2>
 80039aa:	064d      	lsls	r5, r1, #25
 80039ac:	bf48      	it	mi
 80039ae:	b29b      	uxthmi	r3, r3
 80039b0:	e7ef      	b.n	8003992 <_printf_i+0x14a>
 80039b2:	4665      	mov	r5, ip
 80039b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039b8:	fb02 3311 	mls	r3, r2, r1, r3
 80039bc:	5cc3      	ldrb	r3, [r0, r3]
 80039be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039c2:	460b      	mov	r3, r1
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d1f5      	bne.n	80039b4 <_printf_i+0x16c>
 80039c8:	e7b9      	b.n	800393e <_printf_i+0xf6>
 80039ca:	6813      	ldr	r3, [r2, #0]
 80039cc:	6825      	ldr	r5, [r4, #0]
 80039ce:	1d18      	adds	r0, r3, #4
 80039d0:	6961      	ldr	r1, [r4, #20]
 80039d2:	6010      	str	r0, [r2, #0]
 80039d4:	0628      	lsls	r0, r5, #24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	d501      	bpl.n	80039de <_printf_i+0x196>
 80039da:	6019      	str	r1, [r3, #0]
 80039dc:	e002      	b.n	80039e4 <_printf_i+0x19c>
 80039de:	066a      	lsls	r2, r5, #25
 80039e0:	d5fb      	bpl.n	80039da <_printf_i+0x192>
 80039e2:	8019      	strh	r1, [r3, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	4665      	mov	r5, ip
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	e7b9      	b.n	8003960 <_printf_i+0x118>
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	1d19      	adds	r1, r3, #4
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	681d      	ldr	r5, [r3, #0]
 80039f4:	6862      	ldr	r2, [r4, #4]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 f837 	bl	8003a6c <memchr>
 80039fe:	b108      	cbz	r0, 8003a04 <_printf_i+0x1bc>
 8003a00:	1b40      	subs	r0, r0, r5
 8003a02:	6060      	str	r0, [r4, #4]
 8003a04:	6863      	ldr	r3, [r4, #4]
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0e:	e7a7      	b.n	8003960 <_printf_i+0x118>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	462a      	mov	r2, r5
 8003a14:	4639      	mov	r1, r7
 8003a16:	4630      	mov	r0, r6
 8003a18:	47c0      	blx	r8
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d0aa      	beq.n	8003974 <_printf_i+0x12c>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	079b      	lsls	r3, r3, #30
 8003a22:	d413      	bmi.n	8003a4c <_printf_i+0x204>
 8003a24:	68e0      	ldr	r0, [r4, #12]
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	4298      	cmp	r0, r3
 8003a2a:	bfb8      	it	lt
 8003a2c:	4618      	movlt	r0, r3
 8003a2e:	e7a3      	b.n	8003978 <_printf_i+0x130>
 8003a30:	2301      	movs	r3, #1
 8003a32:	464a      	mov	r2, r9
 8003a34:	4639      	mov	r1, r7
 8003a36:	4630      	mov	r0, r6
 8003a38:	47c0      	blx	r8
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d09a      	beq.n	8003974 <_printf_i+0x12c>
 8003a3e:	3501      	adds	r5, #1
 8003a40:	68e3      	ldr	r3, [r4, #12]
 8003a42:	9a03      	ldr	r2, [sp, #12]
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	42ab      	cmp	r3, r5
 8003a48:	dcf2      	bgt.n	8003a30 <_printf_i+0x1e8>
 8003a4a:	e7eb      	b.n	8003a24 <_printf_i+0x1dc>
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	f104 0919 	add.w	r9, r4, #25
 8003a52:	e7f5      	b.n	8003a40 <_printf_i+0x1f8>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ac      	bne.n	80039b2 <_printf_i+0x16a>
 8003a58:	7803      	ldrb	r3, [r0, #0]
 8003a5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a62:	e76c      	b.n	800393e <_printf_i+0xf6>
 8003a64:	08005839 	.word	0x08005839
 8003a68:	0800584a 	.word	0x0800584a

08003a6c <memchr>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	b2c9      	uxtb	r1, r1
 8003a70:	4402      	add	r2, r0
 8003a72:	4290      	cmp	r0, r2
 8003a74:	4603      	mov	r3, r0
 8003a76:	d101      	bne.n	8003a7c <memchr+0x10>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e003      	b.n	8003a84 <memchr+0x18>
 8003a7c:	781c      	ldrb	r4, [r3, #0]
 8003a7e:	3001      	adds	r0, #1
 8003a80:	428c      	cmp	r4, r1
 8003a82:	d1f6      	bne.n	8003a72 <memchr+0x6>
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd10      	pop	{r4, pc}

08003a88 <memmove>:
 8003a88:	4288      	cmp	r0, r1
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	eb01 0302 	add.w	r3, r1, r2
 8003a90:	d807      	bhi.n	8003aa2 <memmove+0x1a>
 8003a92:	1e42      	subs	r2, r0, #1
 8003a94:	4299      	cmp	r1, r3
 8003a96:	d00a      	beq.n	8003aae <memmove+0x26>
 8003a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003aa0:	e7f8      	b.n	8003a94 <memmove+0xc>
 8003aa2:	4283      	cmp	r3, r0
 8003aa4:	d9f5      	bls.n	8003a92 <memmove+0xa>
 8003aa6:	1881      	adds	r1, r0, r2
 8003aa8:	1ad2      	subs	r2, r2, r3
 8003aaa:	42d3      	cmn	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <memmove+0x28>
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ab4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ab8:	e7f7      	b.n	8003aaa <memmove+0x22>
	...

08003abc <_free_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4605      	mov	r5, r0
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	d043      	beq.n	8003b4c <_free_r+0x90>
 8003ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac8:	1f0c      	subs	r4, r1, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bfb8      	it	lt
 8003ace:	18e4      	addlt	r4, r4, r3
 8003ad0:	f000 f8d0 	bl	8003c74 <__malloc_lock>
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <_free_r+0x94>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	b933      	cbnz	r3, 8003aea <_free_r+0x2e>
 8003adc:	6063      	str	r3, [r4, #4]
 8003ade:	6014      	str	r4, [r2, #0]
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae6:	f000 b8c6 	b.w	8003c76 <__malloc_unlock>
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	d90b      	bls.n	8003b06 <_free_r+0x4a>
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	1862      	adds	r2, r4, r1
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bf01      	itttt	eq
 8003af6:	681a      	ldreq	r2, [r3, #0]
 8003af8:	685b      	ldreq	r3, [r3, #4]
 8003afa:	1852      	addeq	r2, r2, r1
 8003afc:	6022      	streq	r2, [r4, #0]
 8003afe:	6063      	str	r3, [r4, #4]
 8003b00:	6004      	str	r4, [r0, #0]
 8003b02:	e7ed      	b.n	8003ae0 <_free_r+0x24>
 8003b04:	4613      	mov	r3, r2
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	b10a      	cbz	r2, 8003b0e <_free_r+0x52>
 8003b0a:	42a2      	cmp	r2, r4
 8003b0c:	d9fa      	bls.n	8003b04 <_free_r+0x48>
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	1858      	adds	r0, r3, r1
 8003b12:	42a0      	cmp	r0, r4
 8003b14:	d10b      	bne.n	8003b2e <_free_r+0x72>
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	4401      	add	r1, r0
 8003b1a:	1858      	adds	r0, r3, r1
 8003b1c:	4282      	cmp	r2, r0
 8003b1e:	6019      	str	r1, [r3, #0]
 8003b20:	d1de      	bne.n	8003ae0 <_free_r+0x24>
 8003b22:	6810      	ldr	r0, [r2, #0]
 8003b24:	6852      	ldr	r2, [r2, #4]
 8003b26:	4401      	add	r1, r0
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	e7d8      	b.n	8003ae0 <_free_r+0x24>
 8003b2e:	d902      	bls.n	8003b36 <_free_r+0x7a>
 8003b30:	230c      	movs	r3, #12
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	e7d4      	b.n	8003ae0 <_free_r+0x24>
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1821      	adds	r1, r4, r0
 8003b3a:	428a      	cmp	r2, r1
 8003b3c:	bf01      	itttt	eq
 8003b3e:	6811      	ldreq	r1, [r2, #0]
 8003b40:	6852      	ldreq	r2, [r2, #4]
 8003b42:	1809      	addeq	r1, r1, r0
 8003b44:	6021      	streq	r1, [r4, #0]
 8003b46:	6062      	str	r2, [r4, #4]
 8003b48:	605c      	str	r4, [r3, #4]
 8003b4a:	e7c9      	b.n	8003ae0 <_free_r+0x24>
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	bf00      	nop
 8003b50:	200004b8 	.word	0x200004b8

08003b54 <_malloc_r>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	1ccd      	adds	r5, r1, #3
 8003b58:	f025 0503 	bic.w	r5, r5, #3
 8003b5c:	3508      	adds	r5, #8
 8003b5e:	2d0c      	cmp	r5, #12
 8003b60:	bf38      	it	cc
 8003b62:	250c      	movcc	r5, #12
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	4606      	mov	r6, r0
 8003b68:	db01      	blt.n	8003b6e <_malloc_r+0x1a>
 8003b6a:	42a9      	cmp	r1, r5
 8003b6c:	d903      	bls.n	8003b76 <_malloc_r+0x22>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	6033      	str	r3, [r6, #0]
 8003b72:	2000      	movs	r0, #0
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	f000 f87d 	bl	8003c74 <__malloc_lock>
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <_malloc_r+0xac>)
 8003b7c:	6814      	ldr	r4, [r2, #0]
 8003b7e:	4621      	mov	r1, r4
 8003b80:	b991      	cbnz	r1, 8003ba8 <_malloc_r+0x54>
 8003b82:	4c20      	ldr	r4, [pc, #128]	; (8003c04 <_malloc_r+0xb0>)
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	b91b      	cbnz	r3, 8003b90 <_malloc_r+0x3c>
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f000 f863 	bl	8003c54 <_sbrk_r>
 8003b8e:	6020      	str	r0, [r4, #0]
 8003b90:	4629      	mov	r1, r5
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f85e 	bl	8003c54 <_sbrk_r>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d124      	bne.n	8003be6 <_malloc_r+0x92>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	6033      	str	r3, [r6, #0]
 8003ba2:	f000 f868 	bl	8003c76 <__malloc_unlock>
 8003ba6:	e7e4      	b.n	8003b72 <_malloc_r+0x1e>
 8003ba8:	680b      	ldr	r3, [r1, #0]
 8003baa:	1b5b      	subs	r3, r3, r5
 8003bac:	d418      	bmi.n	8003be0 <_malloc_r+0x8c>
 8003bae:	2b0b      	cmp	r3, #11
 8003bb0:	d90f      	bls.n	8003bd2 <_malloc_r+0x7e>
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	18cc      	adds	r4, r1, r3
 8003bb6:	50cd      	str	r5, [r1, r3]
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f85c 	bl	8003c76 <__malloc_unlock>
 8003bbe:	f104 000b 	add.w	r0, r4, #11
 8003bc2:	1d23      	adds	r3, r4, #4
 8003bc4:	f020 0007 	bic.w	r0, r0, #7
 8003bc8:	1ac3      	subs	r3, r0, r3
 8003bca:	d0d3      	beq.n	8003b74 <_malloc_r+0x20>
 8003bcc:	425a      	negs	r2, r3
 8003bce:	50e2      	str	r2, [r4, r3]
 8003bd0:	e7d0      	b.n	8003b74 <_malloc_r+0x20>
 8003bd2:	684b      	ldr	r3, [r1, #4]
 8003bd4:	428c      	cmp	r4, r1
 8003bd6:	bf16      	itet	ne
 8003bd8:	6063      	strne	r3, [r4, #4]
 8003bda:	6013      	streq	r3, [r2, #0]
 8003bdc:	460c      	movne	r4, r1
 8003bde:	e7eb      	b.n	8003bb8 <_malloc_r+0x64>
 8003be0:	460c      	mov	r4, r1
 8003be2:	6849      	ldr	r1, [r1, #4]
 8003be4:	e7cc      	b.n	8003b80 <_malloc_r+0x2c>
 8003be6:	1cc4      	adds	r4, r0, #3
 8003be8:	f024 0403 	bic.w	r4, r4, #3
 8003bec:	42a0      	cmp	r0, r4
 8003bee:	d005      	beq.n	8003bfc <_malloc_r+0xa8>
 8003bf0:	1a21      	subs	r1, r4, r0
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f000 f82e 	bl	8003c54 <_sbrk_r>
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d0cf      	beq.n	8003b9c <_malloc_r+0x48>
 8003bfc:	6025      	str	r5, [r4, #0]
 8003bfe:	e7db      	b.n	8003bb8 <_malloc_r+0x64>
 8003c00:	200004b8 	.word	0x200004b8
 8003c04:	200004bc 	.word	0x200004bc

08003c08 <_realloc_r>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	460e      	mov	r6, r1
 8003c10:	b921      	cbnz	r1, 8003c1c <_realloc_r+0x14>
 8003c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c16:	4611      	mov	r1, r2
 8003c18:	f7ff bf9c 	b.w	8003b54 <_malloc_r>
 8003c1c:	b922      	cbnz	r2, 8003c28 <_realloc_r+0x20>
 8003c1e:	f7ff ff4d 	bl	8003abc <_free_r>
 8003c22:	4625      	mov	r5, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c28:	f000 f826 	bl	8003c78 <_malloc_usable_size_r>
 8003c2c:	42a0      	cmp	r0, r4
 8003c2e:	d20f      	bcs.n	8003c50 <_realloc_r+0x48>
 8003c30:	4621      	mov	r1, r4
 8003c32:	4638      	mov	r0, r7
 8003c34:	f7ff ff8e 	bl	8003b54 <_malloc_r>
 8003c38:	4605      	mov	r5, r0
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d0f2      	beq.n	8003c24 <_realloc_r+0x1c>
 8003c3e:	4631      	mov	r1, r6
 8003c40:	4622      	mov	r2, r4
 8003c42:	f7ff fc05 	bl	8003450 <memcpy>
 8003c46:	4631      	mov	r1, r6
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7ff ff37 	bl	8003abc <_free_r>
 8003c4e:	e7e9      	b.n	8003c24 <_realloc_r+0x1c>
 8003c50:	4635      	mov	r5, r6
 8003c52:	e7e7      	b.n	8003c24 <_realloc_r+0x1c>

08003c54 <_sbrk_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	2300      	movs	r3, #0
 8003c58:	4c05      	ldr	r4, [pc, #20]	; (8003c70 <_sbrk_r+0x1c>)
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	f7ff fb46 	bl	80032f0 <_sbrk>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_sbrk_r+0x1a>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_sbrk_r+0x1a>
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	200005b0 	.word	0x200005b0

08003c74 <__malloc_lock>:
 8003c74:	4770      	bx	lr

08003c76 <__malloc_unlock>:
 8003c76:	4770      	bx	lr

08003c78 <_malloc_usable_size_r>:
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f18      	subs	r0, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfbc      	itt	lt
 8003c82:	580b      	ldrlt	r3, [r1, r0]
 8003c84:	18c0      	addlt	r0, r0, r3
 8003c86:	4770      	bx	lr

08003c88 <floor>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003c90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003c94:	2e13      	cmp	r6, #19
 8003c96:	4607      	mov	r7, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	dc35      	bgt.n	8003d0c <floor+0x84>
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	da16      	bge.n	8003cd2 <floor+0x4a>
 8003ca4:	a336      	add	r3, pc, #216	; (adr r3, 8003d80 <floor+0xf8>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f7fc fa57 	bl	800015c <__adddf3>
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f7fc fe99 	bl	80009e8 <__aeabi_dcmpgt>
 8003cb6:	b148      	cbz	r0, 8003ccc <floor+0x44>
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	da5b      	bge.n	8003d74 <floor+0xec>
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <floor+0x100>)
 8003cc4:	433b      	orrs	r3, r7
 8003cc6:	42ab      	cmp	r3, r5
 8003cc8:	bf18      	it	ne
 8003cca:	4614      	movne	r4, r2
 8003ccc:	4623      	mov	r3, r4
 8003cce:	462f      	mov	r7, r5
 8003cd0:	e026      	b.n	8003d20 <floor+0x98>
 8003cd2:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <floor+0x104>)
 8003cd4:	fa42 f806 	asr.w	r8, r2, r6
 8003cd8:	ea01 0208 	and.w	r2, r1, r8
 8003cdc:	4302      	orrs	r2, r0
 8003cde:	d01f      	beq.n	8003d20 <floor+0x98>
 8003ce0:	a327      	add	r3, pc, #156	; (adr r3, 8003d80 <floor+0xf8>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fa39 	bl	800015c <__adddf3>
 8003cea:	2200      	movs	r2, #0
 8003cec:	2300      	movs	r3, #0
 8003cee:	f7fc fe7b 	bl	80009e8 <__aeabi_dcmpgt>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0ea      	beq.n	8003ccc <floor+0x44>
 8003cf6:	2c00      	cmp	r4, #0
 8003cf8:	bfbe      	ittt	lt
 8003cfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003cfe:	fa43 f606 	asrlt.w	r6, r3, r6
 8003d02:	19a4      	addlt	r4, r4, r6
 8003d04:	ea24 0408 	bic.w	r4, r4, r8
 8003d08:	2500      	movs	r5, #0
 8003d0a:	e7df      	b.n	8003ccc <floor+0x44>
 8003d0c:	2e33      	cmp	r6, #51	; 0x33
 8003d0e:	dd0b      	ble.n	8003d28 <floor+0xa0>
 8003d10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003d14:	d104      	bne.n	8003d20 <floor+0x98>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f7fc fa20 	bl	800015c <__adddf3>
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4638      	mov	r0, r7
 8003d22:	4619      	mov	r1, r3
 8003d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003d30:	fa22 f808 	lsr.w	r8, r2, r8
 8003d34:	ea18 0f00 	tst.w	r8, r0
 8003d38:	d0f2      	beq.n	8003d20 <floor+0x98>
 8003d3a:	a311      	add	r3, pc, #68	; (adr r3, 8003d80 <floor+0xf8>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fa0c 	bl	800015c <__adddf3>
 8003d44:	2200      	movs	r2, #0
 8003d46:	2300      	movs	r3, #0
 8003d48:	f7fc fe4e 	bl	80009e8 <__aeabi_dcmpgt>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d0bd      	beq.n	8003ccc <floor+0x44>
 8003d50:	2c00      	cmp	r4, #0
 8003d52:	da02      	bge.n	8003d5a <floor+0xd2>
 8003d54:	2e14      	cmp	r6, #20
 8003d56:	d103      	bne.n	8003d60 <floor+0xd8>
 8003d58:	3401      	adds	r4, #1
 8003d5a:	ea25 0508 	bic.w	r5, r5, r8
 8003d5e:	e7b5      	b.n	8003ccc <floor+0x44>
 8003d60:	2301      	movs	r3, #1
 8003d62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003d66:	fa03 f606 	lsl.w	r6, r3, r6
 8003d6a:	4435      	add	r5, r6
 8003d6c:	42bd      	cmp	r5, r7
 8003d6e:	bf38      	it	cc
 8003d70:	18e4      	addcc	r4, r4, r3
 8003d72:	e7f2      	b.n	8003d5a <floor+0xd2>
 8003d74:	2500      	movs	r5, #0
 8003d76:	462c      	mov	r4, r5
 8003d78:	e7a8      	b.n	8003ccc <floor+0x44>
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w
 8003d80:	8800759c 	.word	0x8800759c
 8003d84:	7e37e43c 	.word	0x7e37e43c
 8003d88:	bff00000 	.word	0xbff00000
 8003d8c:	000fffff 	.word	0x000fffff

08003d90 <log10>:
 8003d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d94:	b08b      	sub	sp, #44	; 0x2c
 8003d96:	4604      	mov	r4, r0
 8003d98:	460d      	mov	r5, r1
 8003d9a:	f000 f875 	bl	8003e88 <__ieee754_log10>
 8003d9e:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <log10+0xe0>)
 8003da0:	4680      	mov	r8, r0
 8003da2:	f993 6000 	ldrsb.w	r6, [r3]
 8003da6:	4689      	mov	r9, r1
 8003da8:	1c73      	adds	r3, r6, #1
 8003daa:	d05c      	beq.n	8003e66 <log10+0xd6>
 8003dac:	4622      	mov	r2, r4
 8003dae:	462b      	mov	r3, r5
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	f7fc fe22 	bl	80009fc <__aeabi_dcmpun>
 8003db8:	4607      	mov	r7, r0
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d153      	bne.n	8003e66 <log10+0xd6>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7fc fdfb 	bl	80009c0 <__aeabi_dcmple>
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d04b      	beq.n	8003e66 <log10+0xd6>
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <log10+0xe4>)
 8003dd0:	9708      	str	r7, [sp, #32]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003dd8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003ddc:	b9a6      	cbnz	r6, 8003e08 <log10+0x78>
 8003dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003de2:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <log10+0xe8>)
 8003de4:	4620      	mov	r0, r4
 8003de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003dea:	4629      	mov	r1, r5
 8003dec:	2200      	movs	r2, #0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fc fdd2 	bl	8000998 <__aeabi_dcmpeq>
 8003df4:	bb40      	cbnz	r0, 8003e48 <log10+0xb8>
 8003df6:	2301      	movs	r3, #1
 8003df8:	2e02      	cmp	r6, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	d119      	bne.n	8003e32 <log10+0xa2>
 8003dfe:	f7ff fafd 	bl	80033fc <__errno>
 8003e02:	2321      	movs	r3, #33	; 0x21
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	e019      	b.n	8003e3c <log10+0xac>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <log10+0xec>)
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e12:	4629      	mov	r1, r5
 8003e14:	2200      	movs	r2, #0
 8003e16:	2300      	movs	r3, #0
 8003e18:	f7fc fdbe 	bl	8000998 <__aeabi_dcmpeq>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d0ea      	beq.n	8003df6 <log10+0x66>
 8003e20:	2302      	movs	r3, #2
 8003e22:	429e      	cmp	r6, r3
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	d111      	bne.n	8003e4c <log10+0xbc>
 8003e28:	f7ff fae8 	bl	80033fc <__errno>
 8003e2c:	2322      	movs	r3, #34	; 0x22
 8003e2e:	6003      	str	r3, [r0, #0]
 8003e30:	e011      	b.n	8003e56 <log10+0xc6>
 8003e32:	4668      	mov	r0, sp
 8003e34:	f000 f8aa 	bl	8003f8c <matherr>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d0e0      	beq.n	8003dfe <log10+0x6e>
 8003e3c:	4810      	ldr	r0, [pc, #64]	; (8003e80 <log10+0xf0>)
 8003e3e:	f000 f8a7 	bl	8003f90 <nan>
 8003e42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e46:	e006      	b.n	8003e56 <log10+0xc6>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4668      	mov	r0, sp
 8003e4e:	f000 f89d 	bl	8003f8c <matherr>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0e8      	beq.n	8003e28 <log10+0x98>
 8003e56:	9b08      	ldr	r3, [sp, #32]
 8003e58:	b11b      	cbz	r3, 8003e62 <log10+0xd2>
 8003e5a:	f7ff facf 	bl	80033fc <__errno>
 8003e5e:	9b08      	ldr	r3, [sp, #32]
 8003e60:	6003      	str	r3, [r0, #0]
 8003e62:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003e66:	4640      	mov	r0, r8
 8003e68:	4649      	mov	r1, r9
 8003e6a:	b00b      	add	sp, #44	; 0x2c
 8003e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e70:	20000080 	.word	0x20000080
 8003e74:	0800585b 	.word	0x0800585b
 8003e78:	c7efffff 	.word	0xc7efffff
 8003e7c:	fff00000 	.word	0xfff00000
 8003e80:	0800582d 	.word	0x0800582d
 8003e84:	00000000 	.word	0x00000000

08003e88 <__ieee754_log10>:
 8003e88:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e90:	4604      	mov	r4, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	460b      	mov	r3, r1
 8003e96:	da26      	bge.n	8003ee6 <__ieee754_log10+0x5e>
 8003e98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003e9c:	4302      	orrs	r2, r0
 8003e9e:	d107      	bne.n	8003eb0 <__ieee754_log10+0x28>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	4936      	ldr	r1, [pc, #216]	; (8003f80 <__ieee754_log10+0xf8>)
 8003ea8:	f7fc fc38 	bl	800071c <__aeabi_ddiv>
 8003eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	da05      	bge.n	8003ec0 <__ieee754_log10+0x38>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f7fc f94f 	bl	8000158 <__aeabi_dsub>
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e7f3      	b.n	8003ea8 <__ieee754_log10+0x20>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <__ieee754_log10+0xfc>)
 8003ec4:	f7fc fb00 	bl	80004c8 <__aeabi_dmul>
 8003ec8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8003ecc:	4604      	mov	r4, r0
 8003ece:	460d      	mov	r5, r1
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	492d      	ldr	r1, [pc, #180]	; (8003f88 <__ieee754_log10+0x100>)
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	dd08      	ble.n	8003eea <__ieee754_log10+0x62>
 8003ed8:	4622      	mov	r2, r4
 8003eda:	462b      	mov	r3, r5
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f93c 	bl	800015c <__adddf3>
 8003ee4:	e7e2      	b.n	8003eac <__ieee754_log10+0x24>
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	e7f3      	b.n	8003ed2 <__ieee754_log10+0x4a>
 8003eea:	1518      	asrs	r0, r3, #20
 8003eec:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003ef0:	4410      	add	r0, r2
 8003ef2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8003ef6:	4448      	add	r0, r9
 8003ef8:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8003efc:	f7fc fa7a 	bl	80003f4 <__aeabi_i2d>
 8003f00:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8003f04:	3303      	adds	r3, #3
 8003f06:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	4620      	mov	r0, r4
 8003f10:	4629      	mov	r1, r5
 8003f12:	f000 f845 	bl	8003fa0 <__ieee754_log>
 8003f16:	a314      	add	r3, pc, #80	; (adr r3, 8003f68 <__ieee754_log10+0xe0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	4689      	mov	r9, r1
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fad0 	bl	80004c8 <__aeabi_dmul>
 8003f28:	a311      	add	r3, pc, #68	; (adr r3, 8003f70 <__ieee754_log10+0xe8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	4604      	mov	r4, r0
 8003f30:	460d      	mov	r5, r1
 8003f32:	4640      	mov	r0, r8
 8003f34:	4649      	mov	r1, r9
 8003f36:	f7fc fac7 	bl	80004c8 <__aeabi_dmul>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc f90b 	bl	800015c <__adddf3>
 8003f46:	a30c      	add	r3, pc, #48	; (adr r3, 8003f78 <__ieee754_log10+0xf0>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4630      	mov	r0, r6
 8003f52:	4639      	mov	r1, r7
 8003f54:	f7fc fab8 	bl	80004c8 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	e7be      	b.n	8003ee0 <__ieee754_log10+0x58>
 8003f62:	bf00      	nop
 8003f64:	f3af 8000 	nop.w
 8003f68:	11f12b36 	.word	0x11f12b36
 8003f6c:	3d59fef3 	.word	0x3d59fef3
 8003f70:	1526e50e 	.word	0x1526e50e
 8003f74:	3fdbcb7b 	.word	0x3fdbcb7b
 8003f78:	509f6000 	.word	0x509f6000
 8003f7c:	3fd34413 	.word	0x3fd34413
 8003f80:	c3500000 	.word	0xc3500000
 8003f84:	43500000 	.word	0x43500000
 8003f88:	7fefffff 	.word	0x7fefffff

08003f8c <matherr>:
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	4770      	bx	lr

08003f90 <nan>:
 8003f90:	2000      	movs	r0, #0
 8003f92:	4901      	ldr	r1, [pc, #4]	; (8003f98 <nan+0x8>)
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	7ff80000 	.word	0x7ff80000
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <__ieee754_log>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003fa8:	b087      	sub	sp, #28
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	460d      	mov	r5, r1
 8003fb0:	da24      	bge.n	8003ffc <__ieee754_log+0x5c>
 8003fb2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003fb6:	4304      	orrs	r4, r0
 8003fb8:	d108      	bne.n	8003fcc <__ieee754_log+0x2c>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	49cb      	ldr	r1, [pc, #812]	; (80042f0 <__ieee754_log+0x350>)
 8003fc2:	f7fc fbab 	bl	800071c <__aeabi_ddiv>
 8003fc6:	b007      	add	sp, #28
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	da04      	bge.n	8003fda <__ieee754_log+0x3a>
 8003fd0:	f7fc f8c2 	bl	8000158 <__aeabi_dsub>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e7f3      	b.n	8003fc2 <__ieee754_log+0x22>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4bc5      	ldr	r3, [pc, #788]	; (80042f4 <__ieee754_log+0x354>)
 8003fde:	f7fc fa73 	bl	80004c8 <__aeabi_dmul>
 8003fe2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	460d      	mov	r5, r1
 8003fec:	49c2      	ldr	r1, [pc, #776]	; (80042f8 <__ieee754_log+0x358>)
 8003fee:	428d      	cmp	r5, r1
 8003ff0:	dd06      	ble.n	8004000 <__ieee754_log+0x60>
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fc f8b1 	bl	800015c <__adddf3>
 8003ffa:	e7e4      	b.n	8003fc6 <__ieee754_log+0x26>
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	e7f5      	b.n	8003fec <__ieee754_log+0x4c>
 8004000:	152c      	asrs	r4, r5, #20
 8004002:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004006:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800400a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800400e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8004012:	4426      	add	r6, r4
 8004014:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8004018:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800401c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004020:	ea41 0305 	orr.w	r3, r1, r5
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	2200      	movs	r2, #0
 800402a:	4bb4      	ldr	r3, [pc, #720]	; (80042fc <__ieee754_log+0x35c>)
 800402c:	f7fc f894 	bl	8000158 <__aeabi_dsub>
 8004030:	1cab      	adds	r3, r5, #2
 8004032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004036:	2b02      	cmp	r3, #2
 8004038:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800403c:	4682      	mov	sl, r0
 800403e:	468b      	mov	fp, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	dc53      	bgt.n	80040ee <__ieee754_log+0x14e>
 8004046:	2300      	movs	r3, #0
 8004048:	f7fc fca6 	bl	8000998 <__aeabi_dcmpeq>
 800404c:	b1d0      	cbz	r0, 8004084 <__ieee754_log+0xe4>
 800404e:	2c00      	cmp	r4, #0
 8004050:	f000 8120 	beq.w	8004294 <__ieee754_log+0x2f4>
 8004054:	4620      	mov	r0, r4
 8004056:	f7fc f9cd 	bl	80003f4 <__aeabi_i2d>
 800405a:	a391      	add	r3, pc, #580	; (adr r3, 80042a0 <__ieee754_log+0x300>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	4606      	mov	r6, r0
 8004062:	460f      	mov	r7, r1
 8004064:	f7fc fa30 	bl	80004c8 <__aeabi_dmul>
 8004068:	a38f      	add	r3, pc, #572	; (adr r3, 80042a8 <__ieee754_log+0x308>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	4630      	mov	r0, r6
 8004074:	4639      	mov	r1, r7
 8004076:	f7fc fa27 	bl	80004c8 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	e7b8      	b.n	8003ff6 <__ieee754_log+0x56>
 8004084:	a38a      	add	r3, pc, #552	; (adr r3, 80042b0 <__ieee754_log+0x310>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	4650      	mov	r0, sl
 800408c:	4659      	mov	r1, fp
 800408e:	f7fc fa1b 	bl	80004c8 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	2000      	movs	r0, #0
 8004098:	4999      	ldr	r1, [pc, #612]	; (8004300 <__ieee754_log+0x360>)
 800409a:	f7fc f85d 	bl	8000158 <__aeabi_dsub>
 800409e:	4652      	mov	r2, sl
 80040a0:	4606      	mov	r6, r0
 80040a2:	460f      	mov	r7, r1
 80040a4:	465b      	mov	r3, fp
 80040a6:	4650      	mov	r0, sl
 80040a8:	4659      	mov	r1, fp
 80040aa:	f7fc fa0d 	bl	80004c8 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7fc fa07 	bl	80004c8 <__aeabi_dmul>
 80040ba:	4606      	mov	r6, r0
 80040bc:	460f      	mov	r7, r1
 80040be:	b914      	cbnz	r4, 80040c6 <__ieee754_log+0x126>
 80040c0:	4632      	mov	r2, r6
 80040c2:	463b      	mov	r3, r7
 80040c4:	e0a0      	b.n	8004208 <__ieee754_log+0x268>
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7fc f994 	bl	80003f4 <__aeabi_i2d>
 80040cc:	a374      	add	r3, pc, #464	; (adr r3, 80042a0 <__ieee754_log+0x300>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	4680      	mov	r8, r0
 80040d4:	4689      	mov	r9, r1
 80040d6:	f7fc f9f7 	bl	80004c8 <__aeabi_dmul>
 80040da:	a373      	add	r3, pc, #460	; (adr r3, 80042a8 <__ieee754_log+0x308>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	4604      	mov	r4, r0
 80040e2:	460d      	mov	r5, r1
 80040e4:	4640      	mov	r0, r8
 80040e6:	4649      	mov	r1, r9
 80040e8:	f7fc f9ee 	bl	80004c8 <__aeabi_dmul>
 80040ec:	e0a5      	b.n	800423a <__ieee754_log+0x29a>
 80040ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040f2:	f7fc f833 	bl	800015c <__adddf3>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4650      	mov	r0, sl
 80040fc:	4659      	mov	r1, fp
 80040fe:	f7fc fb0d 	bl	800071c <__aeabi_ddiv>
 8004102:	e9cd 0100 	strd	r0, r1, [sp]
 8004106:	4620      	mov	r0, r4
 8004108:	f7fc f974 	bl	80003f4 <__aeabi_i2d>
 800410c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	f7fc f9d6 	bl	80004c8 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004124:	f7fc f9d0 	bl	80004c8 <__aeabi_dmul>
 8004128:	a363      	add	r3, pc, #396	; (adr r3, 80042b8 <__ieee754_log+0x318>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	4680      	mov	r8, r0
 8004130:	4689      	mov	r9, r1
 8004132:	f7fc f9c9 	bl	80004c8 <__aeabi_dmul>
 8004136:	a362      	add	r3, pc, #392	; (adr r3, 80042c0 <__ieee754_log+0x320>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f7fc f80e 	bl	800015c <__adddf3>
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	f7fc f9c0 	bl	80004c8 <__aeabi_dmul>
 8004148:	a35f      	add	r3, pc, #380	; (adr r3, 80042c8 <__ieee754_log+0x328>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f805 	bl	800015c <__adddf3>
 8004152:	4642      	mov	r2, r8
 8004154:	464b      	mov	r3, r9
 8004156:	f7fc f9b7 	bl	80004c8 <__aeabi_dmul>
 800415a:	a35d      	add	r3, pc, #372	; (adr r3, 80042d0 <__ieee754_log+0x330>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fb fffc 	bl	800015c <__adddf3>
 8004164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004168:	f7fc f9ae 	bl	80004c8 <__aeabi_dmul>
 800416c:	a35a      	add	r3, pc, #360	; (adr r3, 80042d8 <__ieee754_log+0x338>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f7fc f9a5 	bl	80004c8 <__aeabi_dmul>
 800417e:	a358      	add	r3, pc, #352	; (adr r3, 80042e0 <__ieee754_log+0x340>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fb ffea 	bl	800015c <__adddf3>
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	f7fc f99c 	bl	80004c8 <__aeabi_dmul>
 8004190:	a355      	add	r3, pc, #340	; (adr r3, 80042e8 <__ieee754_log+0x348>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fb ffe1 	bl	800015c <__adddf3>
 800419a:	4642      	mov	r2, r8
 800419c:	464b      	mov	r3, r9
 800419e:	f7fc f993 	bl	80004c8 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041aa:	f7fb ffd7 	bl	800015c <__adddf3>
 80041ae:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80041b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80041b6:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80041ba:	3551      	adds	r5, #81	; 0x51
 80041bc:	4335      	orrs	r5, r6
 80041be:	2d00      	cmp	r5, #0
 80041c0:	4680      	mov	r8, r0
 80041c2:	4689      	mov	r9, r1
 80041c4:	dd48      	ble.n	8004258 <__ieee754_log+0x2b8>
 80041c6:	2200      	movs	r2, #0
 80041c8:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <__ieee754_log+0x360>)
 80041ca:	4650      	mov	r0, sl
 80041cc:	4659      	mov	r1, fp
 80041ce:	f7fc f97b 	bl	80004c8 <__aeabi_dmul>
 80041d2:	4652      	mov	r2, sl
 80041d4:	465b      	mov	r3, fp
 80041d6:	f7fc f977 	bl	80004c8 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4606      	mov	r6, r0
 80041e0:	460f      	mov	r7, r1
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fb ffb9 	bl	800015c <__adddf3>
 80041ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041ee:	f7fc f96b 	bl	80004c8 <__aeabi_dmul>
 80041f2:	4680      	mov	r8, r0
 80041f4:	4689      	mov	r9, r1
 80041f6:	b964      	cbnz	r4, 8004212 <__ieee754_log+0x272>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fb ffaa 	bl	8000158 <__aeabi_dsub>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4650      	mov	r0, sl
 800420a:	4659      	mov	r1, fp
 800420c:	f7fb ffa4 	bl	8000158 <__aeabi_dsub>
 8004210:	e6d9      	b.n	8003fc6 <__ieee754_log+0x26>
 8004212:	a323      	add	r3, pc, #140	; (adr r3, 80042a0 <__ieee754_log+0x300>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800421c:	f7fc f954 	bl	80004c8 <__aeabi_dmul>
 8004220:	a321      	add	r3, pc, #132	; (adr r3, 80042a8 <__ieee754_log+0x308>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	4604      	mov	r4, r0
 8004228:	460d      	mov	r5, r1
 800422a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422e:	f7fc f94b 	bl	80004c8 <__aeabi_dmul>
 8004232:	4642      	mov	r2, r8
 8004234:	464b      	mov	r3, r9
 8004236:	f7fb ff91 	bl	800015c <__adddf3>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4630      	mov	r0, r6
 8004240:	4639      	mov	r1, r7
 8004242:	f7fb ff89 	bl	8000158 <__aeabi_dsub>
 8004246:	4652      	mov	r2, sl
 8004248:	465b      	mov	r3, fp
 800424a:	f7fb ff85 	bl	8000158 <__aeabi_dsub>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	e7d9      	b.n	800420c <__ieee754_log+0x26c>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4650      	mov	r0, sl
 800425e:	4659      	mov	r1, fp
 8004260:	f7fb ff7a 	bl	8000158 <__aeabi_dsub>
 8004264:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004268:	f7fc f92e 	bl	80004c8 <__aeabi_dmul>
 800426c:	4606      	mov	r6, r0
 800426e:	460f      	mov	r7, r1
 8004270:	2c00      	cmp	r4, #0
 8004272:	f43f af25 	beq.w	80040c0 <__ieee754_log+0x120>
 8004276:	a30a      	add	r3, pc, #40	; (adr r3, 80042a0 <__ieee754_log+0x300>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004280:	f7fc f922 	bl	80004c8 <__aeabi_dmul>
 8004284:	a308      	add	r3, pc, #32	; (adr r3, 80042a8 <__ieee754_log+0x308>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
 800428e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004292:	e729      	b.n	80040e8 <__ieee754_log+0x148>
 8004294:	2000      	movs	r0, #0
 8004296:	2100      	movs	r1, #0
 8004298:	e695      	b.n	8003fc6 <__ieee754_log+0x26>
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w
 80042a0:	fee00000 	.word	0xfee00000
 80042a4:	3fe62e42 	.word	0x3fe62e42
 80042a8:	35793c76 	.word	0x35793c76
 80042ac:	3dea39ef 	.word	0x3dea39ef
 80042b0:	55555555 	.word	0x55555555
 80042b4:	3fd55555 	.word	0x3fd55555
 80042b8:	df3e5244 	.word	0xdf3e5244
 80042bc:	3fc2f112 	.word	0x3fc2f112
 80042c0:	96cb03de 	.word	0x96cb03de
 80042c4:	3fc74664 	.word	0x3fc74664
 80042c8:	94229359 	.word	0x94229359
 80042cc:	3fd24924 	.word	0x3fd24924
 80042d0:	55555593 	.word	0x55555593
 80042d4:	3fe55555 	.word	0x3fe55555
 80042d8:	d078c69f 	.word	0xd078c69f
 80042dc:	3fc39a09 	.word	0x3fc39a09
 80042e0:	1d8e78af 	.word	0x1d8e78af
 80042e4:	3fcc71c5 	.word	0x3fcc71c5
 80042e8:	9997fa04 	.word	0x9997fa04
 80042ec:	3fd99999 	.word	0x3fd99999
 80042f0:	c3500000 	.word	0xc3500000
 80042f4:	43500000 	.word	0x43500000
 80042f8:	7fefffff 	.word	0x7fefffff
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	3fe00000 	.word	0x3fe00000

08004304 <_init>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr

08004310 <_fini>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr
