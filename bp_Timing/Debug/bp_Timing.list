
bp_Timing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  08005908  08005908  00015908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006e98  08006e98  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e98  08006e98  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000084  08006f24  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08006f24  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc32  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e63  00000000  00000000  0002dcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002fb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ff3  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cf7  00000000  00000000  000463c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072dfd  00000000  00000000  000500ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  000c2f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	080058f0 	.word	0x080058f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	080058f0 	.word	0x080058f0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f001 f82d 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f841 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f8ff 	bl	8000d68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b6a:	f000 f883 	bl	8000c74 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b6e:	f000 f8af 	bl	8000cd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_1 = ssd1306_new(&hi2c1, 0x79);
 8000b72:	2179      	movs	r1, #121	; 0x79
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x80>)
 8000b76:	f000 f92b 	bl	8000dd0 <ssd1306_new>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <main+0x84>)
 8000b7e:	601a      	str	r2, [r3, #0]
  timing_1 = timing_new(&htim2);
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <main+0x88>)
 8000b82:	f000 ff15 	bl	80019b0 <timing_new>
 8000b86:	4602      	mov	r2, r0
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <main+0x8c>)
 8000b8a:	601a      	str	r2, [r3, #0]

//  timing_start_s(timing_1);
//  HAL_Delay(7657);
//  volatile double ex_time = timing_get_s(timing_1);

  timing_start_ms(timing_1);
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <main+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 ff85 	bl	8001aa0 <timing_start_ms>
  HAL_Delay(50);
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f001 f872 	bl	8001c80 <HAL_Delay>
  volatile double ex_time = timing_get_ms(timing_1);
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <main+0x8c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 ff9f 	bl	8001ae4 <timing_get_ms>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460c      	mov	r4, r1
 8000baa:	e9c7 3400 	strd	r3, r4, [r7]
//  while (i<2000){
//	  i++;
//  }
//  volatile double ex_time = timing_get_us(timing_1);

  SSD1306_Putdouble(ssd1306_1, ex_time, 1, 1);
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <main+0x84>)
 8000bb0:	681d      	ldr	r5, [r3, #0]
 8000bb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f7ff ff7d 	bl	8000ab8 <__aeabi_d2f>
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f000 fc8f 	bl	80014e8 <SSD1306_Putdouble>
  SSD1306_UpdateScreen(ssd1306_1);
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <main+0x84>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f9da 	bl	8000f88 <SSD1306_UpdateScreen>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <main+0x7c>
 8000bd6:	bf00      	nop
 8000bd8:	200000c0 	.word	0x200000c0
 8000bdc:	200000bc 	.word	0x200000bc
 8000be0:	20000114 	.word	0x20000114
 8000be4:	200000b8 	.word	0x200000b8

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b090      	sub	sp, #64	; 0x40
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fe8c 	bl	8003914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 ffc9 	bl	8002bc8 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f8c2 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fa34 	bl	80030c8 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c66:	f000 f8ad 	bl	8000dc4 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3740      	adds	r7, #64	; 0x40
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c7a:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <MX_I2C1_Init+0x54>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x58>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_I2C1_Init+0x50>)
 8000cb2:	f001 fa45 	bl	8002140 <HAL_I2C_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 f882 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000c0 	.word	0x200000c0
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	00061a80 	.word	0x00061a80

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d02:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f002 fb5f 	bl	80033d8 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 f850 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f002 fbc9 	bl	80034c8 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 f842 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f002 fd6b 	bl	8003828 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f834 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000114 	.word	0x20000114

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MX_GPIO_Init+0x58>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <ssd1306_new>:
#include "math.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 8000ddc:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8000de0:	f002 fd90 	bl	8003904 <malloc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	461a      	mov	r2, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f805 	bl	8000dfe <SSD1306_Init>
	return ssd1306;
 8000df4:	68fb      	ldr	r3, [r7, #12]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6858      	ldr	r0, [r3, #4]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b299      	uxth	r1, r3
 8000e22:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e26:	2201      	movs	r2, #1
 8000e28:	f001 fbb0 	bl	800258c <HAL_I2C_IsDeviceReady>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e0a4      	b.n	8000f80 <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8000e36:	22ae      	movs	r2, #174	; 0xae
 8000e38:	2100      	movs	r1, #0
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 fc85 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 8000e40:	22ae      	movs	r2, #174	; 0xae
 8000e42:	2100      	movs	r1, #0
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f000 fc80 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 fc7b 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e54:	2210      	movs	r2, #16
 8000e56:	2100      	movs	r1, #0
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 fc76 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e5e:	22b0      	movs	r2, #176	; 0xb0
 8000e60:	2100      	movs	r1, #0
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fc71 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8000e68:	22c8      	movs	r2, #200	; 0xc8
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 fc6c 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 fc67 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	2100      	movs	r1, #0
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f000 fc62 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8000e86:	2240      	movs	r2, #64	; 0x40
 8000e88:	2100      	movs	r1, #0
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 fc5d 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 8000e90:	2281      	movs	r2, #129	; 0x81
 8000e92:	2100      	movs	r1, #0
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 fc58 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 fc53 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 8000ea4:	22a1      	movs	r2, #161	; 0xa1
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 fc4e 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 8000eae:	22a6      	movs	r2, #166	; 0xa6
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 fc49 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8000eb8:	22a8      	movs	r2, #168	; 0xa8
 8000eba:	2100      	movs	r1, #0
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 fc44 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 8000ec2:	223f      	movs	r2, #63	; 0x3f
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 fc3f 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ecc:	22a4      	movs	r2, #164	; 0xa4
 8000ece:	2100      	movs	r1, #0
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 fc3a 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 8000ed6:	22d3      	movs	r2, #211	; 0xd3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 fc35 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 fc30 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8000eea:	22d5      	movs	r2, #213	; 0xd5
 8000eec:	2100      	movs	r1, #0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 fc2b 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 8000ef4:	22f0      	movs	r2, #240	; 0xf0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 fc26 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 8000efe:	22d9      	movs	r2, #217	; 0xd9
 8000f00:	2100      	movs	r1, #0
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 fc21 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 8000f08:	2222      	movs	r2, #34	; 0x22
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 fc1c 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 8000f12:	22da      	movs	r2, #218	; 0xda
 8000f14:	2100      	movs	r1, #0
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 fc17 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 8000f1c:	2212      	movs	r2, #18
 8000f1e:	2100      	movs	r1, #0
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 fc12 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8000f26:	22db      	movs	r2, #219	; 0xdb
 8000f28:	2100      	movs	r1, #0
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 fc0d 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 fc08 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 8000f3a:	228d      	movs	r2, #141	; 0x8d
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 fc03 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 8000f44:	2214      	movs	r2, #20
 8000f46:	2100      	movs	r1, #0
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 fbfe 	bl	800174a <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 8000f4e:	22af      	movs	r2, #175	; 0xaf
 8000f50:	2100      	movs	r1, #0
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 fbf9 	bl	800174a <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f845 	bl	8000fea <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f811 	bl	8000f88 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e022      	b.n	8000fdc <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	3b50      	subs	r3, #80	; 0x50
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fbd2 	bl	800174a <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fbcd 	bl	800174a <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fbc8 	bl	800174a <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	1d9a      	adds	r2, r3, #6
 8000fcc:	2384      	movs	r3, #132	; 0x84
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 fb62 	bl	800169a <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d9d9      	bls.n	8000f96 <SSD1306_UpdateScreen+0xe>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 000e 	add.w	r0, r3, #14
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <SSD1306_Fill+0x1c>
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <SSD1306_Fill+0x1e>
 8001006:	23ff      	movs	r3, #255	; 0xff
 8001008:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800100c:	4619      	mov	r1, r3
 800100e:	f002 fc81 	bl	8003914 <memset>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800101a:	b490      	push	{r4, r7}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	4608      	mov	r0, r1
 8001024:	4611      	mov	r1, r2
 8001026:	461a      	mov	r2, r3
 8001028:	4603      	mov	r3, r0
 800102a:	817b      	strh	r3, [r7, #10]
 800102c:	460b      	mov	r3, r1
 800102e:	813b      	strh	r3, [r7, #8]
 8001030:	4613      	mov	r3, r2
 8001032:	71fb      	strb	r3, [r7, #7]
	if (
 8001034:	897b      	ldrh	r3, [r7, #10]
 8001036:	2b83      	cmp	r3, #131	; 0x83
 8001038:	d85a      	bhi.n	80010f0 <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 800103a:	893b      	ldrh	r3, [r7, #8]
 800103c:	2b3f      	cmp	r3, #63	; 0x3f
 800103e:	d857      	bhi.n	80010f0 <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	7b1b      	ldrb	r3, [r3, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d123      	bne.n	80010a4 <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800105c:	897a      	ldrh	r2, [r7, #10]
 800105e:	893b      	ldrh	r3, [r7, #8]
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	b298      	uxth	r0, r3
 8001064:	4601      	mov	r1, r0
 8001066:	460b      	mov	r3, r1
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	440b      	add	r3, r1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	7b9b      	ldrb	r3, [r3, #14]
 8001076:	b25a      	sxtb	r2, r3
 8001078:	893b      	ldrh	r3, [r7, #8]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	b25b      	sxtb	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b25c      	sxtb	r4, r3
 800108a:	897a      	ldrh	r2, [r7, #10]
 800108c:	4601      	mov	r1, r0
 800108e:	460b      	mov	r3, r1
 8001090:	015b      	lsls	r3, r3, #5
 8001092:	440b      	add	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	b2e1      	uxtb	r1, r4
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	739a      	strb	r2, [r3, #14]
 80010a2:	e026      	b.n	80010f2 <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010a4:	897a      	ldrh	r2, [r7, #10]
 80010a6:	893b      	ldrh	r3, [r7, #8]
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	b298      	uxth	r0, r3
 80010ac:	4601      	mov	r1, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	440b      	add	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	7b9b      	ldrb	r3, [r3, #14]
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	893b      	ldrh	r3, [r7, #8]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4013      	ands	r3, r2
 80010d4:	b25c      	sxtb	r4, r3
 80010d6:	897a      	ldrh	r2, [r7, #10]
 80010d8:	4601      	mov	r1, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	440b      	add	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	b2e1      	uxtb	r1, r4
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	460a      	mov	r2, r1
 80010ec:	739a      	strb	r2, [r3, #14]
 80010ee:	e000      	b.n	80010f2 <SSD1306_DrawPixel+0xd8>
		return;
 80010f0:	bf00      	nop
	}
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc90      	pop	{r4, r7}
 80010f8:	4770      	bx	lr

080010fa <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	815a      	strh	r2, [r3, #10]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	72fb      	strb	r3, [r7, #11]
 8001130:	4613      	mov	r3, r2
 8001132:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	891b      	ldrh	r3, [r3, #8]
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
	if (
 8001140:	2b83      	cmp	r3, #131	; 0x83
 8001142:	dc07      	bgt.n	8001154 <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	895b      	ldrh	r3, [r3, #10]
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8001150:	2b3f      	cmp	r3, #63	; 0x3f
 8001152:	dd01      	ble.n	8001158 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8001154:	2300      	movs	r3, #0
 8001156:	e05e      	b.n	8001216 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	e04b      	b.n	80011f6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	3b20      	subs	r3, #32
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	7849      	ldrb	r1, [r1, #1]
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4619      	mov	r1, r3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	440b      	add	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	e030      	b.n	80011e4 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d010      	beq.n	80011b4 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	891a      	ldrh	r2, [r3, #8]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	b299      	uxth	r1, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	895a      	ldrh	r2, [r3, #10]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	7abb      	ldrb	r3, [r7, #10]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ff34 	bl	800101a <SSD1306_DrawPixel>
 80011b2:	e014      	b.n	80011de <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	891a      	ldrh	r2, [r3, #8]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b299      	uxth	r1, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	895a      	ldrh	r2, [r3, #10]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	7abb      	ldrb	r3, [r7, #10]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf0c      	ite	eq
 80011d2:	2301      	moveq	r3, #1
 80011d4:	2300      	movne	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff ff1e 	bl	800101a <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d3c8      	bcc.n	8001182 <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	461a      	mov	r2, r3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d3ad      	bcc.n	800115e <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	891a      	ldrh	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29a      	uxth	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8001214:	7afb      	ldrb	r3, [r7, #11]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <double_str>:
	SSD1306_Putc (ssd1306, menos_char, &Font_11x18, 1);
	SSD1306_GotoXY (ssd1306, x_slot+11,y_slot);
	SSD1306_Puts (ssd1306, data_char, &Font_11x18, 1);
}

char* double_str(double data, uint8_t decimales){
 8001220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001224:	b095      	sub	sp, #84	; 0x54
 8001226:	af00      	add	r7, sp, #0
 8001228:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800122c:	4613      	mov	r3, r2
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	466b      	mov	r3, sp
 8001232:	461e      	mov	r6, r3
	char negativo = ' ';
 8001234:	2320      	movs	r3, #32
 8001236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (data < 0) {
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001246:	f7ff fbb1 	bl	80009ac <__aeabi_dcmplt>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <double_str+0x42>
		data = -data;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800125a:	60fb      	str	r3, [r7, #12]
		negativo = '-';
 800125c:	232d      	movs	r3, #45	; 0x2d
 800125e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	int potencia_10 = pow(10, decimales);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8b5 	bl	80003d4 <__aeabi_ui2d>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	461a      	mov	r2, r3
 8001270:	4623      	mov	r3, r4
 8001272:	f04f 0000 	mov.w	r0, #0
 8001276:	4999      	ldr	r1, [pc, #612]	; (80014dc <double_str+0x2bc>)
 8001278:	f003 f8da 	bl	8004430 <pow>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f7ff fbd0 	bl	8000a28 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
	double p_entera_f = trunc(data);
 800128c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001290:	f003 f824 	bl	80042dc <trunc>
 8001294:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 8001298:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800129a:	f7ff f8ab 	bl	80003f4 <__aeabi_i2d>
 800129e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a2:	f7ff f911 	bl	80004c8 <__aeabi_dmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	4625      	mov	r5, r4
 80012ac:	461c      	mov	r4, r3
 80012ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012b0:	f7ff f8a0 	bl	80003f4 <__aeabi_i2d>
 80012b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012b8:	f7ff f906 	bl	80004c8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7fe ff48 	bl	8000158 <__aeabi_dsub>
 80012c8:	4603      	mov	r3, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int p_entera = p_entera_f;
 80012d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80012d4:	f7ff fba8 	bl	8000a28 <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p_decimal = p_decimal_f;
 80012dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e0:	f7ff fba2 	bl	8000a28 <__aeabi_d2iz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48

	int size = size_int_oled(p_entera);
 80012e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ea:	f000 f983 	bl	80015f4 <size_int_oled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
	char p_entera_char[size];		// String de chars
 80012f2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80012f4:	1e6b      	subs	r3, r5, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	462b      	mov	r3, r5
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	00d4      	lsls	r4, r2, #3
 800130a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800130e:	00cb      	lsls	r3, r1, #3
 8001310:	462b      	mov	r3, r5
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f04f 0400 	mov.w	r4, #0
 8001320:	00d4      	lsls	r4, r2, #3
 8001322:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001326:	00cb      	lsls	r3, r1, #3
 8001328:	462b      	mov	r3, r5
 800132a:	3307      	adds	r3, #7
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	ebad 0d03 	sub.w	sp, sp, r3
 8001334:	466b      	mov	r3, sp
 8001336:	3300      	adds	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133e:	4968      	ldr	r1, [pc, #416]	; (80014e0 <double_str+0x2c0>)
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fba5 	bl	8003a90 <siprintf>

	char p_decimal_char[decimales];
 8001346:	79f8      	ldrb	r0, [r7, #7]
 8001348:	4603      	mov	r3, r0
 800134a:	3b01      	subs	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	b2c1      	uxtb	r1, r0
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	f04f 0400 	mov.w	r4, #0
 800135c:	00d4      	lsls	r4, r2, #3
 800135e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001362:	00cb      	lsls	r3, r1, #3
 8001364:	b2c1      	uxtb	r1, r0
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	f04f 0400 	mov.w	r4, #0
 8001372:	00d4      	lsls	r4, r2, #3
 8001374:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001378:	00cb      	lsls	r3, r1, #3
 800137a:	4603      	mov	r3, r0
 800137c:	3307      	adds	r3, #7
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	ebad 0d03 	sub.w	sp, sp, r3
 8001386:	466b      	mov	r3, sp
 8001388:	3300      	adds	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
	size = size_int_oled(p_decimal);
 800138c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800138e:	f000 f931 	bl	80015f4 <size_int_oled>
 8001392:	4603      	mov	r3, r0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
	if (decimales>size){
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139a:	429a      	cmp	r2, r3
 800139c:	da22      	bge.n	80013e4 <double_str+0x1c4>
		p_decimal = p_decimal + pow(10,decimales-1);
 800139e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013a0:	f7ff f828 	bl	80003f4 <__aeabi_i2d>
 80013a4:	4680      	mov	r8, r0
 80013a6:	4689      	mov	r9, r1
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f821 	bl	80003f4 <__aeabi_i2d>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	461a      	mov	r2, r3
 80013b8:	4623      	mov	r3, r4
 80013ba:	f04f 0000 	mov.w	r0, #0
 80013be:	4947      	ldr	r1, [pc, #284]	; (80014dc <double_str+0x2bc>)
 80013c0:	f003 f836 	bl	8004430 <pow>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	4640      	mov	r0, r8
 80013ce:	4649      	mov	r1, r9
 80013d0:	f7fe fec4 	bl	800015c <__adddf3>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4618      	mov	r0, r3
 80013da:	4621      	mov	r1, r4
 80013dc:	f7ff fb24 	bl	8000a28 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013e8:	493d      	ldr	r1, [pc, #244]	; (80014e0 <double_str+0x2c0>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fb50 	bl	8003a90 <siprintf>
	for(uint8_t i=0; i<(decimales-size);i++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80013f6:	e009      	b.n	800140c <double_str+0x1ec>
		p_decimal_char[i] = '0';
 80013f8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	2130      	movs	r1, #48	; 0x30
 8001400:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimales-size);i++){
 8001402:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001406:	3301      	adds	r3, #1
 8001408:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800140c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001410:	79f9      	ldrb	r1, [r7, #7]
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	1acb      	subs	r3, r1, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	dbee      	blt.n	80013f8 <double_str+0x1d8>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimales+2;
 800141a:	b2ea      	uxtb	r2, r5
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3302      	adds	r3, #2
 8001424:	75fb      	strb	r3, [r7, #23]
	static char float_str[10];

	for(uint8_t i= 0; i<11; i++){
 8001426:	2300      	movs	r3, #0
 8001428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800142c:	e04b      	b.n	80014c6 <double_str+0x2a6>
		if (i==0){
 800142e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <double_str+0x224>
			float_str[i] = negativo;
 8001436:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <double_str+0x2c4>)
 800143c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001440:	54ca      	strb	r2, [r1, r3]
 8001442:	e03b      	b.n	80014bc <double_str+0x29c>
		} else if((i>0) && (i<sizeof(p_entera_char)+1)){
 8001444:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00f      	beq.n	800146c <double_str+0x24c>
 800144c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001450:	462b      	mov	r3, r5
 8001452:	3301      	adds	r3, #1
 8001454:	429a      	cmp	r2, r3
 8001456:	d209      	bcs.n	800146c <double_str+0x24c>
			float_str[i] = p_entera_char[i-1];
 8001458:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001462:	6a39      	ldr	r1, [r7, #32]
 8001464:	5c89      	ldrb	r1, [r1, r2]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <double_str+0x2c4>)
 8001468:	54d1      	strb	r1, [r2, r3]
 800146a:	e027      	b.n	80014bc <double_str+0x29c>
		} else if (i == sizeof(p_entera_char)+1){
 800146c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001470:	462b      	mov	r3, r5
 8001472:	3301      	adds	r3, #1
 8001474:	429a      	cmp	r2, r3
 8001476:	d105      	bne.n	8001484 <double_str+0x264>
			float_str[i] = '.';
 8001478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <double_str+0x2c4>)
 800147e:	212e      	movs	r1, #46	; 0x2e
 8001480:	54d1      	strb	r1, [r2, r3]
 8001482:	e01b      	b.n	80014bc <double_str+0x29c>
		} else if ((i> sizeof(p_entera_char)+1) && (i<total_size)){
 8001484:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001488:	462b      	mov	r3, r5
 800148a:	3301      	adds	r3, #1
 800148c:	429a      	cmp	r2, r3
 800148e:	d910      	bls.n	80014b2 <double_str+0x292>
 8001490:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	429a      	cmp	r2, r3
 8001498:	d20b      	bcs.n	80014b2 <double_str+0x292>
			float_str[i] = p_decimal_char[i-(sizeof(p_entera_char)+2)];
 800149a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800149e:	462a      	mov	r2, r5
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	1e9a      	subs	r2, r3, #2
 80014a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	5c89      	ldrb	r1, [r1, r2]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <double_str+0x2c4>)
 80014ae:	54d1      	strb	r1, [r2, r3]
 80014b0:	e004      	b.n	80014bc <double_str+0x29c>
		} else {float_str[i] = ' ';}
 80014b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <double_str+0x2c4>)
 80014b8:	2120      	movs	r1, #32
 80014ba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i= 0; i<11; i++){
 80014bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014c0:	3301      	adds	r3, #1
 80014c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	d9af      	bls.n	800142e <double_str+0x20e>
	}
	return float_str;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <double_str+0x2c4>)
 80014d0:	46b5      	mov	sp, r6
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3754      	adds	r7, #84	; 0x54
 80014d6:	46bd      	mov	sp, r7
 80014d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014dc:	40240000 	.word	0x40240000
 80014e0:	08005908 	.word	0x08005908
 80014e4:	200000a0 	.word	0x200000a0

080014e8 <SSD1306_Putdouble>:

void SSD1306_Putdouble(ssd1306_t* ssd1306, float data, uint8_t decimales, uint8_t slot) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	460b      	mov	r3, r1
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	4613      	mov	r3, r2
 80014fc:	71bb      	strb	r3, [r7, #6]
	char* float_str = double_str(data, decimales);
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7fe ff8a 	bl	8000418 <__aeabi_f2d>
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	461a      	mov	r2, r3
 8001508:	f7ff fe8a 	bl	8001220 <double_str>
 800150c:	6178      	str	r0, [r7, #20]

	uint16_t x_slot = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	83bb      	strh	r3, [r7, #28]
	uint8_t slot_mini = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	76fb      	strb	r3, [r7, #27]
	switch (slot) {
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3b01      	subs	r3, #1
 800151e:	2b04      	cmp	r3, #4
 8001520:	d829      	bhi.n	8001576 <SSD1306_Putdouble+0x8e>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <SSD1306_Putdouble+0x40>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	0800153d 	.word	0x0800153d
 800152c:	08001547 	.word	0x08001547
 8001530:	08001551 	.word	0x08001551
 8001534:	0800155b 	.word	0x0800155b
 8001538:	08001569 	.word	0x08001569
	case 1:
		x_slot = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	83fb      	strh	r3, [r7, #30]
		y_slot = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	83bb      	strh	r3, [r7, #28]
		break;
 8001544:	e017      	b.n	8001576 <SSD1306_Putdouble+0x8e>
	case 2:
		x_slot = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	83fb      	strh	r3, [r7, #30]
		y_slot = 17;
 800154a:	2311      	movs	r3, #17
 800154c:	83bb      	strh	r3, [r7, #28]
		break;
 800154e:	e012      	b.n	8001576 <SSD1306_Putdouble+0x8e>
	case 3:
		x_slot = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	83fb      	strh	r3, [r7, #30]
		y_slot = 35;
 8001554:	2323      	movs	r3, #35	; 0x23
 8001556:	83bb      	strh	r3, [r7, #28]
		break;
 8001558:	e00d      	b.n	8001576 <SSD1306_Putdouble+0x8e>
	case 4:
		x_slot = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 800155e:	2335      	movs	r3, #53	; 0x35
 8001560:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8001562:	2301      	movs	r3, #1
 8001564:	76fb      	strb	r3, [r7, #27]
		break;
 8001566:	e006      	b.n	8001576 <SSD1306_Putdouble+0x8e>
	case 5:
		x_slot = 60;
 8001568:	233c      	movs	r3, #60	; 0x3c
 800156a:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 800156c:	2335      	movs	r3, #53	; 0x35
 800156e:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	76fb      	strb	r3, [r7, #27]
		break;
 8001574:	bf00      	nop
	}
	if (slot_mini == 1){
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d118      	bne.n	80015ae <SSD1306_Putdouble+0xc6>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Select x and y from the selected slot
 800157c:	8bba      	ldrh	r2, [r7, #28]
 800157e:	8bfb      	ldrh	r3, [r7, #30]
 8001580:	4619      	mov	r1, r3
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff fdb9 	bl	80010fa <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, "       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8001588:	2301      	movs	r3, #1
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <SSD1306_Putdouble+0xfc>)
 800158c:	4916      	ldr	r1, [pc, #88]	; (80015e8 <SSD1306_Putdouble+0x100>)
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 f85e 	bl	8001650 <SSD1306_Puts>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Come back to the initial position
 8001594:	8bba      	ldrh	r2, [r7, #28]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fdad 	bl	80010fa <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, float_str, &Font_7x10, 1);	// Write the value
 80015a0:	2301      	movs	r3, #1
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <SSD1306_Putdouble+0xfc>)
 80015a4:	6979      	ldr	r1, [r7, #20]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f852 	bl	8001650 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 80015ac:	e017      	b.n	80015de <SSD1306_Putdouble+0xf6>
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80015ae:	8bba      	ldrh	r2, [r7, #28]
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	4619      	mov	r1, r3
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7ff fda0 	bl	80010fa <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 80015ba:	2301      	movs	r3, #1
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <SSD1306_Putdouble+0x104>)
 80015be:	490c      	ldr	r1, [pc, #48]	; (80015f0 <SSD1306_Putdouble+0x108>)
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f845 	bl	8001650 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80015c6:	8bba      	ldrh	r2, [r7, #28]
 80015c8:	8bfb      	ldrh	r3, [r7, #30]
 80015ca:	4619      	mov	r1, r3
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fd94 	bl	80010fa <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, float_str, &Font_11x18, 1);
 80015d2:	2301      	movs	r3, #1
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SSD1306_Putdouble+0x104>)
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f839 	bl	8001650 <SSD1306_Puts>
//	SSD1306_UpdateScreen();
}
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	0800590c 	.word	0x0800590c
 80015ec:	20000008 	.word	0x20000008
 80015f0:	08005914 	.word	0x08005914

080015f4 <size_int_oled>:

uint8_t size_int_oled(int data){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <size_int_oled+0x14>
		size = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e01b      	b.n	8001640 <size_int_oled+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe fef3 	bl	80003f4 <__aeabi_i2d>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	f002 fe91 	bl	800433c <log10>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	f002 fd91 	bl	8004148 <floor>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <size_int_oled+0x58>)
 800162c:	f7fe fd96 	bl	800015c <__adddf3>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	f7ff fa1e 	bl	8000a78 <__aeabi_d2uiz>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	3ff00000 	.word	0x3ff00000

08001650 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 800165e:	e012      	b.n	8001686 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	7819      	ldrb	r1, [r3, #0]
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fd59 	bl	8001120 <SSD1306_Putc>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d002      	beq.n	8001680 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	e008      	b.n	8001692 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1e8      	bne.n	8001660 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 800169a:	b5b0      	push	{r4, r5, r7, lr}
 800169c:	b08a      	sub	sp, #40	; 0x28
 800169e:	af02      	add	r7, sp, #8
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	461a      	mov	r2, r3
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
 80016aa:	4613      	mov	r3, r2
 80016ac:	813b      	strh	r3, [r7, #8]
 80016ae:	466b      	mov	r3, sp
 80016b0:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80016b2:	893b      	ldrh	r3, [r7, #8]
 80016b4:	1c58      	adds	r0, r3, #1
 80016b6:	1e43      	subs	r3, r0, #1
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	f04f 0400 	mov.w	r4, #0
 80016ca:	00d4      	lsls	r4, r2, #3
 80016cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016d0:	00cb      	lsls	r3, r1, #3
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f04f 0400 	mov.w	r4, #0
 80016e2:	00d4      	lsls	r4, r2, #3
 80016e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016e8:	00cb      	lsls	r3, r1, #3
 80016ea:	4603      	mov	r3, r0
 80016ec:	3307      	adds	r3, #7
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	ebad 0d03 	sub.w	sp, sp, r3
 80016f6:	ab02      	add	r3, sp, #8
 80016f8:	3300      	adds	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	7afa      	ldrb	r2, [r7, #11]
 8001700:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001702:	2301      	movs	r3, #1
 8001704:	77fb      	strb	r3, [r7, #31]
 8001706:	e00a      	b.n	800171e <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	3b01      	subs	r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	441a      	add	r2, r3
 8001710:	7ffb      	ldrb	r3, [r7, #31]
 8001712:	7811      	ldrb	r1, [r2, #0]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	3301      	adds	r3, #1
 800171c:	77fb      	strb	r3, [r7, #31]
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	b29b      	uxth	r3, r3
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	d2ef      	bcs.n	8001708 <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6858      	ldr	r0, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b299      	uxth	r1, r3
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	893c      	ldrh	r4, [r7, #8]
 8001736:	230a      	movs	r3, #10
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	f000 fe28 	bl	8002390 <HAL_I2C_Master_Transmit>
 8001740:	46ad      	mov	sp, r5
}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}

0800174a <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af02      	add	r7, sp, #8
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	4613      	mov	r3, r2
 8001758:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800175e:	78bb      	ldrb	r3, [r7, #2]
 8001760:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6858      	ldr	r0, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b299      	uxth	r1, r3
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	230a      	movs	r3, #10
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2302      	movs	r3, #2
 8001776:	f000 fe0b 	bl	8002390 <HAL_I2C_Master_Transmit>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_MspInit+0x5c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_MspInit+0x60>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_MspInit+0x60>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_I2C_MspInit+0x70>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d123      	bne.n	8001850 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001820:	23c0      	movs	r3, #192	; 0xc0
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <HAL_I2C_MspInit+0x78>)
 8001834:	f000 fb2a 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001842:	61d3      	str	r3, [r2, #28]
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40005400 	.word	0x40005400
 800185c:	40021000 	.word	0x40021000
 8001860:	40010c00 	.word	0x40010c00

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d10b      	bne.n	800188e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_TIM_Base_MspInit+0x34>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_TIM_Base_MspInit+0x34>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_TIM_Base_MspInit+0x34>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <HardFault_Handler+0x4>

080018ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <MemManage_Handler+0x4>

080018b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <BusFault_Handler+0x4>

080018ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f9ae 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x50>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x16>
		heap_end = &end;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <_sbrk+0x50>)
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <_sbrk+0x54>)
 8001904:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <_sbrk+0x50>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <_sbrk+0x50>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	466a      	mov	r2, sp
 8001916:	4293      	cmp	r3, r2
 8001918:	d907      	bls.n	800192a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800191a:	f001 ffc9 	bl	80038b0 <__errno>
 800191e:	4602      	mov	r2, r0
 8001920:	230c      	movs	r3, #12
 8001922:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	e006      	b.n	8001938 <_sbrk+0x48>
	}

	heap_end += incr;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <_sbrk+0x50>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a03      	ldr	r2, [pc, #12]	; (8001940 <_sbrk+0x50>)
 8001934:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000ac 	.word	0x200000ac
 8001944:	20000160 	.word	0x20000160

08001948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <SystemInit+0x5c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <SystemInit+0x5c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <SystemInit+0x5c>)
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <SystemInit+0x5c>)
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <SystemInit+0x60>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SystemInit+0x5c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <SystemInit+0x5c>)
 800196a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <SystemInit+0x5c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SystemInit+0x5c>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SystemInit+0x5c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <SystemInit+0x5c>)
 8001986:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800198a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SystemInit+0x5c>)
 800198e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001992:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SystemInit+0x64>)
 8001996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199a:	609a      	str	r2, [r3, #8]
#endif 
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000
 80019a8:	f8ff0000 	.word	0xf8ff0000
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <timing_new>:
 * @brief  Creates new timing_t variable corresponding to a timing module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval ads_t variable corresponding to the ads module
 */
timing_t* timing_new(TIM_HandleTypeDef *htim){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	timing_t* timing = malloc(sizeof(*timing));
 80019b8:	2010      	movs	r0, #16
 80019ba:	f001 ffa3 	bl	8003904 <malloc>
 80019be:	4603      	mov	r3, r0
 80019c0:	60fb      	str	r3, [r7, #12]
	timing_init(timing, htim);
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f807 	bl	80019d8 <timing_init>
	return timing;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0000      	movs	r0, r0
	...

080019d8 <timing_init>:

void timing_init(timing_t *timing, TIM_HandleTypeDef *htim){
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, 65535);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f2:	60da      	str	r2, [r3, #12]
	timing->htim = htim;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]
	timing->f_clk = HAL_RCC_GetSysClockFreq();
 80019fa:	f001 fc4f 	bl	800329c <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
	timing->PS_us = round((double)timing->f_clk/(65535*1000));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fce3 	bl	80003d4 <__aeabi_ui2d>
 8001a0e:	a320      	add	r3, pc, #128	; (adr r3, 8001a90 <timing_init+0xb8>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fe82 	bl	800071c <__aeabi_ddiv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4621      	mov	r1, r4
 8001a20:	f002 fc16 	bl	8004250 <round>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	f7ff f824 	bl	8000a78 <__aeabi_d2uiz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	811a      	strh	r2, [r3, #8]
	if (timing->PS_us < 1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	891b      	ldrh	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <timing_init+0x6e>
		timing->PS_us = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	811a      	strh	r2, [r3, #8]
	}
	timing->PS_ms = round((double)timing->f_clk/(65535));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fcc2 	bl	80003d4 <__aeabi_ui2d>
 8001a50:	a311      	add	r3, pc, #68	; (adr r3, 8001a98 <timing_init+0xc0>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fe61 	bl	800071c <__aeabi_ddiv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4621      	mov	r1, r4
 8001a62:	f002 fbf5 	bl	8004250 <round>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f7ff f803 	bl	8000a78 <__aeabi_d2uiz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	815a      	strh	r2, [r3, #10]
	if (timing->PS_ms < 0) {
		timing->PS_ms = 0;
	}
	timing->PS_s = 0xFFFF;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a80:	819a      	strh	r2, [r3, #12]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	f3af 8000 	nop.w
 8001a90:	c0000000 	.word	0xc0000000
 8001a94:	418f3fe0 	.word	0x418f3fe0
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40efffe0 	.word	0x40efffe0

08001aa0 <timing_start_ms>:
	count = count*1000000/(double)timing->f_clk;
	HAL_TIM_Base_DeInit(timing->htim);
	return count;
}

volatile void timing_start_ms(timing_t *timing){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_PRESCALER(timing->htim, timing->PS_ms-1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	895b      	ldrh	r3, [r3, #10]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_COUNTER(timing->htim, 0);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
	while (timing->htim->State != HAL_TIM_STATE_READY){
 8001ac0:	bf00      	nop
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d1f8      	bne.n	8001ac2 <timing_start_ms+0x22>
	}

	HAL_TIM_Base_Start(timing->htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fcaa 	bl	800342e <HAL_TIM_Base_Start>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <timing_get_ms>:

volatile double timing_get_ms(timing_t *timing){
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(timing->htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fcbf 	bl	8003474 <HAL_TIM_Base_Stop>

	double count = __HAL_TIM_GET_COUNTER(timing->htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc68 	bl	80003d4 <__aeabi_ui2d>
 8001b04:	4603      	mov	r3, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	count = count*1000*timing->PS_ms/(double)timing->f_clk;
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <timing_get_ms+0x88>)
 8001b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b16:	f7fe fcd7 	bl	80004c8 <__aeabi_dmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4625      	mov	r5, r4
 8001b20:	461c      	mov	r4, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	895b      	ldrh	r3, [r3, #10]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc64 	bl	80003f4 <__aeabi_i2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fcc8 	bl	80004c8 <__aeabi_dmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	4625      	mov	r5, r4
 8001b3e:	461c      	mov	r4, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc45 	bl	80003d4 <__aeabi_ui2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7fe fde3 	bl	800071c <__aeabi_ddiv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return count;
 8001b5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	4621      	mov	r1, r4
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	408f4000 	.word	0x408f4000

08001b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b72:	e003      	b.n	8001b7c <LoopCopyDataInit>

08001b74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b7a:	3104      	adds	r1, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b7c:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b84:	d3f6      	bcc.n	8001b74 <CopyDataInit>
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b88:	e002      	b.n	8001b90 <LoopFillZerobss>

08001b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b8c:	f842 3b04 	str.w	r3, [r2], #4

08001b90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b94:	d3f9      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b96:	f7ff fed7 	bl	8001948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f001 fe8f 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7fe ffdb 	bl	8000b58 <main>
  bx lr
 8001ba2:	4770      	bx	lr
  ldr r3, =_sidata
 8001ba4:	08006ea0 	.word	0x08006ea0
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bac:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8001bb0:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8001bb4:	2000015c 	.word	0x2000015c

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_Init+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_Init+0x28>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f929 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fdd4 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f933 	bl	8001e72 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f909 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000018 	.word	0x20000018
 8001c44:	20000014 	.word	0x20000014

08001c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x1c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x20>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_IncTick+0x20>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000018 	.word	0x20000018
 8001c68:	20000154 	.word	0x20000154

08001c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000154 	.word	0x20000154

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_Delay+0x40>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffe0 	bl	8001c6c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000018 	.word	0x20000018

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff90 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff49 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff5e 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff90 	bl	8001d7c <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5f 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffb0 	bl	8001de0 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	e127      	b.n	80020f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8116 	bne.w	80020ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b12      	cmp	r3, #18
 8001ec4:	d034      	beq.n	8001f30 <HAL_GPIO_Init+0xa4>
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d80d      	bhi.n	8001ee6 <HAL_GPIO_Init+0x5a>
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d02b      	beq.n	8001f26 <HAL_GPIO_Init+0x9a>
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d804      	bhi.n	8001edc <HAL_GPIO_Init+0x50>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d031      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d01c      	beq.n	8001f14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eda:	e048      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d043      	beq.n	8001f68 <HAL_GPIO_Init+0xdc>
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d01b      	beq.n	8001f1c <HAL_GPIO_Init+0x90>
          break;
 8001ee4:	e043      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ee6:	4a89      	ldr	r2, [pc, #548]	; (800210c <HAL_GPIO_Init+0x280>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d026      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
 8001eec:	4a87      	ldr	r2, [pc, #540]	; (800210c <HAL_GPIO_Init+0x280>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d806      	bhi.n	8001f00 <HAL_GPIO_Init+0x74>
 8001ef2:	4a87      	ldr	r2, [pc, #540]	; (8002110 <HAL_GPIO_Init+0x284>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d020      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
 8001ef8:	4a86      	ldr	r2, [pc, #536]	; (8002114 <HAL_GPIO_Init+0x288>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01d      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
          break;
 8001efe:	e036      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f00:	4a85      	ldr	r2, [pc, #532]	; (8002118 <HAL_GPIO_Init+0x28c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
 8001f06:	4a85      	ldr	r2, [pc, #532]	; (800211c <HAL_GPIO_Init+0x290>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d016      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
 8001f0c:	4a84      	ldr	r2, [pc, #528]	; (8002120 <HAL_GPIO_Init+0x294>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0xae>
          break;
 8001f12:	e02c      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e028      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	3304      	adds	r3, #4
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e023      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e01e      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	330c      	adds	r3, #12
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e019      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f42:	2304      	movs	r3, #4
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e012      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	611a      	str	r2, [r3, #16]
          break;
 8001f5a:	e008      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	615a      	str	r2, [r3, #20]
          break;
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2bff      	cmp	r3, #255	; 0xff
 8001f72:	d801      	bhi.n	8001f78 <HAL_GPIO_Init+0xec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	e001      	b.n	8001f7c <HAL_GPIO_Init+0xf0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	d802      	bhi.n	8001f8a <HAL_GPIO_Init+0xfe>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x104>
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	210f      	movs	r1, #15
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	6a39      	ldr	r1, [r7, #32]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	431a      	orrs	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8096 	beq.w	80020ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_GPIO_Init+0x298>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_GPIO_Init+0x298>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x298>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd6:	4a54      	ldr	r2, [pc, #336]	; (8002128 <HAL_GPIO_Init+0x29c>)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_GPIO_Init+0x2a0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x19e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_GPIO_Init+0x2a4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x19a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_GPIO_Init+0x2a8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x196>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_GPIO_Init+0x2ac>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x192>
 800201a:	2303      	movs	r3, #3
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x1a0>
 800201e:	2304      	movs	r3, #4
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x1a0>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x1a0>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x1a0>
 800202a:	2300      	movs	r3, #0
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203c:	493a      	ldr	r1, [pc, #232]	; (8002128 <HAL_GPIO_Init+0x29c>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4938      	ldr	r1, [pc, #224]	; (800213c <HAL_GPIO_Init+0x2b0>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	43db      	mvns	r3, r3
 800206c:	4933      	ldr	r1, [pc, #204]	; (800213c <HAL_GPIO_Init+0x2b0>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207e:	4b2f      	ldr	r3, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	492e      	ldr	r1, [pc, #184]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_GPIO_Init+0x2b0>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	43db      	mvns	r3, r3
 8002094:	4929      	ldr	r1, [pc, #164]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8002096:	4013      	ands	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4924      	ldr	r1, [pc, #144]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
 80020b2:	e006      	b.n	80020c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	491f      	ldr	r1, [pc, #124]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020be:	4013      	ands	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	491a      	ldr	r1, [pc, #104]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]
 80020da:	e006      	b.n	80020ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4915      	ldr	r1, [pc, #84]	; (800213c <HAL_GPIO_Init+0x2b0>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f aed0 	bne.w	8001ea0 <HAL_GPIO_Init+0x14>
  }
}
 8002100:	bf00      	nop
 8002102:	372c      	adds	r7, #44	; 0x2c
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	10210000 	.word	0x10210000
 8002110:	10110000 	.word	0x10110000
 8002114:	10120000 	.word	0x10120000
 8002118:	10310000 	.word	0x10310000
 800211c:	10320000 	.word	0x10320000
 8002120:	10220000 	.word	0x10220000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e10f      	b.n	8002372 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fb3e 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002184:	f001 f8f6 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8002188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a7b      	ldr	r2, [pc, #492]	; (800237c <HAL_I2C_Init+0x23c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d807      	bhi.n	80021a4 <HAL_I2C_Init+0x64>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_I2C_Init+0x240>)
 8002198:	4293      	cmp	r3, r2
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e006      	b.n	80021b2 <HAL_I2C_Init+0x72>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_I2C_Init+0x244>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0db      	b.n	8002372 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a72      	ldr	r2, [pc, #456]	; (8002388 <HAL_I2C_Init+0x248>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a64      	ldr	r2, [pc, #400]	; (800237c <HAL_I2C_Init+0x23c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d802      	bhi.n	80021f4 <HAL_I2C_Init+0xb4>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	e009      	b.n	8002208 <HAL_I2C_Init+0xc8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_I2C_Init+0x24c>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	3301      	adds	r3, #1
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800221a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4956      	ldr	r1, [pc, #344]	; (800237c <HAL_I2C_Init+0x23c>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d80d      	bhi.n	8002244 <HAL_I2C_Init+0x104>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e59      	subs	r1, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fbb1 f3f3 	udiv	r3, r1, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	bf38      	it	cc
 8002240:	2304      	movcc	r3, #4
 8002242:	e04f      	b.n	80022e4 <HAL_I2C_Init+0x1a4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d111      	bne.n	8002270 <HAL_I2C_Init+0x130>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e012      	b.n	8002296 <HAL_I2C_Init+0x156>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x15e>
 800229a:	2301      	movs	r3, #1
 800229c:	e022      	b.n	80022e4 <HAL_I2C_Init+0x1a4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <HAL_I2C_Init+0x184>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e58      	subs	r0, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	440b      	add	r3, r1
 80022b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c2:	e00f      	b.n	80022e4 <HAL_I2C_Init+0x1a4>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	0099      	lsls	r1, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	6809      	ldr	r1, [r1, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6911      	ldr	r1, [r2, #16]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68d2      	ldr	r2, [r2, #12]
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	000186a0 	.word	0x000186a0
 8002380:	001e847f 	.word	0x001e847f
 8002384:	003d08ff 	.word	0x003d08ff
 8002388:	431bde83 	.word	0x431bde83
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
 80023a0:	4613      	mov	r3, r2
 80023a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff fc62 	bl	8001c6c <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	f040 80e0 	bne.w	8002578 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2319      	movs	r3, #25
 80023be:	2201      	movs	r2, #1
 80023c0:	4970      	ldr	r1, [pc, #448]	; (8002584 <HAL_I2C_Master_Transmit+0x1f4>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa7a 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0d3      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2C_Master_Transmit+0x50>
 80023dc:	2302      	movs	r3, #2
 80023de:	e0cc      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d007      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2221      	movs	r2, #33	; 0x21
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2210      	movs	r2, #16
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	893a      	ldrh	r2, [r7, #8]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a50      	ldr	r2, [pc, #320]	; (8002588 <HAL_I2C_Master_Transmit+0x1f8>)
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f9be 	bl	80027d0 <I2C_MasterRequestWrite>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e08d      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002474:	e066      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	6a39      	ldr	r1, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 faf4 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b04      	cmp	r3, #4
 800248c:	d107      	bne.n	800249e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06b      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d11b      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x188>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d017      	beq.n	8002518 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6a39      	ldr	r1, [r7, #32]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fae4 	bl	8002aea <I2C_WaitOnBTFFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00d      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2b04      	cmp	r3, #4
 800252e:	d107      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e01a      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d194      	bne.n	8002476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	00100002 	.word	0x00100002
 8002588:	ffff0000 	.word	0xffff0000

0800258c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fb66 	bl	8001c6c <HAL_GetTick>
 80025a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	f040 8105 	bne.w	80027be <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2319      	movs	r3, #25
 80025ba:	2201      	movs	r2, #1
 80025bc:	4982      	ldr	r1, [pc, #520]	; (80027c8 <HAL_I2C_IsDeviceReady+0x23c>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f97c 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0f8      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_IsDeviceReady+0x50>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0f1      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d007      	beq.n	8002602 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2224      	movs	r2, #36	; 0x24
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_I2C_IsDeviceReady+0x240>)
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f93a 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0b6      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002660:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb03 	bl	8001c6c <HAL_GetTick>
 8002666:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002696:	e025      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7ff fae8 	bl	8001c6c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d302      	bcc.n	80026ae <HAL_I2C_IsDeviceReady+0x122>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22a0      	movs	r2, #160	; 0xa0
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2ba0      	cmp	r3, #160	; 0xa0
 80026ee:	d005      	beq.n	80026fc <HAL_I2C_IsDeviceReady+0x170>
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <HAL_I2C_IsDeviceReady+0x170>
 80026f6:	7dbb      	ldrb	r3, [r7, #22]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0cd      	beq.n	8002698 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d129      	bne.n	8002766 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2319      	movs	r3, #25
 800273e:	2201      	movs	r2, #1
 8002740:	4921      	ldr	r1, [pc, #132]	; (80027c8 <HAL_I2C_IsDeviceReady+0x23c>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8ba 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e036      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e02c      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800277e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2319      	movs	r3, #25
 8002786:	2201      	movs	r2, #1
 8002788:	490f      	ldr	r1, [pc, #60]	; (80027c8 <HAL_I2C_IsDeviceReady+0x23c>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f896 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e012      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f4ff af3e 	bcc.w	8002626 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	00100002 	.word	0x00100002
 80027cc:	ffff0000 	.word	0xffff0000

080027d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d006      	beq.n	80027fa <I2C_MasterRequestWrite+0x2a>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d003      	beq.n	80027fa <I2C_MasterRequestWrite+0x2a>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f8:	d108      	bne.n	800280c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e00b      	b.n	8002824 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b12      	cmp	r3, #18
 8002812:	d107      	bne.n	8002824 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f843 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e035      	b.n	80028ac <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002848:	d108      	bne.n	800285c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	e01b      	b.n	8002894 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	11db      	asrs	r3, r3, #7
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0306 	and.w	r3, r3, #6
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f063 030f 	orn	r3, r3, #15
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <I2C_MasterRequestWrite+0xe4>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f875 	bl	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e010      	b.n	80028ac <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <I2C_MasterRequestWrite+0xe8>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f865 	bl	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010008 	.word	0x00010008
 80028b8:	00010002 	.word	0x00010002

080028bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	e025      	b.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d021      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7ff f9c9 	bl	8001c6c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d116      	bne.n	800291a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e023      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	e00c      	b.n	800295a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	429a      	cmp	r2, r3
 800295e:	d0b6      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002978:	e051      	b.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d123      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002998:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e046      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d021      	beq.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7ff f947 	bl	8001c6c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10c      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e00b      	b.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d18d      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	e02d      	b.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f878 	bl	8002b6c <I2C_IsAcknowledgeFailed>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02d      	b.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d021      	beq.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7ff f8ed 	bl	8001c6c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d1ca      	bne.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af6:	e02d      	b.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f837 	bl	8002b6c <I2C_IsAcknowledgeFailed>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02d      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d021      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f8ac 	bl	8001c6c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e007      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d1ca      	bne.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d11b      	bne.n	8002bbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e26c      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be8:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d00c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf4:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d112      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x12c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d168      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e246      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x76>
 8002c30:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b7b      	ldr	r3, [pc, #492]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7a      	ldr	r2, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a77      	ldr	r2, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0xbc>
 8002c6a:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a71      	ldr	r2, [pc, #452]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xd4>
 8002c84:	4b6b      	ldr	r3, [pc, #428]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe ffe2 	bl	8001c6c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe ffde 	bl	8001c6c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1fa      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xe4>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe ffce 	bl	8001c6c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe ffca 	bl	8001c6c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1e6      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x10c>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x18c>
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x176>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1ba      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4939      	ldr	r1, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe ff83 	bl	8001c6c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe ff7f 	bl	8001c6c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e19b      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4927      	ldr	r1, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe ff62 	bl	8001c6c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe ff5e 	bl	8001c6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e17a      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03a      	beq.n	8002e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe ff42 	bl	8001c6c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe ff3e 	bl	8001c6c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e15a      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f000 fac6 	bl	800339c <RCC_Delay>
 8002e10:	e01c      	b.n	8002e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe ff28 	bl	8001c6c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe ff24 	bl	8001c6c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d908      	bls.n	8002e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e140      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	42420000 	.word	0x42420000
 8002e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	4b9e      	ldr	r3, [pc, #632]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e9      	bne.n	8002e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a6 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5e:	4b97      	ldr	r3, [pc, #604]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	4b94      	ldr	r3, [pc, #592]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a93      	ldr	r2, [pc, #588]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_RCC_OscConfig+0x4f8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d118      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a8a      	ldr	r2, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fee5 	bl	8001c6c <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe fee1 	bl	8001c6c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	; 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0fd      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x312>
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a7a      	ldr	r2, [pc, #488]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e02d      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a72      	ldr	r2, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	e01c      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x356>
 8002f04:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a6c      	ldr	r2, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCC_OscConfig+0x36e>
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a66      	ldr	r2, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	4b64      	ldr	r3, [pc, #400]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a63      	ldr	r2, [pc, #396]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fe95 	bl	8001c6c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fe91 	bl	8001c6c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0ab      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ee      	beq.n	8002f46 <HAL_RCC_OscConfig+0x37e>
 8002f68:	e014      	b.n	8002f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fe7f 	bl	8001c6c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe fe7b 	bl	8001c6c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e095      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ee      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9a:	4b48      	ldr	r3, [pc, #288]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a47      	ldr	r2, [pc, #284]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8081 	beq.w	80030b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d061      	beq.n	8003080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d146      	bne.n	8003052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_OscConfig+0x4fc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fe4f 	bl	8001c6c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fe4b 	bl	8001c6c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e067      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d108      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	492d      	ldr	r1, [pc, #180]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a19      	ldr	r1, [r3, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	430b      	orrs	r3, r1
 800301e:	4927      	ldr	r1, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x4fc>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fe1f 	bl	8001c6c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fe1b 	bl	8001c6c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e037      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x46a>
 8003050:	e02f      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_RCC_OscConfig+0x4fc>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fe08 	bl	8001c6c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fe04 	bl	8001c6c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e020      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x498>
 800307e:	e018      	b.n	80030b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e013      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_OscConfig+0x4f4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42420060 	.word	0x42420060

080030c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0d0      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4965      	ldr	r1, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800312e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d040      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e073      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3d      	ldr	r3, [pc, #244]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4936      	ldr	r1, [pc, #216]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7fe fd58 	bl	8001c6c <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe fd54 	bl	8001c6c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e053      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d210      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4922      	ldr	r1, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4601      	mov	r1, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	fa21 f303 	lsr.w	r3, r1, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1cc>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1d0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fcb6 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000
 800328c:	40021000 	.word	0x40021000
 8003290:	08006dfc 	.word	0x08006dfc
 8003294:	20000010 	.word	0x20000010
 8003298:	20000014 	.word	0x20000014

0800329c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b490      	push	{r4, r7}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032a4:	1d3c      	adds	r4, r7, #4
 80032a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x46>
 80032da:	e02d      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032dc:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	623b      	str	r3, [r7, #32]
      break;
 80032e0:	e02d      	b.n	800333e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	0c9b      	lsrs	r3, r3, #18
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ee:	4413      	add	r3, r2
 80032f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0c5b      	lsrs	r3, r3, #17
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800330e:	4413      	add	r3, r2
 8003310:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003314:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800331a:	fb02 f203 	mul.w	r2, r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	e004      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4a0c      	ldr	r2, [pc, #48]	; (800335c <HAL_RCC_GetSysClockFreq+0xc0>)
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	623b      	str	r3, [r7, #32]
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800333a:	623b      	str	r3, [r7, #32]
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6a3b      	ldr	r3, [r7, #32]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3728      	adds	r7, #40	; 0x28
 8003344:	46bd      	mov	sp, r7
 8003346:	bc90      	pop	{r4, r7}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	08005920 	.word	0x08005920
 8003350:	08005930 	.word	0x08005930
 8003354:	40021000 	.word	0x40021000
 8003358:	007a1200 	.word	0x007a1200
 800335c:	003d0900 	.word	0x003d0900

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <HAL_RCC_GetHCLKFreq+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	20000010 	.word	0x20000010

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003378:	f7ff fff2 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 800337c:	4601      	mov	r1, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08006e0c 	.word	0x08006e0c

0800339c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCC_Delay+0x34>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <RCC_Delay+0x38>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b8:	bf00      	nop
  }
  while (Delay --);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <RCC_Delay+0x1c>
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000010 	.word	0x20000010
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e01d      	b.n	8003426 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fa30 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f90e 	bl	8003638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d007      	beq.n	8003460 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	f241 1311 	movw	r3, #4369	; 0x1111
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <HAL_TIM_Base_Stop+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	f240 4344 	movw	r3, #1092	; 0x444
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_Base_Stop+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_ConfigClockSource+0x18>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0a6      	b.n	800362e <HAL_TIM_ConfigClockSource+0x166>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003506:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d067      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x120>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d80b      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x6c>
 800351c:	2b10      	cmp	r3, #16
 800351e:	d073      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0x140>
 8003520:	2b10      	cmp	r3, #16
 8003522:	d802      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x62>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d06f      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003528:	e078      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800352a:	2b20      	cmp	r3, #32
 800352c:	d06c      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0x140>
 800352e:	2b30      	cmp	r3, #48	; 0x30
 8003530:	d06a      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003532:	e073      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003534:	2b70      	cmp	r3, #112	; 0x70
 8003536:	d00d      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x8c>
 8003538:	2b70      	cmp	r3, #112	; 0x70
 800353a:	d804      	bhi.n	8003546 <HAL_TIM_ConfigClockSource+0x7e>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d033      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xe0>
 8003540:	2b60      	cmp	r3, #96	; 0x60
 8003542:	d041      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003544:	e06a      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d066      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x152>
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d017      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003552:	e063      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f000 f941 	bl	80037ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003576:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e04c      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f000 f92a 	bl	80037ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e039      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f000 f8a1 	bl	80036fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2150      	movs	r1, #80	; 0x50
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f8f8 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 80035c6:	e029      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f000 f8bf 	bl	8003758 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2160      	movs	r1, #96	; 0x60
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f8e8 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 80035e6:	e019      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f000 f881 	bl	80036fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f8d8 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 8003606:	e009      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f000 f8cf 	bl	80037b6 <TIM_ITRx_SetConfig>
      break;
 8003618:	e000      	b.n	800361c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800361a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0xbc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0xc0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d108      	bne.n	800367a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <TIM_Base_SetConfig+0xbc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <TIM_Base_SetConfig+0xc0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	615a      	str	r2, [r3, #20]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800

080036fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 030a 	bic.w	r3, r3, #10
 8003738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f023 0210 	bic.w	r2, r3, #16
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003782:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	031b      	lsls	r3, r3, #12
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f043 0307 	orr.w	r3, r3, #7
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b087      	sub	sp, #28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003804:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	431a      	orrs	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	609a      	str	r2, [r3, #8]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e032      	b.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003878:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	2000001c 	.word	0x2000001c

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	2500      	movs	r5, #0
 80038c0:	4e0c      	ldr	r6, [pc, #48]	; (80038f4 <__libc_init_array+0x38>)
 80038c2:	4c0d      	ldr	r4, [pc, #52]	; (80038f8 <__libc_init_array+0x3c>)
 80038c4:	1ba4      	subs	r4, r4, r6
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	42a5      	cmp	r5, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	f002 f810 	bl	80058f0 <_init>
 80038d0:	2500      	movs	r5, #0
 80038d2:	4e0a      	ldr	r6, [pc, #40]	; (80038fc <__libc_init_array+0x40>)
 80038d4:	4c0a      	ldr	r4, [pc, #40]	; (8003900 <__libc_init_array+0x44>)
 80038d6:	1ba4      	subs	r4, r4, r6
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	42a5      	cmp	r5, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e4:	4798      	blx	r3
 80038e6:	3501      	adds	r5, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ee:	4798      	blx	r3
 80038f0:	3501      	adds	r5, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	08006e98 	.word	0x08006e98
 80038f8:	08006e98 	.word	0x08006e98
 80038fc:	08006e98 	.word	0x08006e98
 8003900:	08006e9c 	.word	0x08006e9c

08003904 <malloc>:
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <malloc+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f000 b857 	b.w	80039bc <_malloc_r>
 800390e:	bf00      	nop
 8003910:	2000001c 	.word	0x2000001c

08003914 <memset>:
 8003914:	4603      	mov	r3, r0
 8003916:	4402      	add	r2, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <_free_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4605      	mov	r5, r0
 8003928:	2900      	cmp	r1, #0
 800392a:	d043      	beq.n	80039b4 <_free_r+0x90>
 800392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003930:	1f0c      	subs	r4, r1, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	18e4      	addlt	r4, r4, r3
 8003938:	f000 f8ca 	bl	8003ad0 <__malloc_lock>
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <_free_r+0x94>)
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	b933      	cbnz	r3, 8003952 <_free_r+0x2e>
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6014      	str	r4, [r2, #0]
 8003948:	4628      	mov	r0, r5
 800394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800394e:	f000 b8c0 	b.w	8003ad2 <__malloc_unlock>
 8003952:	42a3      	cmp	r3, r4
 8003954:	d90b      	bls.n	800396e <_free_r+0x4a>
 8003956:	6821      	ldr	r1, [r4, #0]
 8003958:	1862      	adds	r2, r4, r1
 800395a:	4293      	cmp	r3, r2
 800395c:	bf01      	itttt	eq
 800395e:	681a      	ldreq	r2, [r3, #0]
 8003960:	685b      	ldreq	r3, [r3, #4]
 8003962:	1852      	addeq	r2, r2, r1
 8003964:	6022      	streq	r2, [r4, #0]
 8003966:	6063      	str	r3, [r4, #4]
 8003968:	6004      	str	r4, [r0, #0]
 800396a:	e7ed      	b.n	8003948 <_free_r+0x24>
 800396c:	4613      	mov	r3, r2
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	b10a      	cbz	r2, 8003976 <_free_r+0x52>
 8003972:	42a2      	cmp	r2, r4
 8003974:	d9fa      	bls.n	800396c <_free_r+0x48>
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	1858      	adds	r0, r3, r1
 800397a:	42a0      	cmp	r0, r4
 800397c:	d10b      	bne.n	8003996 <_free_r+0x72>
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	4401      	add	r1, r0
 8003982:	1858      	adds	r0, r3, r1
 8003984:	4282      	cmp	r2, r0
 8003986:	6019      	str	r1, [r3, #0]
 8003988:	d1de      	bne.n	8003948 <_free_r+0x24>
 800398a:	6810      	ldr	r0, [r2, #0]
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	4401      	add	r1, r0
 8003990:	6019      	str	r1, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e7d8      	b.n	8003948 <_free_r+0x24>
 8003996:	d902      	bls.n	800399e <_free_r+0x7a>
 8003998:	230c      	movs	r3, #12
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	e7d4      	b.n	8003948 <_free_r+0x24>
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	1821      	adds	r1, r4, r0
 80039a2:	428a      	cmp	r2, r1
 80039a4:	bf01      	itttt	eq
 80039a6:	6811      	ldreq	r1, [r2, #0]
 80039a8:	6852      	ldreq	r2, [r2, #4]
 80039aa:	1809      	addeq	r1, r1, r0
 80039ac:	6021      	streq	r1, [r4, #0]
 80039ae:	6062      	str	r2, [r4, #4]
 80039b0:	605c      	str	r4, [r3, #4]
 80039b2:	e7c9      	b.n	8003948 <_free_r+0x24>
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
 80039b6:	bf00      	nop
 80039b8:	200000b0 	.word	0x200000b0

080039bc <_malloc_r>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	1ccd      	adds	r5, r1, #3
 80039c0:	f025 0503 	bic.w	r5, r5, #3
 80039c4:	3508      	adds	r5, #8
 80039c6:	2d0c      	cmp	r5, #12
 80039c8:	bf38      	it	cc
 80039ca:	250c      	movcc	r5, #12
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	4606      	mov	r6, r0
 80039d0:	db01      	blt.n	80039d6 <_malloc_r+0x1a>
 80039d2:	42a9      	cmp	r1, r5
 80039d4:	d903      	bls.n	80039de <_malloc_r+0x22>
 80039d6:	230c      	movs	r3, #12
 80039d8:	6033      	str	r3, [r6, #0]
 80039da:	2000      	movs	r0, #0
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
 80039de:	f000 f877 	bl	8003ad0 <__malloc_lock>
 80039e2:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <_malloc_r+0xac>)
 80039e4:	6814      	ldr	r4, [r2, #0]
 80039e6:	4621      	mov	r1, r4
 80039e8:	b991      	cbnz	r1, 8003a10 <_malloc_r+0x54>
 80039ea:	4c20      	ldr	r4, [pc, #128]	; (8003a6c <_malloc_r+0xb0>)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	b91b      	cbnz	r3, 80039f8 <_malloc_r+0x3c>
 80039f0:	4630      	mov	r0, r6
 80039f2:	f000 f83d 	bl	8003a70 <_sbrk_r>
 80039f6:	6020      	str	r0, [r4, #0]
 80039f8:	4629      	mov	r1, r5
 80039fa:	4630      	mov	r0, r6
 80039fc:	f000 f838 	bl	8003a70 <_sbrk_r>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d124      	bne.n	8003a4e <_malloc_r+0x92>
 8003a04:	230c      	movs	r3, #12
 8003a06:	4630      	mov	r0, r6
 8003a08:	6033      	str	r3, [r6, #0]
 8003a0a:	f000 f862 	bl	8003ad2 <__malloc_unlock>
 8003a0e:	e7e4      	b.n	80039da <_malloc_r+0x1e>
 8003a10:	680b      	ldr	r3, [r1, #0]
 8003a12:	1b5b      	subs	r3, r3, r5
 8003a14:	d418      	bmi.n	8003a48 <_malloc_r+0x8c>
 8003a16:	2b0b      	cmp	r3, #11
 8003a18:	d90f      	bls.n	8003a3a <_malloc_r+0x7e>
 8003a1a:	600b      	str	r3, [r1, #0]
 8003a1c:	18cc      	adds	r4, r1, r3
 8003a1e:	50cd      	str	r5, [r1, r3]
 8003a20:	4630      	mov	r0, r6
 8003a22:	f000 f856 	bl	8003ad2 <__malloc_unlock>
 8003a26:	f104 000b 	add.w	r0, r4, #11
 8003a2a:	1d23      	adds	r3, r4, #4
 8003a2c:	f020 0007 	bic.w	r0, r0, #7
 8003a30:	1ac3      	subs	r3, r0, r3
 8003a32:	d0d3      	beq.n	80039dc <_malloc_r+0x20>
 8003a34:	425a      	negs	r2, r3
 8003a36:	50e2      	str	r2, [r4, r3]
 8003a38:	e7d0      	b.n	80039dc <_malloc_r+0x20>
 8003a3a:	684b      	ldr	r3, [r1, #4]
 8003a3c:	428c      	cmp	r4, r1
 8003a3e:	bf16      	itet	ne
 8003a40:	6063      	strne	r3, [r4, #4]
 8003a42:	6013      	streq	r3, [r2, #0]
 8003a44:	460c      	movne	r4, r1
 8003a46:	e7eb      	b.n	8003a20 <_malloc_r+0x64>
 8003a48:	460c      	mov	r4, r1
 8003a4a:	6849      	ldr	r1, [r1, #4]
 8003a4c:	e7cc      	b.n	80039e8 <_malloc_r+0x2c>
 8003a4e:	1cc4      	adds	r4, r0, #3
 8003a50:	f024 0403 	bic.w	r4, r4, #3
 8003a54:	42a0      	cmp	r0, r4
 8003a56:	d005      	beq.n	8003a64 <_malloc_r+0xa8>
 8003a58:	1a21      	subs	r1, r4, r0
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f000 f808 	bl	8003a70 <_sbrk_r>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d0cf      	beq.n	8003a04 <_malloc_r+0x48>
 8003a64:	6025      	str	r5, [r4, #0]
 8003a66:	e7db      	b.n	8003a20 <_malloc_r+0x64>
 8003a68:	200000b0 	.word	0x200000b0
 8003a6c:	200000b4 	.word	0x200000b4

08003a70 <_sbrk_r>:
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	2300      	movs	r3, #0
 8003a74:	4c05      	ldr	r4, [pc, #20]	; (8003a8c <_sbrk_r+0x1c>)
 8003a76:	4605      	mov	r5, r0
 8003a78:	4608      	mov	r0, r1
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	f7fd ff38 	bl	80018f0 <_sbrk>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d102      	bne.n	8003a8a <_sbrk_r+0x1a>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	b103      	cbz	r3, 8003a8a <_sbrk_r+0x1a>
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	20000158 	.word	0x20000158

08003a90 <siprintf>:
 8003a90:	b40e      	push	{r1, r2, r3}
 8003a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a96:	b500      	push	{lr}
 8003a98:	b09c      	sub	sp, #112	; 0x70
 8003a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a9c:	9002      	str	r0, [sp, #8]
 8003a9e:	9006      	str	r0, [sp, #24]
 8003aa0:	9107      	str	r1, [sp, #28]
 8003aa2:	9104      	str	r1, [sp, #16]
 8003aa4:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <siprintf+0x38>)
 8003aa6:	4909      	ldr	r1, [pc, #36]	; (8003acc <siprintf+0x3c>)
 8003aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aac:	9105      	str	r1, [sp, #20]
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	a902      	add	r1, sp, #8
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	f000 f868 	bl	8003b88 <_svfiprintf_r>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	9b02      	ldr	r3, [sp, #8]
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	b01c      	add	sp, #112	; 0x70
 8003ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ac4:	b003      	add	sp, #12
 8003ac6:	4770      	bx	lr
 8003ac8:	2000001c 	.word	0x2000001c
 8003acc:	ffff0208 	.word	0xffff0208

08003ad0 <__malloc_lock>:
 8003ad0:	4770      	bx	lr

08003ad2 <__malloc_unlock>:
 8003ad2:	4770      	bx	lr

08003ad4 <__ssputs_r>:
 8003ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	688e      	ldr	r6, [r1, #8]
 8003ada:	4682      	mov	sl, r0
 8003adc:	429e      	cmp	r6, r3
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4690      	mov	r8, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	d837      	bhi.n	8003b56 <__ssputs_r+0x82>
 8003ae6:	898a      	ldrh	r2, [r1, #12]
 8003ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003aec:	d031      	beq.n	8003b52 <__ssputs_r+0x7e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	6825      	ldr	r5, [r4, #0]
 8003af2:	6909      	ldr	r1, [r1, #16]
 8003af4:	1a6f      	subs	r7, r5, r1
 8003af6:	6965      	ldr	r5, [r4, #20]
 8003af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003afc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b00:	f109 0301 	add.w	r3, r9, #1
 8003b04:	443b      	add	r3, r7
 8003b06:	429d      	cmp	r5, r3
 8003b08:	bf38      	it	cc
 8003b0a:	461d      	movcc	r5, r3
 8003b0c:	0553      	lsls	r3, r2, #21
 8003b0e:	d530      	bpl.n	8003b72 <__ssputs_r+0x9e>
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7ff ff53 	bl	80039bc <_malloc_r>
 8003b16:	4606      	mov	r6, r0
 8003b18:	b950      	cbnz	r0, 8003b30 <__ssputs_r+0x5c>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	f8ca 3000 	str.w	r3, [sl]
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b30:	463a      	mov	r2, r7
 8003b32:	6921      	ldr	r1, [r4, #16]
 8003b34:	f000 fab6 	bl	80040a4 <memcpy>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	6126      	str	r6, [r4, #16]
 8003b46:	443e      	add	r6, r7
 8003b48:	6026      	str	r6, [r4, #0]
 8003b4a:	464e      	mov	r6, r9
 8003b4c:	6165      	str	r5, [r4, #20]
 8003b4e:	1bed      	subs	r5, r5, r7
 8003b50:	60a5      	str	r5, [r4, #8]
 8003b52:	454e      	cmp	r6, r9
 8003b54:	d900      	bls.n	8003b58 <__ssputs_r+0x84>
 8003b56:	464e      	mov	r6, r9
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	6820      	ldr	r0, [r4, #0]
 8003b5e:	f000 faac 	bl	80040ba <memmove>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	2000      	movs	r0, #0
 8003b66:	1b9b      	subs	r3, r3, r6
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	441e      	add	r6, r3
 8003b6e:	6026      	str	r6, [r4, #0]
 8003b70:	e7dc      	b.n	8003b2c <__ssputs_r+0x58>
 8003b72:	462a      	mov	r2, r5
 8003b74:	f000 faba 	bl	80040ec <_realloc_r>
 8003b78:	4606      	mov	r6, r0
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d1e2      	bne.n	8003b44 <__ssputs_r+0x70>
 8003b7e:	6921      	ldr	r1, [r4, #16]
 8003b80:	4650      	mov	r0, sl
 8003b82:	f7ff fecf 	bl	8003924 <_free_r>
 8003b86:	e7c8      	b.n	8003b1a <__ssputs_r+0x46>

08003b88 <_svfiprintf_r>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	898b      	ldrh	r3, [r1, #12]
 8003b90:	b09d      	sub	sp, #116	; 0x74
 8003b92:	061f      	lsls	r7, r3, #24
 8003b94:	4680      	mov	r8, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	4616      	mov	r6, r2
 8003b9a:	d50f      	bpl.n	8003bbc <_svfiprintf_r+0x34>
 8003b9c:	690b      	ldr	r3, [r1, #16]
 8003b9e:	b96b      	cbnz	r3, 8003bbc <_svfiprintf_r+0x34>
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	f7ff ff0b 	bl	80039bc <_malloc_r>
 8003ba6:	6020      	str	r0, [r4, #0]
 8003ba8:	6120      	str	r0, [r4, #16]
 8003baa:	b928      	cbnz	r0, 8003bb8 <_svfiprintf_r+0x30>
 8003bac:	230c      	movs	r3, #12
 8003bae:	f8c8 3000 	str.w	r3, [r8]
 8003bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb6:	e0c8      	b.n	8003d4a <_svfiprintf_r+0x1c2>
 8003bb8:	2340      	movs	r3, #64	; 0x40
 8003bba:	6163      	str	r3, [r4, #20]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bc6:	2330      	movs	r3, #48	; 0x30
 8003bc8:	f04f 0b01 	mov.w	fp, #1
 8003bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bd0:	9503      	str	r5, [sp, #12]
 8003bd2:	4637      	mov	r7, r6
 8003bd4:	463d      	mov	r5, r7
 8003bd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bda:	b10b      	cbz	r3, 8003be0 <_svfiprintf_r+0x58>
 8003bdc:	2b25      	cmp	r3, #37	; 0x25
 8003bde:	d13e      	bne.n	8003c5e <_svfiprintf_r+0xd6>
 8003be0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003be4:	d00b      	beq.n	8003bfe <_svfiprintf_r+0x76>
 8003be6:	4653      	mov	r3, sl
 8003be8:	4632      	mov	r2, r6
 8003bea:	4621      	mov	r1, r4
 8003bec:	4640      	mov	r0, r8
 8003bee:	f7ff ff71 	bl	8003ad4 <__ssputs_r>
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f000 80a4 	beq.w	8003d40 <_svfiprintf_r+0x1b8>
 8003bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfa:	4453      	add	r3, sl
 8003bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfe:	783b      	ldrb	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 809d 	beq.w	8003d40 <_svfiprintf_r+0x1b8>
 8003c06:	2300      	movs	r3, #0
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c18:	931a      	str	r3, [sp, #104]	; 0x68
 8003c1a:	462f      	mov	r7, r5
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c22:	4850      	ldr	r0, [pc, #320]	; (8003d64 <_svfiprintf_r+0x1dc>)
 8003c24:	f000 fa30 	bl	8004088 <memchr>
 8003c28:	9b04      	ldr	r3, [sp, #16]
 8003c2a:	b9d0      	cbnz	r0, 8003c62 <_svfiprintf_r+0xda>
 8003c2c:	06d9      	lsls	r1, r3, #27
 8003c2e:	bf44      	itt	mi
 8003c30:	2220      	movmi	r2, #32
 8003c32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c36:	071a      	lsls	r2, r3, #28
 8003c38:	bf44      	itt	mi
 8003c3a:	222b      	movmi	r2, #43	; 0x2b
 8003c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c40:	782a      	ldrb	r2, [r5, #0]
 8003c42:	2a2a      	cmp	r2, #42	; 0x2a
 8003c44:	d015      	beq.n	8003c72 <_svfiprintf_r+0xea>
 8003c46:	462f      	mov	r7, r5
 8003c48:	2000      	movs	r0, #0
 8003c4a:	250a      	movs	r5, #10
 8003c4c:	9a07      	ldr	r2, [sp, #28]
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c54:	3b30      	subs	r3, #48	; 0x30
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	d94d      	bls.n	8003cf6 <_svfiprintf_r+0x16e>
 8003c5a:	b1b8      	cbz	r0, 8003c8c <_svfiprintf_r+0x104>
 8003c5c:	e00f      	b.n	8003c7e <_svfiprintf_r+0xf6>
 8003c5e:	462f      	mov	r7, r5
 8003c60:	e7b8      	b.n	8003bd4 <_svfiprintf_r+0x4c>
 8003c62:	4a40      	ldr	r2, [pc, #256]	; (8003d64 <_svfiprintf_r+0x1dc>)
 8003c64:	463d      	mov	r5, r7
 8003c66:	1a80      	subs	r0, r0, r2
 8003c68:	fa0b f000 	lsl.w	r0, fp, r0
 8003c6c:	4318      	orrs	r0, r3
 8003c6e:	9004      	str	r0, [sp, #16]
 8003c70:	e7d3      	b.n	8003c1a <_svfiprintf_r+0x92>
 8003c72:	9a03      	ldr	r2, [sp, #12]
 8003c74:	1d11      	adds	r1, r2, #4
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	9103      	str	r1, [sp, #12]
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	db01      	blt.n	8003c82 <_svfiprintf_r+0xfa>
 8003c7e:	9207      	str	r2, [sp, #28]
 8003c80:	e004      	b.n	8003c8c <_svfiprintf_r+0x104>
 8003c82:	4252      	negs	r2, r2
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	9207      	str	r2, [sp, #28]
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	783b      	ldrb	r3, [r7, #0]
 8003c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c90:	d10c      	bne.n	8003cac <_svfiprintf_r+0x124>
 8003c92:	787b      	ldrb	r3, [r7, #1]
 8003c94:	2b2a      	cmp	r3, #42	; 0x2a
 8003c96:	d133      	bne.n	8003d00 <_svfiprintf_r+0x178>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	3702      	adds	r7, #2
 8003c9c:	1d1a      	adds	r2, r3, #4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	9203      	str	r2, [sp, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003caa:	9305      	str	r3, [sp, #20]
 8003cac:	4d2e      	ldr	r5, [pc, #184]	; (8003d68 <_svfiprintf_r+0x1e0>)
 8003cae:	2203      	movs	r2, #3
 8003cb0:	7839      	ldrb	r1, [r7, #0]
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 f9e8 	bl	8004088 <memchr>
 8003cb8:	b138      	cbz	r0, 8003cca <_svfiprintf_r+0x142>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	1b40      	subs	r0, r0, r5
 8003cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8003cc2:	9b04      	ldr	r3, [sp, #16]
 8003cc4:	3701      	adds	r7, #1
 8003cc6:	4303      	orrs	r3, r0
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	7839      	ldrb	r1, [r7, #0]
 8003ccc:	2206      	movs	r2, #6
 8003cce:	4827      	ldr	r0, [pc, #156]	; (8003d6c <_svfiprintf_r+0x1e4>)
 8003cd0:	1c7e      	adds	r6, r7, #1
 8003cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cd6:	f000 f9d7 	bl	8004088 <memchr>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d038      	beq.n	8003d50 <_svfiprintf_r+0x1c8>
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <_svfiprintf_r+0x1e8>)
 8003ce0:	bb13      	cbnz	r3, 8003d28 <_svfiprintf_r+0x1a0>
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	3307      	adds	r3, #7
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	3308      	adds	r3, #8
 8003cec:	9303      	str	r3, [sp, #12]
 8003cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf0:	444b      	add	r3, r9
 8003cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf4:	e76d      	b.n	8003bd2 <_svfiprintf_r+0x4a>
 8003cf6:	fb05 3202 	mla	r2, r5, r2, r3
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	460f      	mov	r7, r1
 8003cfe:	e7a6      	b.n	8003c4e <_svfiprintf_r+0xc6>
 8003d00:	2300      	movs	r3, #0
 8003d02:	250a      	movs	r5, #10
 8003d04:	4619      	mov	r1, r3
 8003d06:	3701      	adds	r7, #1
 8003d08:	9305      	str	r3, [sp, #20]
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d10:	3a30      	subs	r2, #48	; 0x30
 8003d12:	2a09      	cmp	r2, #9
 8003d14:	d903      	bls.n	8003d1e <_svfiprintf_r+0x196>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0c8      	beq.n	8003cac <_svfiprintf_r+0x124>
 8003d1a:	9105      	str	r1, [sp, #20]
 8003d1c:	e7c6      	b.n	8003cac <_svfiprintf_r+0x124>
 8003d1e:	fb05 2101 	mla	r1, r5, r1, r2
 8003d22:	2301      	movs	r3, #1
 8003d24:	4607      	mov	r7, r0
 8003d26:	e7f0      	b.n	8003d0a <_svfiprintf_r+0x182>
 8003d28:	ab03      	add	r3, sp, #12
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_svfiprintf_r+0x1ec>)
 8003d30:	a904      	add	r1, sp, #16
 8003d32:	4640      	mov	r0, r8
 8003d34:	f3af 8000 	nop.w
 8003d38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d3c:	4681      	mov	r9, r0
 8003d3e:	d1d6      	bne.n	8003cee <_svfiprintf_r+0x166>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	065b      	lsls	r3, r3, #25
 8003d44:	f53f af35 	bmi.w	8003bb2 <_svfiprintf_r+0x2a>
 8003d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d4a:	b01d      	add	sp, #116	; 0x74
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4622      	mov	r2, r4
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_svfiprintf_r+0x1ec>)
 8003d58:	a904      	add	r1, sp, #16
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f000 f882 	bl	8003e64 <_printf_i>
 8003d60:	e7ea      	b.n	8003d38 <_svfiprintf_r+0x1b0>
 8003d62:	bf00      	nop
 8003d64:	08006e14 	.word	0x08006e14
 8003d68:	08006e1a 	.word	0x08006e1a
 8003d6c:	08006e1e 	.word	0x08006e1e
 8003d70:	00000000 	.word	0x00000000
 8003d74:	08003ad5 	.word	0x08003ad5

08003d78 <_printf_common>:
 8003d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	4691      	mov	r9, r2
 8003d7e:	461f      	mov	r7, r3
 8003d80:	688a      	ldr	r2, [r1, #8]
 8003d82:	690b      	ldr	r3, [r1, #16]
 8003d84:	4606      	mov	r6, r0
 8003d86:	4293      	cmp	r3, r2
 8003d88:	bfb8      	it	lt
 8003d8a:	4613      	movlt	r3, r2
 8003d8c:	f8c9 3000 	str.w	r3, [r9]
 8003d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d94:	460c      	mov	r4, r1
 8003d96:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d9a:	b112      	cbz	r2, 8003da2 <_printf_common+0x2a>
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f8c9 3000 	str.w	r3, [r9]
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	0699      	lsls	r1, r3, #26
 8003da6:	bf42      	ittt	mi
 8003da8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003dac:	3302      	addmi	r3, #2
 8003dae:	f8c9 3000 	strmi.w	r3, [r9]
 8003db2:	6825      	ldr	r5, [r4, #0]
 8003db4:	f015 0506 	ands.w	r5, r5, #6
 8003db8:	d107      	bne.n	8003dca <_printf_common+0x52>
 8003dba:	f104 0a19 	add.w	sl, r4, #25
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	42ab      	cmp	r3, r5
 8003dc8:	dc29      	bgt.n	8003e1e <_printf_common+0xa6>
 8003dca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	3300      	adds	r3, #0
 8003dd2:	bf18      	it	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	0692      	lsls	r2, r2, #26
 8003dd8:	d42e      	bmi.n	8003e38 <_printf_common+0xc0>
 8003dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dde:	4639      	mov	r1, r7
 8003de0:	4630      	mov	r0, r6
 8003de2:	47c0      	blx	r8
 8003de4:	3001      	adds	r0, #1
 8003de6:	d021      	beq.n	8003e2c <_printf_common+0xb4>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	68e5      	ldr	r5, [r4, #12]
 8003dec:	f003 0306 	and.w	r3, r3, #6
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	bf18      	it	ne
 8003df4:	2500      	movne	r5, #0
 8003df6:	f8d9 2000 	ldr.w	r2, [r9]
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	bf08      	it	eq
 8003e00:	1aad      	subeq	r5, r5, r2
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	6922      	ldr	r2, [r4, #16]
 8003e06:	bf08      	it	eq
 8003e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bfc4      	itt	gt
 8003e10:	1a9b      	subgt	r3, r3, r2
 8003e12:	18ed      	addgt	r5, r5, r3
 8003e14:	341a      	adds	r4, #26
 8003e16:	454d      	cmp	r5, r9
 8003e18:	d11a      	bne.n	8003e50 <_printf_common+0xd8>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e008      	b.n	8003e30 <_printf_common+0xb8>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4652      	mov	r2, sl
 8003e22:	4639      	mov	r1, r7
 8003e24:	4630      	mov	r0, r6
 8003e26:	47c0      	blx	r8
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d103      	bne.n	8003e34 <_printf_common+0xbc>
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	3501      	adds	r5, #1
 8003e36:	e7c2      	b.n	8003dbe <_printf_common+0x46>
 8003e38:	2030      	movs	r0, #48	; 0x30
 8003e3a:	18e1      	adds	r1, r4, r3
 8003e3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e46:	4422      	add	r2, r4
 8003e48:	3302      	adds	r3, #2
 8003e4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e4e:	e7c4      	b.n	8003dda <_printf_common+0x62>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4622      	mov	r2, r4
 8003e54:	4639      	mov	r1, r7
 8003e56:	4630      	mov	r0, r6
 8003e58:	47c0      	blx	r8
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d0e6      	beq.n	8003e2c <_printf_common+0xb4>
 8003e5e:	f109 0901 	add.w	r9, r9, #1
 8003e62:	e7d8      	b.n	8003e16 <_printf_common+0x9e>

08003e64 <_printf_i>:
 8003e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	7e09      	ldrb	r1, [r1, #24]
 8003e70:	b085      	sub	sp, #20
 8003e72:	296e      	cmp	r1, #110	; 0x6e
 8003e74:	4617      	mov	r7, r2
 8003e76:	4606      	mov	r6, r0
 8003e78:	4698      	mov	r8, r3
 8003e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e7c:	f000 80b3 	beq.w	8003fe6 <_printf_i+0x182>
 8003e80:	d822      	bhi.n	8003ec8 <_printf_i+0x64>
 8003e82:	2963      	cmp	r1, #99	; 0x63
 8003e84:	d036      	beq.n	8003ef4 <_printf_i+0x90>
 8003e86:	d80a      	bhi.n	8003e9e <_printf_i+0x3a>
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	f000 80b9 	beq.w	8004000 <_printf_i+0x19c>
 8003e8e:	2958      	cmp	r1, #88	; 0x58
 8003e90:	f000 8083 	beq.w	8003f9a <_printf_i+0x136>
 8003e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e9c:	e032      	b.n	8003f04 <_printf_i+0xa0>
 8003e9e:	2964      	cmp	r1, #100	; 0x64
 8003ea0:	d001      	beq.n	8003ea6 <_printf_i+0x42>
 8003ea2:	2969      	cmp	r1, #105	; 0x69
 8003ea4:	d1f6      	bne.n	8003e94 <_printf_i+0x30>
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	6813      	ldr	r3, [r2, #0]
 8003eaa:	0605      	lsls	r5, r0, #24
 8003eac:	f103 0104 	add.w	r1, r3, #4
 8003eb0:	d52a      	bpl.n	8003f08 <_printf_i+0xa4>
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da03      	bge.n	8003ec2 <_printf_i+0x5e>
 8003eba:	222d      	movs	r2, #45	; 0x2d
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ec2:	486f      	ldr	r0, [pc, #444]	; (8004080 <_printf_i+0x21c>)
 8003ec4:	220a      	movs	r2, #10
 8003ec6:	e039      	b.n	8003f3c <_printf_i+0xd8>
 8003ec8:	2973      	cmp	r1, #115	; 0x73
 8003eca:	f000 809d 	beq.w	8004008 <_printf_i+0x1a4>
 8003ece:	d808      	bhi.n	8003ee2 <_printf_i+0x7e>
 8003ed0:	296f      	cmp	r1, #111	; 0x6f
 8003ed2:	d020      	beq.n	8003f16 <_printf_i+0xb2>
 8003ed4:	2970      	cmp	r1, #112	; 0x70
 8003ed6:	d1dd      	bne.n	8003e94 <_printf_i+0x30>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f043 0320 	orr.w	r3, r3, #32
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	e003      	b.n	8003eea <_printf_i+0x86>
 8003ee2:	2975      	cmp	r1, #117	; 0x75
 8003ee4:	d017      	beq.n	8003f16 <_printf_i+0xb2>
 8003ee6:	2978      	cmp	r1, #120	; 0x78
 8003ee8:	d1d4      	bne.n	8003e94 <_printf_i+0x30>
 8003eea:	2378      	movs	r3, #120	; 0x78
 8003eec:	4865      	ldr	r0, [pc, #404]	; (8004084 <_printf_i+0x220>)
 8003eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ef2:	e055      	b.n	8003fa0 <_printf_i+0x13c>
 8003ef4:	6813      	ldr	r3, [r2, #0]
 8003ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003efa:	1d19      	adds	r1, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6011      	str	r1, [r2, #0]
 8003f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f04:	2301      	movs	r3, #1
 8003f06:	e08c      	b.n	8004022 <_printf_i+0x1be>
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f0e:	6011      	str	r1, [r2, #0]
 8003f10:	bf18      	it	ne
 8003f12:	b21b      	sxthne	r3, r3
 8003f14:	e7cf      	b.n	8003eb6 <_printf_i+0x52>
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	6825      	ldr	r5, [r4, #0]
 8003f1a:	1d18      	adds	r0, r3, #4
 8003f1c:	6010      	str	r0, [r2, #0]
 8003f1e:	0628      	lsls	r0, r5, #24
 8003f20:	d501      	bpl.n	8003f26 <_printf_i+0xc2>
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	e002      	b.n	8003f2c <_printf_i+0xc8>
 8003f26:	0668      	lsls	r0, r5, #25
 8003f28:	d5fb      	bpl.n	8003f22 <_printf_i+0xbe>
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	296f      	cmp	r1, #111	; 0x6f
 8003f2e:	bf14      	ite	ne
 8003f30:	220a      	movne	r2, #10
 8003f32:	2208      	moveq	r2, #8
 8003f34:	4852      	ldr	r0, [pc, #328]	; (8004080 <_printf_i+0x21c>)
 8003f36:	2100      	movs	r1, #0
 8003f38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3c:	6865      	ldr	r5, [r4, #4]
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	60a5      	str	r5, [r4, #8]
 8003f42:	f2c0 8095 	blt.w	8004070 <_printf_i+0x20c>
 8003f46:	6821      	ldr	r1, [r4, #0]
 8003f48:	f021 0104 	bic.w	r1, r1, #4
 8003f4c:	6021      	str	r1, [r4, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d13d      	bne.n	8003fce <_printf_i+0x16a>
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	f040 808e 	bne.w	8004074 <_printf_i+0x210>
 8003f58:	4665      	mov	r5, ip
 8003f5a:	2a08      	cmp	r2, #8
 8003f5c:	d10b      	bne.n	8003f76 <_printf_i+0x112>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	07db      	lsls	r3, r3, #31
 8003f62:	d508      	bpl.n	8003f76 <_printf_i+0x112>
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	bfde      	ittt	le
 8003f6c:	2330      	movle	r3, #48	; 0x30
 8003f6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f76:	ebac 0305 	sub.w	r3, ip, r5
 8003f7a:	6123      	str	r3, [r4, #16]
 8003f7c:	f8cd 8000 	str.w	r8, [sp]
 8003f80:	463b      	mov	r3, r7
 8003f82:	aa03      	add	r2, sp, #12
 8003f84:	4621      	mov	r1, r4
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fef6 	bl	8003d78 <_printf_common>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d14d      	bne.n	800402c <_printf_i+0x1c8>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	b005      	add	sp, #20
 8003f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f9a:	4839      	ldr	r0, [pc, #228]	; (8004080 <_printf_i+0x21c>)
 8003f9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fa0:	6813      	ldr	r3, [r2, #0]
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	1d1d      	adds	r5, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6015      	str	r5, [r2, #0]
 8003faa:	060a      	lsls	r2, r1, #24
 8003fac:	d50b      	bpl.n	8003fc6 <_printf_i+0x162>
 8003fae:	07ca      	lsls	r2, r1, #31
 8003fb0:	bf44      	itt	mi
 8003fb2:	f041 0120 	orrmi.w	r1, r1, #32
 8003fb6:	6021      	strmi	r1, [r4, #0]
 8003fb8:	b91b      	cbnz	r3, 8003fc2 <_printf_i+0x15e>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	f022 0220 	bic.w	r2, r2, #32
 8003fc0:	6022      	str	r2, [r4, #0]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	e7b7      	b.n	8003f36 <_printf_i+0xd2>
 8003fc6:	064d      	lsls	r5, r1, #25
 8003fc8:	bf48      	it	mi
 8003fca:	b29b      	uxthmi	r3, r3
 8003fcc:	e7ef      	b.n	8003fae <_printf_i+0x14a>
 8003fce:	4665      	mov	r5, ip
 8003fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fd4:	fb02 3311 	mls	r3, r2, r1, r3
 8003fd8:	5cc3      	ldrb	r3, [r0, r3]
 8003fda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fde:	460b      	mov	r3, r1
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	d1f5      	bne.n	8003fd0 <_printf_i+0x16c>
 8003fe4:	e7b9      	b.n	8003f5a <_printf_i+0xf6>
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	6825      	ldr	r5, [r4, #0]
 8003fea:	1d18      	adds	r0, r3, #4
 8003fec:	6961      	ldr	r1, [r4, #20]
 8003fee:	6010      	str	r0, [r2, #0]
 8003ff0:	0628      	lsls	r0, r5, #24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	d501      	bpl.n	8003ffa <_printf_i+0x196>
 8003ff6:	6019      	str	r1, [r3, #0]
 8003ff8:	e002      	b.n	8004000 <_printf_i+0x19c>
 8003ffa:	066a      	lsls	r2, r5, #25
 8003ffc:	d5fb      	bpl.n	8003ff6 <_printf_i+0x192>
 8003ffe:	8019      	strh	r1, [r3, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	4665      	mov	r5, ip
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	e7b9      	b.n	8003f7c <_printf_i+0x118>
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	1d19      	adds	r1, r3, #4
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	681d      	ldr	r5, [r3, #0]
 8004010:	6862      	ldr	r2, [r4, #4]
 8004012:	2100      	movs	r1, #0
 8004014:	4628      	mov	r0, r5
 8004016:	f000 f837 	bl	8004088 <memchr>
 800401a:	b108      	cbz	r0, 8004020 <_printf_i+0x1bc>
 800401c:	1b40      	subs	r0, r0, r5
 800401e:	6060      	str	r0, [r4, #4]
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	2300      	movs	r3, #0
 8004026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402a:	e7a7      	b.n	8003f7c <_printf_i+0x118>
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	462a      	mov	r2, r5
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d0aa      	beq.n	8003f90 <_printf_i+0x12c>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	079b      	lsls	r3, r3, #30
 800403e:	d413      	bmi.n	8004068 <_printf_i+0x204>
 8004040:	68e0      	ldr	r0, [r4, #12]
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	4298      	cmp	r0, r3
 8004046:	bfb8      	it	lt
 8004048:	4618      	movlt	r0, r3
 800404a:	e7a3      	b.n	8003f94 <_printf_i+0x130>
 800404c:	2301      	movs	r3, #1
 800404e:	464a      	mov	r2, r9
 8004050:	4639      	mov	r1, r7
 8004052:	4630      	mov	r0, r6
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d09a      	beq.n	8003f90 <_printf_i+0x12c>
 800405a:	3501      	adds	r5, #1
 800405c:	68e3      	ldr	r3, [r4, #12]
 800405e:	9a03      	ldr	r2, [sp, #12]
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	42ab      	cmp	r3, r5
 8004064:	dcf2      	bgt.n	800404c <_printf_i+0x1e8>
 8004066:	e7eb      	b.n	8004040 <_printf_i+0x1dc>
 8004068:	2500      	movs	r5, #0
 800406a:	f104 0919 	add.w	r9, r4, #25
 800406e:	e7f5      	b.n	800405c <_printf_i+0x1f8>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ac      	bne.n	8003fce <_printf_i+0x16a>
 8004074:	7803      	ldrb	r3, [r0, #0]
 8004076:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800407a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407e:	e76c      	b.n	8003f5a <_printf_i+0xf6>
 8004080:	08006e25 	.word	0x08006e25
 8004084:	08006e36 	.word	0x08006e36

08004088 <memchr>:
 8004088:	b510      	push	{r4, lr}
 800408a:	b2c9      	uxtb	r1, r1
 800408c:	4402      	add	r2, r0
 800408e:	4290      	cmp	r0, r2
 8004090:	4603      	mov	r3, r0
 8004092:	d101      	bne.n	8004098 <memchr+0x10>
 8004094:	2300      	movs	r3, #0
 8004096:	e003      	b.n	80040a0 <memchr+0x18>
 8004098:	781c      	ldrb	r4, [r3, #0]
 800409a:	3001      	adds	r0, #1
 800409c:	428c      	cmp	r4, r1
 800409e:	d1f6      	bne.n	800408e <memchr+0x6>
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <memcpy>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	1e43      	subs	r3, r0, #1
 80040a8:	440a      	add	r2, r1
 80040aa:	4291      	cmp	r1, r2
 80040ac:	d100      	bne.n	80040b0 <memcpy+0xc>
 80040ae:	bd10      	pop	{r4, pc}
 80040b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b8:	e7f7      	b.n	80040aa <memcpy+0x6>

080040ba <memmove>:
 80040ba:	4288      	cmp	r0, r1
 80040bc:	b510      	push	{r4, lr}
 80040be:	eb01 0302 	add.w	r3, r1, r2
 80040c2:	d807      	bhi.n	80040d4 <memmove+0x1a>
 80040c4:	1e42      	subs	r2, r0, #1
 80040c6:	4299      	cmp	r1, r3
 80040c8:	d00a      	beq.n	80040e0 <memmove+0x26>
 80040ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80040d2:	e7f8      	b.n	80040c6 <memmove+0xc>
 80040d4:	4283      	cmp	r3, r0
 80040d6:	d9f5      	bls.n	80040c4 <memmove+0xa>
 80040d8:	1881      	adds	r1, r0, r2
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	42d3      	cmn	r3, r2
 80040de:	d100      	bne.n	80040e2 <memmove+0x28>
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040ea:	e7f7      	b.n	80040dc <memmove+0x22>

080040ec <_realloc_r>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	4607      	mov	r7, r0
 80040f0:	4614      	mov	r4, r2
 80040f2:	460e      	mov	r6, r1
 80040f4:	b921      	cbnz	r1, 8004100 <_realloc_r+0x14>
 80040f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040fa:	4611      	mov	r1, r2
 80040fc:	f7ff bc5e 	b.w	80039bc <_malloc_r>
 8004100:	b922      	cbnz	r2, 800410c <_realloc_r+0x20>
 8004102:	f7ff fc0f 	bl	8003924 <_free_r>
 8004106:	4625      	mov	r5, r4
 8004108:	4628      	mov	r0, r5
 800410a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800410c:	f000 f814 	bl	8004138 <_malloc_usable_size_r>
 8004110:	42a0      	cmp	r0, r4
 8004112:	d20f      	bcs.n	8004134 <_realloc_r+0x48>
 8004114:	4621      	mov	r1, r4
 8004116:	4638      	mov	r0, r7
 8004118:	f7ff fc50 	bl	80039bc <_malloc_r>
 800411c:	4605      	mov	r5, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	d0f2      	beq.n	8004108 <_realloc_r+0x1c>
 8004122:	4631      	mov	r1, r6
 8004124:	4622      	mov	r2, r4
 8004126:	f7ff ffbd 	bl	80040a4 <memcpy>
 800412a:	4631      	mov	r1, r6
 800412c:	4638      	mov	r0, r7
 800412e:	f7ff fbf9 	bl	8003924 <_free_r>
 8004132:	e7e9      	b.n	8004108 <_realloc_r+0x1c>
 8004134:	4635      	mov	r5, r6
 8004136:	e7e7      	b.n	8004108 <_realloc_r+0x1c>

08004138 <_malloc_usable_size_r>:
 8004138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413c:	1f18      	subs	r0, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	bfbc      	itt	lt
 8004142:	580b      	ldrlt	r3, [r1, r0]
 8004144:	18c0      	addlt	r0, r0, r3
 8004146:	4770      	bx	lr

08004148 <floor>:
 8004148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800414c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004150:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004154:	2e13      	cmp	r6, #19
 8004156:	4607      	mov	r7, r0
 8004158:	460b      	mov	r3, r1
 800415a:	460c      	mov	r4, r1
 800415c:	4605      	mov	r5, r0
 800415e:	dc35      	bgt.n	80041cc <floor+0x84>
 8004160:	2e00      	cmp	r6, #0
 8004162:	da16      	bge.n	8004192 <floor+0x4a>
 8004164:	a336      	add	r3, pc, #216	; (adr r3, 8004240 <floor+0xf8>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fb fff7 	bl	800015c <__adddf3>
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	f7fc fc39 	bl	80009e8 <__aeabi_dcmpgt>
 8004176:	b148      	cbz	r0, 800418c <floor+0x44>
 8004178:	2c00      	cmp	r4, #0
 800417a:	da5b      	bge.n	8004234 <floor+0xec>
 800417c:	2500      	movs	r5, #0
 800417e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004182:	4a31      	ldr	r2, [pc, #196]	; (8004248 <floor+0x100>)
 8004184:	433b      	orrs	r3, r7
 8004186:	42ab      	cmp	r3, r5
 8004188:	bf18      	it	ne
 800418a:	4614      	movne	r4, r2
 800418c:	4623      	mov	r3, r4
 800418e:	462f      	mov	r7, r5
 8004190:	e026      	b.n	80041e0 <floor+0x98>
 8004192:	4a2e      	ldr	r2, [pc, #184]	; (800424c <floor+0x104>)
 8004194:	fa42 f806 	asr.w	r8, r2, r6
 8004198:	ea01 0208 	and.w	r2, r1, r8
 800419c:	4302      	orrs	r2, r0
 800419e:	d01f      	beq.n	80041e0 <floor+0x98>
 80041a0:	a327      	add	r3, pc, #156	; (adr r3, 8004240 <floor+0xf8>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fb ffd9 	bl	800015c <__adddf3>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	f7fc fc1b 	bl	80009e8 <__aeabi_dcmpgt>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d0ea      	beq.n	800418c <floor+0x44>
 80041b6:	2c00      	cmp	r4, #0
 80041b8:	bfbe      	ittt	lt
 80041ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80041be:	fa43 f606 	asrlt.w	r6, r3, r6
 80041c2:	19a4      	addlt	r4, r4, r6
 80041c4:	ea24 0408 	bic.w	r4, r4, r8
 80041c8:	2500      	movs	r5, #0
 80041ca:	e7df      	b.n	800418c <floor+0x44>
 80041cc:	2e33      	cmp	r6, #51	; 0x33
 80041ce:	dd0b      	ble.n	80041e8 <floor+0xa0>
 80041d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80041d4:	d104      	bne.n	80041e0 <floor+0x98>
 80041d6:	4602      	mov	r2, r0
 80041d8:	f7fb ffc0 	bl	800015c <__adddf3>
 80041dc:	4607      	mov	r7, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4638      	mov	r0, r7
 80041e2:	4619      	mov	r1, r3
 80041e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80041f0:	fa22 f808 	lsr.w	r8, r2, r8
 80041f4:	ea18 0f00 	tst.w	r8, r0
 80041f8:	d0f2      	beq.n	80041e0 <floor+0x98>
 80041fa:	a311      	add	r3, pc, #68	; (adr r3, 8004240 <floor+0xf8>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fb ffac 	bl	800015c <__adddf3>
 8004204:	2200      	movs	r2, #0
 8004206:	2300      	movs	r3, #0
 8004208:	f7fc fbee 	bl	80009e8 <__aeabi_dcmpgt>
 800420c:	2800      	cmp	r0, #0
 800420e:	d0bd      	beq.n	800418c <floor+0x44>
 8004210:	2c00      	cmp	r4, #0
 8004212:	da02      	bge.n	800421a <floor+0xd2>
 8004214:	2e14      	cmp	r6, #20
 8004216:	d103      	bne.n	8004220 <floor+0xd8>
 8004218:	3401      	adds	r4, #1
 800421a:	ea25 0508 	bic.w	r5, r5, r8
 800421e:	e7b5      	b.n	800418c <floor+0x44>
 8004220:	2301      	movs	r3, #1
 8004222:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004226:	fa03 f606 	lsl.w	r6, r3, r6
 800422a:	4435      	add	r5, r6
 800422c:	42bd      	cmp	r5, r7
 800422e:	bf38      	it	cc
 8004230:	18e4      	addcc	r4, r4, r3
 8004232:	e7f2      	b.n	800421a <floor+0xd2>
 8004234:	2500      	movs	r5, #0
 8004236:	462c      	mov	r4, r5
 8004238:	e7a8      	b.n	800418c <floor+0x44>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	8800759c 	.word	0x8800759c
 8004244:	7e37e43c 	.word	0x7e37e43c
 8004248:	bff00000 	.word	0xbff00000
 800424c:	000fffff 	.word	0x000fffff

08004250 <round>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004256:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800425a:	2c13      	cmp	r4, #19
 800425c:	4606      	mov	r6, r0
 800425e:	460d      	mov	r5, r1
 8004260:	460b      	mov	r3, r1
 8004262:	468c      	mov	ip, r1
 8004264:	4602      	mov	r2, r0
 8004266:	dc17      	bgt.n	8004298 <round+0x48>
 8004268:	2c00      	cmp	r4, #0
 800426a:	da09      	bge.n	8004280 <round+0x30>
 800426c:	3401      	adds	r4, #1
 800426e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004272:	d103      	bne.n	800427c <round+0x2c>
 8004274:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004278:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800427c:	2200      	movs	r2, #0
 800427e:	e028      	b.n	80042d2 <round+0x82>
 8004280:	4915      	ldr	r1, [pc, #84]	; (80042d8 <round+0x88>)
 8004282:	4121      	asrs	r1, r4
 8004284:	420d      	tst	r5, r1
 8004286:	d100      	bne.n	800428a <round+0x3a>
 8004288:	b178      	cbz	r0, 80042aa <round+0x5a>
 800428a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800428e:	4123      	asrs	r3, r4
 8004290:	4463      	add	r3, ip
 8004292:	ea23 0301 	bic.w	r3, r3, r1
 8004296:	e7f1      	b.n	800427c <round+0x2c>
 8004298:	2c33      	cmp	r4, #51	; 0x33
 800429a:	dd09      	ble.n	80042b0 <round+0x60>
 800429c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80042a0:	d103      	bne.n	80042aa <round+0x5a>
 80042a2:	f7fb ff5b 	bl	800015c <__adddf3>
 80042a6:	4606      	mov	r6, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	4630      	mov	r0, r6
 80042ac:	4629      	mov	r1, r5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80042b8:	40f8      	lsrs	r0, r7
 80042ba:	4206      	tst	r6, r0
 80042bc:	d0f5      	beq.n	80042aa <round+0x5a>
 80042be:	2101      	movs	r1, #1
 80042c0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80042c4:	fa01 f404 	lsl.w	r4, r1, r4
 80042c8:	1932      	adds	r2, r6, r4
 80042ca:	bf28      	it	cs
 80042cc:	185b      	addcs	r3, r3, r1
 80042ce:	ea22 0200 	bic.w	r2, r2, r0
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	e7e6      	b.n	80042a6 <round+0x56>
 80042d8:	000fffff 	.word	0x000fffff

080042dc <trunc>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80042e2:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80042e6:	2a13      	cmp	r2, #19
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	dc10      	bgt.n	8004310 <trunc+0x34>
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	bfb3      	iteet	lt
 80042f2:	2000      	movlt	r0, #0
 80042f4:	2000      	movge	r0, #0
 80042f6:	4b10      	ldrge	r3, [pc, #64]	; (8004338 <trunc+0x5c>)
 80042f8:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 80042fc:	bfa4      	itt	ge
 80042fe:	fa43 f202 	asrge.w	r2, r3, r2
 8004302:	ea24 0102 	bicge.w	r1, r4, r2
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004310:	2a33      	cmp	r2, #51	; 0x33
 8004312:	dd07      	ble.n	8004324 <trunc+0x48>
 8004314:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004318:	d1f7      	bne.n	800430a <trunc+0x2e>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	f7fb ff1d 	bl	800015c <__adddf3>
 8004322:	e7f0      	b.n	8004306 <trunc+0x2a>
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800432c:	fa22 f505 	lsr.w	r5, r2, r5
 8004330:	ea20 0005 	bic.w	r0, r0, r5
 8004334:	e7e7      	b.n	8004306 <trunc+0x2a>
 8004336:	bf00      	nop
 8004338:	000fffff 	.word	0x000fffff

0800433c <log10>:
 800433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004340:	b08b      	sub	sp, #44	; 0x2c
 8004342:	4604      	mov	r4, r0
 8004344:	460d      	mov	r5, r1
 8004346:	f000 f9cf 	bl	80046e8 <__ieee754_log10>
 800434a:	4b34      	ldr	r3, [pc, #208]	; (800441c <log10+0xe0>)
 800434c:	4680      	mov	r8, r0
 800434e:	f993 6000 	ldrsb.w	r6, [r3]
 8004352:	4689      	mov	r9, r1
 8004354:	1c73      	adds	r3, r6, #1
 8004356:	d05c      	beq.n	8004412 <log10+0xd6>
 8004358:	4622      	mov	r2, r4
 800435a:	462b      	mov	r3, r5
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fc fb4c 	bl	80009fc <__aeabi_dcmpun>
 8004364:	4607      	mov	r7, r0
 8004366:	2800      	cmp	r0, #0
 8004368:	d153      	bne.n	8004412 <log10+0xd6>
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fc fb25 	bl	80009c0 <__aeabi_dcmple>
 8004376:	2800      	cmp	r0, #0
 8004378:	d04b      	beq.n	8004412 <log10+0xd6>
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <log10+0xe4>)
 800437c:	9708      	str	r7, [sp, #32]
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004384:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004388:	b9a6      	cbnz	r6, 80043b4 <log10+0x78>
 800438a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <log10+0xe8>)
 8004390:	4620      	mov	r0, r4
 8004392:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004396:	4629      	mov	r1, r5
 8004398:	2200      	movs	r2, #0
 800439a:	2300      	movs	r3, #0
 800439c:	f7fc fafc 	bl	8000998 <__aeabi_dcmpeq>
 80043a0:	bb40      	cbnz	r0, 80043f4 <log10+0xb8>
 80043a2:	2301      	movs	r3, #1
 80043a4:	2e02      	cmp	r6, #2
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	d119      	bne.n	80043de <log10+0xa2>
 80043aa:	f7ff fa81 	bl	80038b0 <__errno>
 80043ae:	2321      	movs	r3, #33	; 0x21
 80043b0:	6003      	str	r3, [r0, #0]
 80043b2:	e019      	b.n	80043e8 <log10+0xac>
 80043b4:	2200      	movs	r2, #0
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <log10+0xec>)
 80043b8:	4620      	mov	r0, r4
 80043ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043be:	4629      	mov	r1, r5
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f7fc fae8 	bl	8000998 <__aeabi_dcmpeq>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d0ea      	beq.n	80043a2 <log10+0x66>
 80043cc:	2302      	movs	r3, #2
 80043ce:	429e      	cmp	r6, r3
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	d111      	bne.n	80043f8 <log10+0xbc>
 80043d4:	f7ff fa6c 	bl	80038b0 <__errno>
 80043d8:	2322      	movs	r3, #34	; 0x22
 80043da:	6003      	str	r3, [r0, #0]
 80043dc:	e011      	b.n	8004402 <log10+0xc6>
 80043de:	4668      	mov	r0, sp
 80043e0:	f000 ffc6 	bl	8005370 <matherr>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0e0      	beq.n	80043aa <log10+0x6e>
 80043e8:	4810      	ldr	r0, [pc, #64]	; (800442c <log10+0xf0>)
 80043ea:	f000 ffc3 	bl	8005374 <nan>
 80043ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043f2:	e006      	b.n	8004402 <log10+0xc6>
 80043f4:	2302      	movs	r3, #2
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	4668      	mov	r0, sp
 80043fa:	f000 ffb9 	bl	8005370 <matherr>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0e8      	beq.n	80043d4 <log10+0x98>
 8004402:	9b08      	ldr	r3, [sp, #32]
 8004404:	b11b      	cbz	r3, 800440e <log10+0xd2>
 8004406:	f7ff fa53 	bl	80038b0 <__errno>
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	6003      	str	r3, [r0, #0]
 800440e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004412:	4640      	mov	r0, r8
 8004414:	4649      	mov	r1, r9
 8004416:	b00b      	add	sp, #44	; 0x2c
 8004418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800441c:	20000080 	.word	0x20000080
 8004420:	08006e47 	.word	0x08006e47
 8004424:	c7efffff 	.word	0xc7efffff
 8004428:	fff00000 	.word	0xfff00000
 800442c:	08006e19 	.word	0x08006e19

08004430 <pow>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	b08f      	sub	sp, #60	; 0x3c
 8004436:	461d      	mov	r5, r3
 8004438:	4680      	mov	r8, r0
 800443a:	4689      	mov	r9, r1
 800443c:	4614      	mov	r4, r2
 800443e:	f000 f9d7 	bl	80047f0 <__ieee754_pow>
 8004442:	4fa1      	ldr	r7, [pc, #644]	; (80046c8 <pow+0x298>)
 8004444:	e9cd 0100 	strd	r0, r1, [sp]
 8004448:	f997 3000 	ldrsb.w	r3, [r7]
 800444c:	463e      	mov	r6, r7
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	d05f      	beq.n	8004514 <pow+0xe4>
 8004454:	4622      	mov	r2, r4
 8004456:	462b      	mov	r3, r5
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	f7fc face 	bl	80009fc <__aeabi_dcmpun>
 8004460:	4682      	mov	sl, r0
 8004462:	2800      	cmp	r0, #0
 8004464:	d156      	bne.n	8004514 <pow+0xe4>
 8004466:	4642      	mov	r2, r8
 8004468:	464b      	mov	r3, r9
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f7fc fac5 	bl	80009fc <__aeabi_dcmpun>
 8004472:	9003      	str	r0, [sp, #12]
 8004474:	b1e8      	cbz	r0, 80044b2 <pow+0x82>
 8004476:	2200      	movs	r2, #0
 8004478:	2300      	movs	r3, #0
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fc fa8b 	bl	8000998 <__aeabi_dcmpeq>
 8004482:	2800      	cmp	r0, #0
 8004484:	d046      	beq.n	8004514 <pow+0xe4>
 8004486:	2301      	movs	r3, #1
 8004488:	2200      	movs	r2, #0
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	4b8f      	ldr	r3, [pc, #572]	; (80046cc <pow+0x29c>)
 800448e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	4b8e      	ldr	r3, [pc, #568]	; (80046d0 <pow+0x2a0>)
 8004496:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800449a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800449e:	9b02      	ldr	r3, [sp, #8]
 80044a0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d031      	beq.n	800450c <pow+0xdc>
 80044a8:	a804      	add	r0, sp, #16
 80044aa:	f000 ff61 	bl	8005370 <matherr>
 80044ae:	bb38      	cbnz	r0, 8004500 <pow+0xd0>
 80044b0:	e058      	b.n	8004564 <pow+0x134>
 80044b2:	f04f 0a00 	mov.w	sl, #0
 80044b6:	f04f 0b00 	mov.w	fp, #0
 80044ba:	4652      	mov	r2, sl
 80044bc:	465b      	mov	r3, fp
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fc fa69 	bl	8000998 <__aeabi_dcmpeq>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d051      	beq.n	800456e <pow+0x13e>
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fc fa61 	bl	8000998 <__aeabi_dcmpeq>
 80044d6:	4606      	mov	r6, r0
 80044d8:	b308      	cbz	r0, 800451e <pow+0xee>
 80044da:	2301      	movs	r3, #1
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	4b7b      	ldr	r3, [pc, #492]	; (80046cc <pow+0x29c>)
 80044e0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80044e4:	9305      	str	r3, [sp, #20]
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80044ec:	930c      	str	r3, [sp, #48]	; 0x30
 80044ee:	9b02      	ldr	r3, [sp, #8]
 80044f0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0d7      	beq.n	80044a8 <pow+0x78>
 80044f8:	2200      	movs	r2, #0
 80044fa:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <pow+0x2a0>)
 80044fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004502:	b11b      	cbz	r3, 800450c <pow+0xdc>
 8004504:	f7ff f9d4 	bl	80038b0 <__errno>
 8004508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800450a:	6003      	str	r3, [r0, #0]
 800450c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004510:	e9cd 3400 	strd	r3, r4, [sp]
 8004514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004518:	b00f      	add	sp, #60	; 0x3c
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f000 ff1f 	bl	8005364 <finite>
 8004526:	2800      	cmp	r0, #0
 8004528:	d0f4      	beq.n	8004514 <pow+0xe4>
 800452a:	4652      	mov	r2, sl
 800452c:	465b      	mov	r3, fp
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc fa3b 	bl	80009ac <__aeabi_dcmplt>
 8004536:	2800      	cmp	r0, #0
 8004538:	d0ec      	beq.n	8004514 <pow+0xe4>
 800453a:	2301      	movs	r3, #1
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	4b63      	ldr	r3, [pc, #396]	; (80046cc <pow+0x29c>)
 8004540:	960c      	str	r6, [sp, #48]	; 0x30
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	f997 3000 	ldrsb.w	r3, [r7]
 8004548:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800454c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004550:	b913      	cbnz	r3, 8004558 <pow+0x128>
 8004552:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004556:	e7a7      	b.n	80044a8 <pow+0x78>
 8004558:	2000      	movs	r0, #0
 800455a:	495e      	ldr	r1, [pc, #376]	; (80046d4 <pow+0x2a4>)
 800455c:	2b02      	cmp	r3, #2
 800455e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004562:	d1a1      	bne.n	80044a8 <pow+0x78>
 8004564:	f7ff f9a4 	bl	80038b0 <__errno>
 8004568:	2321      	movs	r3, #33	; 0x21
 800456a:	6003      	str	r3, [r0, #0]
 800456c:	e7c8      	b.n	8004500 <pow+0xd0>
 800456e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004572:	f000 fef7 	bl	8005364 <finite>
 8004576:	9002      	str	r0, [sp, #8]
 8004578:	2800      	cmp	r0, #0
 800457a:	d177      	bne.n	800466c <pow+0x23c>
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	f000 fef0 	bl	8005364 <finite>
 8004584:	2800      	cmp	r0, #0
 8004586:	d071      	beq.n	800466c <pow+0x23c>
 8004588:	4620      	mov	r0, r4
 800458a:	4629      	mov	r1, r5
 800458c:	f000 feea 	bl	8005364 <finite>
 8004590:	2800      	cmp	r0, #0
 8004592:	d06b      	beq.n	800466c <pow+0x23c>
 8004594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fc fa2e 	bl	80009fc <__aeabi_dcmpun>
 80045a0:	f997 7000 	ldrsb.w	r7, [r7]
 80045a4:	4b49      	ldr	r3, [pc, #292]	; (80046cc <pow+0x29c>)
 80045a6:	b1a0      	cbz	r0, 80045d2 <pow+0x1a2>
 80045a8:	2201      	movs	r2, #1
 80045aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80045b4:	930c      	str	r3, [sp, #48]	; 0x30
 80045b6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80045ba:	2f00      	cmp	r7, #0
 80045bc:	d0c9      	beq.n	8004552 <pow+0x122>
 80045be:	4652      	mov	r2, sl
 80045c0:	465b      	mov	r3, fp
 80045c2:	4650      	mov	r0, sl
 80045c4:	4659      	mov	r1, fp
 80045c6:	f7fc f8a9 	bl	800071c <__aeabi_ddiv>
 80045ca:	2f02      	cmp	r7, #2
 80045cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045d0:	e7c7      	b.n	8004562 <pow+0x132>
 80045d2:	2203      	movs	r2, #3
 80045d4:	900c      	str	r0, [sp, #48]	; 0x30
 80045d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	2200      	movs	r2, #0
 80045e0:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <pow+0x2a8>)
 80045e2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80045e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80045ea:	f7fb ff6d 	bl	80004c8 <__aeabi_dmul>
 80045ee:	4604      	mov	r4, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	bb17      	cbnz	r7, 800463a <pow+0x20a>
 80045f4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80045f8:	4b38      	ldr	r3, [pc, #224]	; (80046dc <pow+0x2ac>)
 80045fa:	4640      	mov	r0, r8
 80045fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004600:	4649      	mov	r1, r9
 8004602:	4652      	mov	r2, sl
 8004604:	465b      	mov	r3, fp
 8004606:	f7fc f9d1 	bl	80009ac <__aeabi_dcmplt>
 800460a:	2800      	cmp	r0, #0
 800460c:	d054      	beq.n	80046b8 <pow+0x288>
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f000 feb5 	bl	8005380 <rint>
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f7fc f9bd 	bl	8000998 <__aeabi_dcmpeq>
 800461e:	b920      	cbnz	r0, 800462a <pow+0x1fa>
 8004620:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <pow+0x2b0>)
 8004626:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800462a:	f996 3000 	ldrsb.w	r3, [r6]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d142      	bne.n	80046b8 <pow+0x288>
 8004632:	f7ff f93d 	bl	80038b0 <__errno>
 8004636:	2322      	movs	r3, #34	; 0x22
 8004638:	e797      	b.n	800456a <pow+0x13a>
 800463a:	2200      	movs	r2, #0
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <pow+0x2b4>)
 800463e:	4640      	mov	r0, r8
 8004640:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004644:	4649      	mov	r1, r9
 8004646:	4652      	mov	r2, sl
 8004648:	465b      	mov	r3, fp
 800464a:	f7fc f9af 	bl	80009ac <__aeabi_dcmplt>
 800464e:	2800      	cmp	r0, #0
 8004650:	d0eb      	beq.n	800462a <pow+0x1fa>
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f000 fe93 	bl	8005380 <rint>
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	f7fc f99b 	bl	8000998 <__aeabi_dcmpeq>
 8004662:	2800      	cmp	r0, #0
 8004664:	d1e1      	bne.n	800462a <pow+0x1fa>
 8004666:	2200      	movs	r2, #0
 8004668:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <pow+0x2a4>)
 800466a:	e7dc      	b.n	8004626 <pow+0x1f6>
 800466c:	2200      	movs	r2, #0
 800466e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004672:	2300      	movs	r3, #0
 8004674:	f7fc f990 	bl	8000998 <__aeabi_dcmpeq>
 8004678:	2800      	cmp	r0, #0
 800467a:	f43f af4b 	beq.w	8004514 <pow+0xe4>
 800467e:	4640      	mov	r0, r8
 8004680:	4649      	mov	r1, r9
 8004682:	f000 fe6f 	bl	8005364 <finite>
 8004686:	2800      	cmp	r0, #0
 8004688:	f43f af44 	beq.w	8004514 <pow+0xe4>
 800468c:	4620      	mov	r0, r4
 800468e:	4629      	mov	r1, r5
 8004690:	f000 fe68 	bl	8005364 <finite>
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f af3d 	beq.w	8004514 <pow+0xe4>
 800469a:	2304      	movs	r3, #4
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <pow+0x29c>)
 80046a0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	2300      	movs	r3, #0
 80046a8:	2400      	movs	r4, #0
 80046aa:	930c      	str	r3, [sp, #48]	; 0x30
 80046ac:	2300      	movs	r3, #0
 80046ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80046b2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80046b6:	e7b8      	b.n	800462a <pow+0x1fa>
 80046b8:	a804      	add	r0, sp, #16
 80046ba:	f000 fe59 	bl	8005370 <matherr>
 80046be:	2800      	cmp	r0, #0
 80046c0:	f47f af1e 	bne.w	8004500 <pow+0xd0>
 80046c4:	e7b5      	b.n	8004632 <pow+0x202>
 80046c6:	bf00      	nop
 80046c8:	20000080 	.word	0x20000080
 80046cc:	08006e4d 	.word	0x08006e4d
 80046d0:	3ff00000 	.word	0x3ff00000
 80046d4:	fff00000 	.word	0xfff00000
 80046d8:	3fe00000 	.word	0x3fe00000
 80046dc:	47efffff 	.word	0x47efffff
 80046e0:	c7efffff 	.word	0xc7efffff
 80046e4:	7ff00000 	.word	0x7ff00000

080046e8 <__ieee754_log10>:
 80046e8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80046ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	460d      	mov	r5, r1
 80046f4:	460b      	mov	r3, r1
 80046f6:	da26      	bge.n	8004746 <__ieee754_log10+0x5e>
 80046f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80046fc:	4302      	orrs	r2, r0
 80046fe:	d107      	bne.n	8004710 <__ieee754_log10+0x28>
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	2000      	movs	r0, #0
 8004706:	4936      	ldr	r1, [pc, #216]	; (80047e0 <__ieee754_log10+0xf8>)
 8004708:	f7fc f808 	bl	800071c <__aeabi_ddiv>
 800470c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004710:	2900      	cmp	r1, #0
 8004712:	da05      	bge.n	8004720 <__ieee754_log10+0x38>
 8004714:	4602      	mov	r2, r0
 8004716:	f7fb fd1f 	bl	8000158 <__aeabi_dsub>
 800471a:	2200      	movs	r2, #0
 800471c:	2300      	movs	r3, #0
 800471e:	e7f3      	b.n	8004708 <__ieee754_log10+0x20>
 8004720:	2200      	movs	r2, #0
 8004722:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <__ieee754_log10+0xfc>)
 8004724:	f7fb fed0 	bl	80004c8 <__aeabi_dmul>
 8004728:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800472c:	4604      	mov	r4, r0
 800472e:	460d      	mov	r5, r1
 8004730:	460b      	mov	r3, r1
 8004732:	492d      	ldr	r1, [pc, #180]	; (80047e8 <__ieee754_log10+0x100>)
 8004734:	428b      	cmp	r3, r1
 8004736:	dd08      	ble.n	800474a <__ieee754_log10+0x62>
 8004738:	4622      	mov	r2, r4
 800473a:	462b      	mov	r3, r5
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fd0c 	bl	800015c <__adddf3>
 8004744:	e7e2      	b.n	800470c <__ieee754_log10+0x24>
 8004746:	2200      	movs	r2, #0
 8004748:	e7f3      	b.n	8004732 <__ieee754_log10+0x4a>
 800474a:	1518      	asrs	r0, r3, #20
 800474c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004750:	4410      	add	r0, r2
 8004752:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004756:	4448      	add	r0, r9
 8004758:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800475c:	f7fb fe4a 	bl	80003f4 <__aeabi_i2d>
 8004760:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004764:	3303      	adds	r3, #3
 8004766:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800476a:	4606      	mov	r6, r0
 800476c:	460f      	mov	r7, r1
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	f000 ff01 	bl	8005578 <__ieee754_log>
 8004776:	a314      	add	r3, pc, #80	; (adr r3, 80047c8 <__ieee754_log10+0xe0>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	4680      	mov	r8, r0
 800477e:	4689      	mov	r9, r1
 8004780:	4630      	mov	r0, r6
 8004782:	4639      	mov	r1, r7
 8004784:	f7fb fea0 	bl	80004c8 <__aeabi_dmul>
 8004788:	a311      	add	r3, pc, #68	; (adr r3, 80047d0 <__ieee754_log10+0xe8>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	4604      	mov	r4, r0
 8004790:	460d      	mov	r5, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fe97 	bl	80004c8 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fcdb 	bl	800015c <__adddf3>
 80047a6:	a30c      	add	r3, pc, #48	; (adr r3, 80047d8 <__ieee754_log10+0xf0>)
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	4604      	mov	r4, r0
 80047ae:	460d      	mov	r5, r1
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fb fe88 	bl	80004c8 <__aeabi_dmul>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	e7be      	b.n	8004740 <__ieee754_log10+0x58>
 80047c2:	bf00      	nop
 80047c4:	f3af 8000 	nop.w
 80047c8:	11f12b36 	.word	0x11f12b36
 80047cc:	3d59fef3 	.word	0x3d59fef3
 80047d0:	1526e50e 	.word	0x1526e50e
 80047d4:	3fdbcb7b 	.word	0x3fdbcb7b
 80047d8:	509f6000 	.word	0x509f6000
 80047dc:	3fd34413 	.word	0x3fd34413
 80047e0:	c3500000 	.word	0xc3500000
 80047e4:	43500000 	.word	0x43500000
 80047e8:	7fefffff 	.word	0x7fefffff
 80047ec:	00000000 	.word	0x00000000

080047f0 <__ieee754_pow>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	b091      	sub	sp, #68	; 0x44
 80047f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047fa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80047fe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004802:	ea55 0302 	orrs.w	r3, r5, r2
 8004806:	4607      	mov	r7, r0
 8004808:	4688      	mov	r8, r1
 800480a:	f000 84b7 	beq.w	800517c <__ieee754_pow+0x98c>
 800480e:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <__ieee754_pow+0x220>)
 8004810:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004814:	429c      	cmp	r4, r3
 8004816:	4689      	mov	r9, r1
 8004818:	4682      	mov	sl, r0
 800481a:	dc09      	bgt.n	8004830 <__ieee754_pow+0x40>
 800481c:	d103      	bne.n	8004826 <__ieee754_pow+0x36>
 800481e:	b938      	cbnz	r0, 8004830 <__ieee754_pow+0x40>
 8004820:	42a5      	cmp	r5, r4
 8004822:	dc0d      	bgt.n	8004840 <__ieee754_pow+0x50>
 8004824:	e001      	b.n	800482a <__ieee754_pow+0x3a>
 8004826:	429d      	cmp	r5, r3
 8004828:	dc02      	bgt.n	8004830 <__ieee754_pow+0x40>
 800482a:	429d      	cmp	r5, r3
 800482c:	d10e      	bne.n	800484c <__ieee754_pow+0x5c>
 800482e:	b16a      	cbz	r2, 800484c <__ieee754_pow+0x5c>
 8004830:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004834:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004838:	ea54 030a 	orrs.w	r3, r4, sl
 800483c:	f000 849e 	beq.w	800517c <__ieee754_pow+0x98c>
 8004840:	4874      	ldr	r0, [pc, #464]	; (8004a14 <__ieee754_pow+0x224>)
 8004842:	b011      	add	sp, #68	; 0x44
 8004844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004848:	f000 bd94 	b.w	8005374 <nan>
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	da53      	bge.n	80048fa <__ieee754_pow+0x10a>
 8004852:	4b71      	ldr	r3, [pc, #452]	; (8004a18 <__ieee754_pow+0x228>)
 8004854:	429d      	cmp	r5, r3
 8004856:	dc4e      	bgt.n	80048f6 <__ieee754_pow+0x106>
 8004858:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800485c:	429d      	cmp	r5, r3
 800485e:	dd4c      	ble.n	80048fa <__ieee754_pow+0x10a>
 8004860:	152b      	asrs	r3, r5, #20
 8004862:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004866:	2b14      	cmp	r3, #20
 8004868:	dd28      	ble.n	80048bc <__ieee754_pow+0xcc>
 800486a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800486e:	fa22 f103 	lsr.w	r1, r2, r3
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	4293      	cmp	r3, r2
 8004878:	d13f      	bne.n	80048fa <__ieee754_pow+0x10a>
 800487a:	f001 0101 	and.w	r1, r1, #1
 800487e:	f1c1 0302 	rsb	r3, r1, #2
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2a00      	cmp	r2, #0
 8004886:	d15c      	bne.n	8004942 <__ieee754_pow+0x152>
 8004888:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <__ieee754_pow+0x220>)
 800488a:	429d      	cmp	r5, r3
 800488c:	d126      	bne.n	80048dc <__ieee754_pow+0xec>
 800488e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004892:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004896:	ea53 030a 	orrs.w	r3, r3, sl
 800489a:	f000 846f 	beq.w	800517c <__ieee754_pow+0x98c>
 800489e:	4b5f      	ldr	r3, [pc, #380]	; (8004a1c <__ieee754_pow+0x22c>)
 80048a0:	429c      	cmp	r4, r3
 80048a2:	dd2c      	ble.n	80048fe <__ieee754_pow+0x10e>
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	f280 846f 	bge.w	8005188 <__ieee754_pow+0x998>
 80048aa:	f04f 0b00 	mov.w	fp, #0
 80048ae:	f04f 0c00 	mov.w	ip, #0
 80048b2:	4658      	mov	r0, fp
 80048b4:	4661      	mov	r1, ip
 80048b6:	b011      	add	sp, #68	; 0x44
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d13e      	bne.n	800493e <__ieee754_pow+0x14e>
 80048c0:	f1c3 0314 	rsb	r3, r3, #20
 80048c4:	fa45 f103 	asr.w	r1, r5, r3
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	f040 8463 	bne.w	8005198 <__ieee754_pow+0x9a8>
 80048d2:	f001 0101 	and.w	r1, r1, #1
 80048d6:	f1c1 0302 	rsb	r3, r1, #2
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <__ieee754_pow+0x230>)
 80048de:	429d      	cmp	r5, r3
 80048e0:	d114      	bne.n	800490c <__ieee754_pow+0x11c>
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	f280 8454 	bge.w	8005190 <__ieee754_pow+0x9a0>
 80048e8:	463a      	mov	r2, r7
 80048ea:	4643      	mov	r3, r8
 80048ec:	2000      	movs	r0, #0
 80048ee:	494c      	ldr	r1, [pc, #304]	; (8004a20 <__ieee754_pow+0x230>)
 80048f0:	f7fb ff14 	bl	800071c <__aeabi_ddiv>
 80048f4:	e013      	b.n	800491e <__ieee754_pow+0x12e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e7c3      	b.n	8004882 <__ieee754_pow+0x92>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e7c1      	b.n	8004882 <__ieee754_pow+0x92>
 80048fe:	2e00      	cmp	r6, #0
 8004900:	dad3      	bge.n	80048aa <__ieee754_pow+0xba>
 8004902:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004906:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800490a:	e7d2      	b.n	80048b2 <__ieee754_pow+0xc2>
 800490c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8004910:	d108      	bne.n	8004924 <__ieee754_pow+0x134>
 8004912:	463a      	mov	r2, r7
 8004914:	4643      	mov	r3, r8
 8004916:	4638      	mov	r0, r7
 8004918:	4641      	mov	r1, r8
 800491a:	f7fb fdd5 	bl	80004c8 <__aeabi_dmul>
 800491e:	4683      	mov	fp, r0
 8004920:	468c      	mov	ip, r1
 8004922:	e7c6      	b.n	80048b2 <__ieee754_pow+0xc2>
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <__ieee754_pow+0x234>)
 8004926:	429e      	cmp	r6, r3
 8004928:	d10b      	bne.n	8004942 <__ieee754_pow+0x152>
 800492a:	f1b9 0f00 	cmp.w	r9, #0
 800492e:	db08      	blt.n	8004942 <__ieee754_pow+0x152>
 8004930:	4638      	mov	r0, r7
 8004932:	4641      	mov	r1, r8
 8004934:	b011      	add	sp, #68	; 0x44
 8004936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	f000 bc63 	b.w	8005204 <__ieee754_sqrt>
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4638      	mov	r0, r7
 8004944:	4641      	mov	r1, r8
 8004946:	f000 fd09 	bl	800535c <fabs>
 800494a:	4683      	mov	fp, r0
 800494c:	468c      	mov	ip, r1
 800494e:	f1ba 0f00 	cmp.w	sl, #0
 8004952:	d12b      	bne.n	80049ac <__ieee754_pow+0x1bc>
 8004954:	b124      	cbz	r4, 8004960 <__ieee754_pow+0x170>
 8004956:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <__ieee754_pow+0x230>)
 8004958:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800495c:	429a      	cmp	r2, r3
 800495e:	d125      	bne.n	80049ac <__ieee754_pow+0x1bc>
 8004960:	2e00      	cmp	r6, #0
 8004962:	da07      	bge.n	8004974 <__ieee754_pow+0x184>
 8004964:	465a      	mov	r2, fp
 8004966:	4663      	mov	r3, ip
 8004968:	2000      	movs	r0, #0
 800496a:	492d      	ldr	r1, [pc, #180]	; (8004a20 <__ieee754_pow+0x230>)
 800496c:	f7fb fed6 	bl	800071c <__aeabi_ddiv>
 8004970:	4683      	mov	fp, r0
 8004972:	468c      	mov	ip, r1
 8004974:	f1b9 0f00 	cmp.w	r9, #0
 8004978:	da9b      	bge.n	80048b2 <__ieee754_pow+0xc2>
 800497a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800497e:	9b00      	ldr	r3, [sp, #0]
 8004980:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004984:	4323      	orrs	r3, r4
 8004986:	d108      	bne.n	800499a <__ieee754_pow+0x1aa>
 8004988:	465a      	mov	r2, fp
 800498a:	4663      	mov	r3, ip
 800498c:	4658      	mov	r0, fp
 800498e:	4661      	mov	r1, ip
 8004990:	f7fb fbe2 	bl	8000158 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	e7aa      	b.n	80048f0 <__ieee754_pow+0x100>
 800499a:	9b00      	ldr	r3, [sp, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d188      	bne.n	80048b2 <__ieee754_pow+0xc2>
 80049a0:	4658      	mov	r0, fp
 80049a2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80049a6:	4683      	mov	fp, r0
 80049a8:	469c      	mov	ip, r3
 80049aa:	e782      	b.n	80048b2 <__ieee754_pow+0xc2>
 80049ac:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80049b0:	f109 33ff 	add.w	r3, r9, #4294967295
 80049b4:	930d      	str	r3, [sp, #52]	; 0x34
 80049b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049b8:	9b00      	ldr	r3, [sp, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d104      	bne.n	80049c8 <__ieee754_pow+0x1d8>
 80049be:	463a      	mov	r2, r7
 80049c0:	4643      	mov	r3, r8
 80049c2:	4638      	mov	r0, r7
 80049c4:	4641      	mov	r1, r8
 80049c6:	e7e3      	b.n	8004990 <__ieee754_pow+0x1a0>
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <__ieee754_pow+0x238>)
 80049ca:	429d      	cmp	r5, r3
 80049cc:	f340 80fe 	ble.w	8004bcc <__ieee754_pow+0x3dc>
 80049d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80049d4:	429d      	cmp	r5, r3
 80049d6:	dd0b      	ble.n	80049f0 <__ieee754_pow+0x200>
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <__ieee754_pow+0x22c>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	dc0e      	bgt.n	80049fc <__ieee754_pow+0x20c>
 80049de:	2e00      	cmp	r6, #0
 80049e0:	f6bf af63 	bge.w	80048aa <__ieee754_pow+0xba>
 80049e4:	a308      	add	r3, pc, #32	; (adr r3, 8004a08 <__ieee754_pow+0x218>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	e794      	b.n	800491a <__ieee754_pow+0x12a>
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <__ieee754_pow+0x23c>)
 80049f2:	429c      	cmp	r4, r3
 80049f4:	ddf3      	ble.n	80049de <__ieee754_pow+0x1ee>
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <__ieee754_pow+0x230>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	dd19      	ble.n	8004a30 <__ieee754_pow+0x240>
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	dcf1      	bgt.n	80049e4 <__ieee754_pow+0x1f4>
 8004a00:	e753      	b.n	80048aa <__ieee754_pow+0xba>
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
 8004a08:	8800759c 	.word	0x8800759c
 8004a0c:	7e37e43c 	.word	0x7e37e43c
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08006e19 	.word	0x08006e19
 8004a18:	433fffff 	.word	0x433fffff
 8004a1c:	3fefffff 	.word	0x3fefffff
 8004a20:	3ff00000 	.word	0x3ff00000
 8004a24:	3fe00000 	.word	0x3fe00000
 8004a28:	41e00000 	.word	0x41e00000
 8004a2c:	3feffffe 	.word	0x3feffffe
 8004a30:	4661      	mov	r1, ip
 8004a32:	2200      	movs	r2, #0
 8004a34:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <__ieee754_pow+0x3c8>)
 8004a36:	4658      	mov	r0, fp
 8004a38:	f7fb fb8e 	bl	8000158 <__aeabi_dsub>
 8004a3c:	a354      	add	r3, pc, #336	; (adr r3, 8004b90 <__ieee754_pow+0x3a0>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	4604      	mov	r4, r0
 8004a44:	460d      	mov	r5, r1
 8004a46:	f7fb fd3f 	bl	80004c8 <__aeabi_dmul>
 8004a4a:	a353      	add	r3, pc, #332	; (adr r3, 8004b98 <__ieee754_pow+0x3a8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fb fd36 	bl	80004c8 <__aeabi_dmul>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4682      	mov	sl, r0
 8004a60:	468b      	mov	fp, r1
 8004a62:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <__ieee754_pow+0x3cc>)
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb fd2e 	bl	80004c8 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	a14b      	add	r1, pc, #300	; (adr r1, 8004ba0 <__ieee754_pow+0x3b0>)
 8004a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a76:	f7fb fb6f 	bl	8000158 <__aeabi_dsub>
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	f7fb fd23 	bl	80004c8 <__aeabi_dmul>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	2000      	movs	r0, #0
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <__ieee754_pow+0x3d0>)
 8004a8a:	f7fb fb65 	bl	8000158 <__aeabi_dsub>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	4680      	mov	r8, r0
 8004a94:	4689      	mov	r9, r1
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fb fd15 	bl	80004c8 <__aeabi_dmul>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	f7fb fd0f 	bl	80004c8 <__aeabi_dmul>
 8004aaa:	a33f      	add	r3, pc, #252	; (adr r3, 8004ba8 <__ieee754_pow+0x3b8>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fd0a 	bl	80004c8 <__aeabi_dmul>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4650      	mov	r0, sl
 8004aba:	4659      	mov	r1, fp
 8004abc:	f7fb fb4c 	bl	8000158 <__aeabi_dsub>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	4630      	mov	r0, r6
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fb fb46 	bl	800015c <__adddf3>
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	468b      	mov	fp, r1
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	463b      	mov	r3, r7
 8004ada:	f7fb fb3d 	bl	8000158 <__aeabi_dsub>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fb37 	bl	8000158 <__aeabi_dsub>
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aee:	3b01      	subs	r3, #1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	4c32      	ldreq	r4, [pc, #200]	; (8004bc4 <__ieee754_pow+0x3d4>)
 8004afa:	4c2f      	ldrne	r4, [pc, #188]	; (8004bb8 <__ieee754_pow+0x3c8>)
 8004afc:	4606      	mov	r6, r0
 8004afe:	e9cd 3400 	strd	r3, r4, [sp]
 8004b02:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b06:	2400      	movs	r4, #0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	f7fb fb21 	bl	8000158 <__aeabi_dsub>
 8004b16:	4652      	mov	r2, sl
 8004b18:	465b      	mov	r3, fp
 8004b1a:	f7fb fcd5 	bl	80004c8 <__aeabi_dmul>
 8004b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b22:	4680      	mov	r8, r0
 8004b24:	4689      	mov	r9, r1
 8004b26:	4630      	mov	r0, r6
 8004b28:	4639      	mov	r1, r7
 8004b2a:	f7fb fccd 	bl	80004c8 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fb11 	bl	800015c <__adddf3>
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	4680      	mov	r8, r0
 8004b40:	4689      	mov	r9, r1
 8004b42:	4650      	mov	r0, sl
 8004b44:	4659      	mov	r1, fp
 8004b46:	f7fb fcbf 	bl	80004c8 <__aeabi_dmul>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	460d      	mov	r5, r1
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4602      	mov	r2, r0
 8004b52:	4649      	mov	r1, r9
 8004b54:	4640      	mov	r0, r8
 8004b56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b5a:	f7fb faff 	bl	800015c <__adddf3>
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <__ieee754_pow+0x3d8>)
 8004b60:	4682      	mov	sl, r0
 8004b62:	4299      	cmp	r1, r3
 8004b64:	460f      	mov	r7, r1
 8004b66:	460e      	mov	r6, r1
 8004b68:	f340 82e1 	ble.w	800512e <__ieee754_pow+0x93e>
 8004b6c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004b70:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004b74:	4303      	orrs	r3, r0
 8004b76:	f000 81db 	beq.w	8004f30 <__ieee754_pow+0x740>
 8004b7a:	a30d      	add	r3, pc, #52	; (adr r3, 8004bb0 <__ieee754_pow+0x3c0>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b84:	f7fb fca0 	bl	80004c8 <__aeabi_dmul>
 8004b88:	a309      	add	r3, pc, #36	; (adr r3, 8004bb0 <__ieee754_pow+0x3c0>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	e6c4      	b.n	800491a <__ieee754_pow+0x12a>
 8004b90:	60000000 	.word	0x60000000
 8004b94:	3ff71547 	.word	0x3ff71547
 8004b98:	f85ddf44 	.word	0xf85ddf44
 8004b9c:	3e54ae0b 	.word	0x3e54ae0b
 8004ba0:	55555555 	.word	0x55555555
 8004ba4:	3fd55555 	.word	0x3fd55555
 8004ba8:	652b82fe 	.word	0x652b82fe
 8004bac:	3ff71547 	.word	0x3ff71547
 8004bb0:	8800759c 	.word	0x8800759c
 8004bb4:	7e37e43c 	.word	0x7e37e43c
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	3fd00000 	.word	0x3fd00000
 8004bc0:	3fe00000 	.word	0x3fe00000
 8004bc4:	bff00000 	.word	0xbff00000
 8004bc8:	408fffff 	.word	0x408fffff
 8004bcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	da08      	bge.n	8004be8 <__ieee754_pow+0x3f8>
 8004bd6:	4658      	mov	r0, fp
 8004bd8:	4bcd      	ldr	r3, [pc, #820]	; (8004f10 <__ieee754_pow+0x720>)
 8004bda:	4661      	mov	r1, ip
 8004bdc:	f7fb fc74 	bl	80004c8 <__aeabi_dmul>
 8004be0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004be4:	4683      	mov	fp, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	1523      	asrs	r3, r4, #20
 8004bea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004bee:	4413      	add	r3, r2
 8004bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8004bf2:	4bc8      	ldr	r3, [pc, #800]	; (8004f14 <__ieee754_pow+0x724>)
 8004bf4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004bf8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c02:	dd08      	ble.n	8004c16 <__ieee754_pow+0x426>
 8004c04:	4bc4      	ldr	r3, [pc, #784]	; (8004f18 <__ieee754_pow+0x728>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	f340 815b 	ble.w	8004ec2 <__ieee754_pow+0x6d2>
 8004c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004c12:	3301      	adds	r3, #1
 8004c14:	930c      	str	r3, [sp, #48]	; 0x30
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	4658      	mov	r0, fp
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4bbf      	ldr	r3, [pc, #764]	; (8004f1c <__ieee754_pow+0x72c>)
 8004c20:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004c24:	444b      	add	r3, r9
 8004c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4623      	mov	r3, r4
 8004c32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c36:	f7fb fa8f 	bl	8000158 <__aeabi_dsub>
 8004c3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460f      	mov	r7, r1
 8004c42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c46:	f7fb fa89 	bl	800015c <__adddf3>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	2000      	movs	r0, #0
 8004c50:	49b3      	ldr	r1, [pc, #716]	; (8004f20 <__ieee754_pow+0x730>)
 8004c52:	f7fb fd63 	bl	800071c <__aeabi_ddiv>
 8004c56:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb fc31 	bl	80004c8 <__aeabi_dmul>
 8004c66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c6a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004c6e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c72:	2300      	movs	r3, #0
 8004c74:	2200      	movs	r2, #0
 8004c76:	106d      	asrs	r5, r5, #1
 8004c78:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004c82:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004c86:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	4614      	mov	r4, r2
 8004c90:	461d      	mov	r5, r3
 8004c92:	f7fb fc19 	bl	80004c8 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	f7fb fa5b 	bl	8000158 <__aeabi_dsub>
 8004ca2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	460f      	mov	r7, r1
 8004caa:	4620      	mov	r0, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	f7fb fa53 	bl	8000158 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cba:	f7fb fa4d 	bl	8000158 <__aeabi_dsub>
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	f7fb fc01 	bl	80004c8 <__aeabi_dmul>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4630      	mov	r0, r6
 8004ccc:	4639      	mov	r1, r7
 8004cce:	f7fb fa43 	bl	8000158 <__aeabi_dsub>
 8004cd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004cd6:	f7fb fbf7 	bl	80004c8 <__aeabi_dmul>
 8004cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f7fb fbef 	bl	80004c8 <__aeabi_dmul>
 8004cea:	a377      	add	r3, pc, #476	; (adr r3, 8004ec8 <__ieee754_pow+0x6d8>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	f7fb fbe8 	bl	80004c8 <__aeabi_dmul>
 8004cf8:	a375      	add	r3, pc, #468	; (adr r3, 8004ed0 <__ieee754_pow+0x6e0>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	f7fb fa2d 	bl	800015c <__adddf3>
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	f7fb fbdf 	bl	80004c8 <__aeabi_dmul>
 8004d0a:	a373      	add	r3, pc, #460	; (adr r3, 8004ed8 <__ieee754_pow+0x6e8>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f7fb fa24 	bl	800015c <__adddf3>
 8004d14:	4622      	mov	r2, r4
 8004d16:	462b      	mov	r3, r5
 8004d18:	f7fb fbd6 	bl	80004c8 <__aeabi_dmul>
 8004d1c:	a370      	add	r3, pc, #448	; (adr r3, 8004ee0 <__ieee754_pow+0x6f0>)
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	f7fb fa1b 	bl	800015c <__adddf3>
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f7fb fbcd 	bl	80004c8 <__aeabi_dmul>
 8004d2e:	a36e      	add	r3, pc, #440	; (adr r3, 8004ee8 <__ieee754_pow+0x6f8>)
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f7fb fa12 	bl	800015c <__adddf3>
 8004d38:	4622      	mov	r2, r4
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	f7fb fbc4 	bl	80004c8 <__aeabi_dmul>
 8004d40:	a36b      	add	r3, pc, #428	; (adr r3, 8004ef0 <__ieee754_pow+0x700>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f7fb fa09 	bl	800015c <__adddf3>
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	460f      	mov	r7, r1
 8004d50:	462b      	mov	r3, r5
 8004d52:	4620      	mov	r0, r4
 8004d54:	4629      	mov	r1, r5
 8004d56:	f7fb fbb7 	bl	80004c8 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb fbb1 	bl	80004c8 <__aeabi_dmul>
 8004d66:	4604      	mov	r4, r0
 8004d68:	460d      	mov	r5, r1
 8004d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6e:	4652      	mov	r2, sl
 8004d70:	465b      	mov	r3, fp
 8004d72:	f7fb f9f3 	bl	800015c <__adddf3>
 8004d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d7a:	f7fb fba5 	bl	80004c8 <__aeabi_dmul>
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	f7fb f9eb 	bl	800015c <__adddf3>
 8004d86:	4652      	mov	r2, sl
 8004d88:	4606      	mov	r6, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	465b      	mov	r3, fp
 8004d8e:	4650      	mov	r0, sl
 8004d90:	4659      	mov	r1, fp
 8004d92:	f7fb fb99 	bl	80004c8 <__aeabi_dmul>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b62      	ldr	r3, [pc, #392]	; (8004f24 <__ieee754_pow+0x734>)
 8004d9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d9e:	f7fb f9dd 	bl	800015c <__adddf3>
 8004da2:	4632      	mov	r2, r6
 8004da4:	463b      	mov	r3, r7
 8004da6:	f7fb f9d9 	bl	800015c <__adddf3>
 8004daa:	9804      	ldr	r0, [sp, #16]
 8004dac:	460d      	mov	r5, r1
 8004dae:	4604      	mov	r4, r0
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	f7fb fb86 	bl	80004c8 <__aeabi_dmul>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4682      	mov	sl, r0
 8004dc0:	468b      	mov	fp, r1
 8004dc2:	4b58      	ldr	r3, [pc, #352]	; (8004f24 <__ieee754_pow+0x734>)
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb f9c6 	bl	8000158 <__aeabi_dsub>
 8004dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dd0:	f7fb f9c2 	bl	8000158 <__aeabi_dsub>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb f9bc 	bl	8000158 <__aeabi_dsub>
 8004de0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004de4:	f7fb fb70 	bl	80004c8 <__aeabi_dmul>
 8004de8:	4622      	mov	r2, r4
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004df2:	462b      	mov	r3, r5
 8004df4:	f7fb fb68 	bl	80004c8 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb f9ac 	bl	800015c <__adddf3>
 8004e04:	4606      	mov	r6, r0
 8004e06:	460f      	mov	r7, r1
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	4659      	mov	r1, fp
 8004e10:	f7fb f9a4 	bl	800015c <__adddf3>
 8004e14:	a338      	add	r3, pc, #224	; (adr r3, 8004ef8 <__ieee754_pow+0x708>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	9804      	ldr	r0, [sp, #16]
 8004e1c:	460d      	mov	r5, r1
 8004e1e:	4604      	mov	r4, r0
 8004e20:	f7fb fb52 	bl	80004c8 <__aeabi_dmul>
 8004e24:	4652      	mov	r2, sl
 8004e26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e2a:	465b      	mov	r3, fp
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f7fb f992 	bl	8000158 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb f98c 	bl	8000158 <__aeabi_dsub>
 8004e40:	a32f      	add	r3, pc, #188	; (adr r3, 8004f00 <__ieee754_pow+0x710>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb fb3f 	bl	80004c8 <__aeabi_dmul>
 8004e4a:	a32f      	add	r3, pc, #188	; (adr r3, 8004f08 <__ieee754_pow+0x718>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	4606      	mov	r6, r0
 8004e52:	460f      	mov	r7, r1
 8004e54:	4620      	mov	r0, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	f7fb fb36 	bl	80004c8 <__aeabi_dmul>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4630      	mov	r0, r6
 8004e62:	4639      	mov	r1, r7
 8004e64:	f7fb f97a 	bl	800015c <__adddf3>
 8004e68:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <__ieee754_pow+0x738>)
 8004e6a:	444b      	add	r3, r9
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb f974 	bl	800015c <__adddf3>
 8004e74:	4604      	mov	r4, r0
 8004e76:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e78:	460d      	mov	r5, r1
 8004e7a:	f7fb fabb 	bl	80003f4 <__aeabi_i2d>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	460f      	mov	r7, r1
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <__ieee754_pow+0x73c>)
 8004e84:	4622      	mov	r2, r4
 8004e86:	444b      	add	r3, r9
 8004e88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e92:	f7fb f963 	bl	800015c <__adddf3>
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	f7fb f95f 	bl	800015c <__adddf3>
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	f7fb f95b 	bl	800015c <__adddf3>
 8004ea6:	9804      	ldr	r0, [sp, #16]
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4682      	mov	sl, r0
 8004eae:	468b      	mov	fp, r1
 8004eb0:	f7fb f952 	bl	8000158 <__aeabi_dsub>
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	f7fb f94e 	bl	8000158 <__aeabi_dsub>
 8004ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ec0:	e60b      	b.n	8004ada <__ieee754_pow+0x2ea>
 8004ec2:	f04f 0801 	mov.w	r8, #1
 8004ec6:	e6a8      	b.n	8004c1a <__ieee754_pow+0x42a>
 8004ec8:	4a454eef 	.word	0x4a454eef
 8004ecc:	3fca7e28 	.word	0x3fca7e28
 8004ed0:	93c9db65 	.word	0x93c9db65
 8004ed4:	3fcd864a 	.word	0x3fcd864a
 8004ed8:	a91d4101 	.word	0xa91d4101
 8004edc:	3fd17460 	.word	0x3fd17460
 8004ee0:	518f264d 	.word	0x518f264d
 8004ee4:	3fd55555 	.word	0x3fd55555
 8004ee8:	db6fabff 	.word	0xdb6fabff
 8004eec:	3fdb6db6 	.word	0x3fdb6db6
 8004ef0:	33333303 	.word	0x33333303
 8004ef4:	3fe33333 	.word	0x3fe33333
 8004ef8:	e0000000 	.word	0xe0000000
 8004efc:	3feec709 	.word	0x3feec709
 8004f00:	dc3a03fd 	.word	0xdc3a03fd
 8004f04:	3feec709 	.word	0x3feec709
 8004f08:	145b01f5 	.word	0x145b01f5
 8004f0c:	be3e2fe0 	.word	0xbe3e2fe0
 8004f10:	43400000 	.word	0x43400000
 8004f14:	0003988e 	.word	0x0003988e
 8004f18:	000bb679 	.word	0x000bb679
 8004f1c:	08006e58 	.word	0x08006e58
 8004f20:	3ff00000 	.word	0x3ff00000
 8004f24:	40080000 	.word	0x40080000
 8004f28:	08006e78 	.word	0x08006e78
 8004f2c:	08006e68 	.word	0x08006e68
 8004f30:	a39b      	add	r3, pc, #620	; (adr r3, 80051a0 <__ieee754_pow+0x9b0>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb f90f 	bl	800015c <__adddf3>
 8004f3e:	4622      	mov	r2, r4
 8004f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f44:	462b      	mov	r3, r5
 8004f46:	4650      	mov	r0, sl
 8004f48:	4639      	mov	r1, r7
 8004f4a:	f7fb f905 	bl	8000158 <__aeabi_dsub>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f56:	f7fb fd47 	bl	80009e8 <__aeabi_dcmpgt>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f47f ae0d 	bne.w	8004b7a <__ieee754_pow+0x38a>
 8004f60:	4aa3      	ldr	r2, [pc, #652]	; (80051f0 <__ieee754_pow+0xa00>)
 8004f62:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004f66:	4293      	cmp	r3, r2
 8004f68:	f340 8103 	ble.w	8005172 <__ieee754_pow+0x982>
 8004f6c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004f70:	2000      	movs	r0, #0
 8004f72:	151b      	asrs	r3, r3, #20
 8004f74:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004f78:	fa4a f303 	asr.w	r3, sl, r3
 8004f7c:	4433      	add	r3, r6
 8004f7e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004f82:	4f9c      	ldr	r7, [pc, #624]	; (80051f4 <__ieee754_pow+0xa04>)
 8004f84:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004f88:	4117      	asrs	r7, r2
 8004f8a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004f8e:	ea23 0107 	bic.w	r1, r3, r7
 8004f92:	f1c2 0214 	rsb	r2, r2, #20
 8004f96:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f9a:	fa4a fa02 	asr.w	sl, sl, r2
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	bfb8      	it	lt
 8004faa:	f1ca 0a00 	rsblt	sl, sl, #0
 8004fae:	f7fb f8d3 	bl	8000158 <__aeabi_dsub>
 8004fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	f7fb f8cd 	bl	800015c <__adddf3>
 8004fc2:	a379      	add	r3, pc, #484	; (adr r3, 80051a8 <__ieee754_pow+0x9b8>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	2000      	movs	r0, #0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	4604      	mov	r4, r0
 8004fce:	f7fb fa7b 	bl	80004c8 <__aeabi_dmul>
 8004fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	460f      	mov	r7, r1
 8004fda:	4620      	mov	r0, r4
 8004fdc:	4629      	mov	r1, r5
 8004fde:	f7fb f8bb 	bl	8000158 <__aeabi_dsub>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4649      	mov	r1, r9
 8004fea:	f7fb f8b5 	bl	8000158 <__aeabi_dsub>
 8004fee:	a370      	add	r3, pc, #448	; (adr r3, 80051b0 <__ieee754_pow+0x9c0>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fa68 	bl	80004c8 <__aeabi_dmul>
 8004ff8:	a36f      	add	r3, pc, #444	; (adr r3, 80051b8 <__ieee754_pow+0x9c8>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	4680      	mov	r8, r0
 8005000:	4689      	mov	r9, r1
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fa5f 	bl	80004c8 <__aeabi_dmul>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f7fb f8a3 	bl	800015c <__adddf3>
 8005016:	4604      	mov	r4, r0
 8005018:	460d      	mov	r5, r1
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4630      	mov	r0, r6
 8005020:	4639      	mov	r1, r7
 8005022:	f7fb f89b 	bl	800015c <__adddf3>
 8005026:	4632      	mov	r2, r6
 8005028:	463b      	mov	r3, r7
 800502a:	4680      	mov	r8, r0
 800502c:	4689      	mov	r9, r1
 800502e:	f7fb f893 	bl	8000158 <__aeabi_dsub>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb f88d 	bl	8000158 <__aeabi_dsub>
 800503e:	4642      	mov	r2, r8
 8005040:	4606      	mov	r6, r0
 8005042:	460f      	mov	r7, r1
 8005044:	464b      	mov	r3, r9
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fa3d 	bl	80004c8 <__aeabi_dmul>
 800504e:	a35c      	add	r3, pc, #368	; (adr r3, 80051c0 <__ieee754_pow+0x9d0>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	4604      	mov	r4, r0
 8005056:	460d      	mov	r5, r1
 8005058:	f7fb fa36 	bl	80004c8 <__aeabi_dmul>
 800505c:	a35a      	add	r3, pc, #360	; (adr r3, 80051c8 <__ieee754_pow+0x9d8>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb f879 	bl	8000158 <__aeabi_dsub>
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	f7fb fa2d 	bl	80004c8 <__aeabi_dmul>
 800506e:	a358      	add	r3, pc, #352	; (adr r3, 80051d0 <__ieee754_pow+0x9e0>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb f872 	bl	800015c <__adddf3>
 8005078:	4622      	mov	r2, r4
 800507a:	462b      	mov	r3, r5
 800507c:	f7fb fa24 	bl	80004c8 <__aeabi_dmul>
 8005080:	a355      	add	r3, pc, #340	; (adr r3, 80051d8 <__ieee754_pow+0x9e8>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb f867 	bl	8000158 <__aeabi_dsub>
 800508a:	4622      	mov	r2, r4
 800508c:	462b      	mov	r3, r5
 800508e:	f7fb fa1b 	bl	80004c8 <__aeabi_dmul>
 8005092:	a353      	add	r3, pc, #332	; (adr r3, 80051e0 <__ieee754_pow+0x9f0>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb f860 	bl	800015c <__adddf3>
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f7fb fa12 	bl	80004c8 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb f854 	bl	8000158 <__aeabi_dsub>
 80050b0:	4604      	mov	r4, r0
 80050b2:	460d      	mov	r5, r1
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fa04 	bl	80004c8 <__aeabi_dmul>
 80050c0:	2200      	movs	r2, #0
 80050c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb f843 	bl	8000158 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050da:	f7fb fb1f 	bl	800071c <__aeabi_ddiv>
 80050de:	4632      	mov	r2, r6
 80050e0:	4604      	mov	r4, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	463b      	mov	r3, r7
 80050e6:	4640      	mov	r0, r8
 80050e8:	4649      	mov	r1, r9
 80050ea:	f7fb f9ed 	bl	80004c8 <__aeabi_dmul>
 80050ee:	4632      	mov	r2, r6
 80050f0:	463b      	mov	r3, r7
 80050f2:	f7fb f833 	bl	800015c <__adddf3>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb f82b 	bl	8000158 <__aeabi_dsub>
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	f7fb f827 	bl	8000158 <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	2000      	movs	r0, #0
 8005110:	4939      	ldr	r1, [pc, #228]	; (80051f8 <__ieee754_pow+0xa08>)
 8005112:	f7fb f821 	bl	8000158 <__aeabi_dsub>
 8005116:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800511a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800511e:	da2b      	bge.n	8005178 <__ieee754_pow+0x988>
 8005120:	4652      	mov	r2, sl
 8005122:	f000 f9b9 	bl	8005498 <scalbn>
 8005126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800512a:	f7ff bbf6 	b.w	800491a <__ieee754_pow+0x12a>
 800512e:	4b33      	ldr	r3, [pc, #204]	; (80051fc <__ieee754_pow+0xa0c>)
 8005130:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005134:	429f      	cmp	r7, r3
 8005136:	f77f af13 	ble.w	8004f60 <__ieee754_pow+0x770>
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <__ieee754_pow+0xa10>)
 800513c:	440b      	add	r3, r1
 800513e:	4303      	orrs	r3, r0
 8005140:	d00b      	beq.n	800515a <__ieee754_pow+0x96a>
 8005142:	a329      	add	r3, pc, #164	; (adr r3, 80051e8 <__ieee754_pow+0x9f8>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800514c:	f7fb f9bc 	bl	80004c8 <__aeabi_dmul>
 8005150:	a325      	add	r3, pc, #148	; (adr r3, 80051e8 <__ieee754_pow+0x9f8>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f7ff bbe0 	b.w	800491a <__ieee754_pow+0x12a>
 800515a:	4622      	mov	r2, r4
 800515c:	462b      	mov	r3, r5
 800515e:	f7fa fffb 	bl	8000158 <__aeabi_dsub>
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	f7fb fc35 	bl	80009d4 <__aeabi_dcmpge>
 800516a:	2800      	cmp	r0, #0
 800516c:	f43f aef8 	beq.w	8004f60 <__ieee754_pow+0x770>
 8005170:	e7e7      	b.n	8005142 <__ieee754_pow+0x952>
 8005172:	f04f 0a00 	mov.w	sl, #0
 8005176:	e71e      	b.n	8004fb6 <__ieee754_pow+0x7c6>
 8005178:	4621      	mov	r1, r4
 800517a:	e7d4      	b.n	8005126 <__ieee754_pow+0x936>
 800517c:	f04f 0b00 	mov.w	fp, #0
 8005180:	f8df c074 	ldr.w	ip, [pc, #116]	; 80051f8 <__ieee754_pow+0xa08>
 8005184:	f7ff bb95 	b.w	80048b2 <__ieee754_pow+0xc2>
 8005188:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800518c:	f7ff bb91 	b.w	80048b2 <__ieee754_pow+0xc2>
 8005190:	4638      	mov	r0, r7
 8005192:	4641      	mov	r1, r8
 8005194:	f7ff bbc3 	b.w	800491e <__ieee754_pow+0x12e>
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	f7ff bb9f 	b.w	80048dc <__ieee754_pow+0xec>
 800519e:	bf00      	nop
 80051a0:	652b82fe 	.word	0x652b82fe
 80051a4:	3c971547 	.word	0x3c971547
 80051a8:	00000000 	.word	0x00000000
 80051ac:	3fe62e43 	.word	0x3fe62e43
 80051b0:	fefa39ef 	.word	0xfefa39ef
 80051b4:	3fe62e42 	.word	0x3fe62e42
 80051b8:	0ca86c39 	.word	0x0ca86c39
 80051bc:	be205c61 	.word	0xbe205c61
 80051c0:	72bea4d0 	.word	0x72bea4d0
 80051c4:	3e663769 	.word	0x3e663769
 80051c8:	c5d26bf1 	.word	0xc5d26bf1
 80051cc:	3ebbbd41 	.word	0x3ebbbd41
 80051d0:	af25de2c 	.word	0xaf25de2c
 80051d4:	3f11566a 	.word	0x3f11566a
 80051d8:	16bebd93 	.word	0x16bebd93
 80051dc:	3f66c16c 	.word	0x3f66c16c
 80051e0:	5555553e 	.word	0x5555553e
 80051e4:	3fc55555 	.word	0x3fc55555
 80051e8:	c2f8f359 	.word	0xc2f8f359
 80051ec:	01a56e1f 	.word	0x01a56e1f
 80051f0:	3fe00000 	.word	0x3fe00000
 80051f4:	000fffff 	.word	0x000fffff
 80051f8:	3ff00000 	.word	0x3ff00000
 80051fc:	4090cbff 	.word	0x4090cbff
 8005200:	3f6f3400 	.word	0x3f6f3400

08005204 <__ieee754_sqrt>:
 8005204:	4b54      	ldr	r3, [pc, #336]	; (8005358 <__ieee754_sqrt+0x154>)
 8005206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520a:	438b      	bics	r3, r1
 800520c:	4606      	mov	r6, r0
 800520e:	460d      	mov	r5, r1
 8005210:	460a      	mov	r2, r1
 8005212:	460c      	mov	r4, r1
 8005214:	d10f      	bne.n	8005236 <__ieee754_sqrt+0x32>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	f7fb f955 	bl	80004c8 <__aeabi_dmul>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4630      	mov	r0, r6
 8005224:	4629      	mov	r1, r5
 8005226:	f7fa ff99 	bl	800015c <__adddf3>
 800522a:	4606      	mov	r6, r0
 800522c:	460d      	mov	r5, r1
 800522e:	4630      	mov	r0, r6
 8005230:	4629      	mov	r1, r5
 8005232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005236:	2900      	cmp	r1, #0
 8005238:	4607      	mov	r7, r0
 800523a:	4603      	mov	r3, r0
 800523c:	dc0e      	bgt.n	800525c <__ieee754_sqrt+0x58>
 800523e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005242:	ea5c 0707 	orrs.w	r7, ip, r7
 8005246:	d0f2      	beq.n	800522e <__ieee754_sqrt+0x2a>
 8005248:	b141      	cbz	r1, 800525c <__ieee754_sqrt+0x58>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	f7fa ff83 	bl	8000158 <__aeabi_dsub>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	f7fb fa61 	bl	800071c <__aeabi_ddiv>
 800525a:	e7e6      	b.n	800522a <__ieee754_sqrt+0x26>
 800525c:	1512      	asrs	r2, r2, #20
 800525e:	d074      	beq.n	800534a <__ieee754_sqrt+0x146>
 8005260:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005264:	07d5      	lsls	r5, r2, #31
 8005266:	f04f 0500 	mov.w	r5, #0
 800526a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800526e:	bf48      	it	mi
 8005270:	0fd9      	lsrmi	r1, r3, #31
 8005272:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005276:	bf44      	itt	mi
 8005278:	005b      	lslmi	r3, r3, #1
 800527a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800527e:	1051      	asrs	r1, r2, #1
 8005280:	0fda      	lsrs	r2, r3, #31
 8005282:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005286:	4628      	mov	r0, r5
 8005288:	2216      	movs	r2, #22
 800528a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	1987      	adds	r7, r0, r6
 8005292:	42a7      	cmp	r7, r4
 8005294:	bfde      	ittt	le
 8005296:	19b8      	addle	r0, r7, r6
 8005298:	1be4      	suble	r4, r4, r7
 800529a:	19ad      	addle	r5, r5, r6
 800529c:	0fdf      	lsrs	r7, r3, #31
 800529e:	3a01      	subs	r2, #1
 80052a0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80052a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80052ac:	d1f0      	bne.n	8005290 <__ieee754_sqrt+0x8c>
 80052ae:	f04f 0c20 	mov.w	ip, #32
 80052b2:	4696      	mov	lr, r2
 80052b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80052b8:	4284      	cmp	r4, r0
 80052ba:	eb06 070e 	add.w	r7, r6, lr
 80052be:	dc02      	bgt.n	80052c6 <__ieee754_sqrt+0xc2>
 80052c0:	d112      	bne.n	80052e8 <__ieee754_sqrt+0xe4>
 80052c2:	429f      	cmp	r7, r3
 80052c4:	d810      	bhi.n	80052e8 <__ieee754_sqrt+0xe4>
 80052c6:	2f00      	cmp	r7, #0
 80052c8:	eb07 0e06 	add.w	lr, r7, r6
 80052cc:	da42      	bge.n	8005354 <__ieee754_sqrt+0x150>
 80052ce:	f1be 0f00 	cmp.w	lr, #0
 80052d2:	db3f      	blt.n	8005354 <__ieee754_sqrt+0x150>
 80052d4:	f100 0801 	add.w	r8, r0, #1
 80052d8:	1a24      	subs	r4, r4, r0
 80052da:	4640      	mov	r0, r8
 80052dc:	429f      	cmp	r7, r3
 80052de:	bf88      	it	hi
 80052e0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80052e4:	1bdb      	subs	r3, r3, r7
 80052e6:	4432      	add	r2, r6
 80052e8:	0064      	lsls	r4, r4, #1
 80052ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80052ee:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80052f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80052f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052fa:	d1dd      	bne.n	80052b8 <__ieee754_sqrt+0xb4>
 80052fc:	4323      	orrs	r3, r4
 80052fe:	d006      	beq.n	800530e <__ieee754_sqrt+0x10a>
 8005300:	1c54      	adds	r4, r2, #1
 8005302:	bf0b      	itete	eq
 8005304:	4662      	moveq	r2, ip
 8005306:	3201      	addne	r2, #1
 8005308:	3501      	addeq	r5, #1
 800530a:	f022 0201 	bicne.w	r2, r2, #1
 800530e:	106b      	asrs	r3, r5, #1
 8005310:	0852      	lsrs	r2, r2, #1
 8005312:	07e8      	lsls	r0, r5, #31
 8005314:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005318:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800531c:	bf48      	it	mi
 800531e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005322:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005326:	4616      	mov	r6, r2
 8005328:	e781      	b.n	800522e <__ieee754_sqrt+0x2a>
 800532a:	0adc      	lsrs	r4, r3, #11
 800532c:	3915      	subs	r1, #21
 800532e:	055b      	lsls	r3, r3, #21
 8005330:	2c00      	cmp	r4, #0
 8005332:	d0fa      	beq.n	800532a <__ieee754_sqrt+0x126>
 8005334:	02e6      	lsls	r6, r4, #11
 8005336:	d50a      	bpl.n	800534e <__ieee754_sqrt+0x14a>
 8005338:	f1c2 0020 	rsb	r0, r2, #32
 800533c:	fa23 f000 	lsr.w	r0, r3, r0
 8005340:	1e55      	subs	r5, r2, #1
 8005342:	4093      	lsls	r3, r2
 8005344:	4304      	orrs	r4, r0
 8005346:	1b4a      	subs	r2, r1, r5
 8005348:	e78a      	b.n	8005260 <__ieee754_sqrt+0x5c>
 800534a:	4611      	mov	r1, r2
 800534c:	e7f0      	b.n	8005330 <__ieee754_sqrt+0x12c>
 800534e:	0064      	lsls	r4, r4, #1
 8005350:	3201      	adds	r2, #1
 8005352:	e7ef      	b.n	8005334 <__ieee754_sqrt+0x130>
 8005354:	4680      	mov	r8, r0
 8005356:	e7bf      	b.n	80052d8 <__ieee754_sqrt+0xd4>
 8005358:	7ff00000 	.word	0x7ff00000

0800535c <fabs>:
 800535c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005360:	4619      	mov	r1, r3
 8005362:	4770      	bx	lr

08005364 <finite>:
 8005364:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005368:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800536c:	0fc0      	lsrs	r0, r0, #31
 800536e:	4770      	bx	lr

08005370 <matherr>:
 8005370:	2000      	movs	r0, #0
 8005372:	4770      	bx	lr

08005374 <nan>:
 8005374:	2000      	movs	r0, #0
 8005376:	4901      	ldr	r1, [pc, #4]	; (800537c <nan+0x8>)
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	7ff80000 	.word	0x7ff80000

08005380 <rint>:
 8005380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005386:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800538a:	f1bc 0f13 	cmp.w	ip, #19
 800538e:	4604      	mov	r4, r0
 8005390:	460d      	mov	r5, r1
 8005392:	460b      	mov	r3, r1
 8005394:	4606      	mov	r6, r0
 8005396:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800539a:	dc5a      	bgt.n	8005452 <rint+0xd2>
 800539c:	f1bc 0f00 	cmp.w	ip, #0
 80053a0:	da2b      	bge.n	80053fa <rint+0x7a>
 80053a2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80053a6:	4302      	orrs	r2, r0
 80053a8:	d023      	beq.n	80053f2 <rint+0x72>
 80053aa:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80053ae:	4302      	orrs	r2, r0
 80053b0:	4256      	negs	r6, r2
 80053b2:	4316      	orrs	r6, r2
 80053b4:	0c4b      	lsrs	r3, r1, #17
 80053b6:	0b36      	lsrs	r6, r6, #12
 80053b8:	4934      	ldr	r1, [pc, #208]	; (800548c <rint+0x10c>)
 80053ba:	045b      	lsls	r3, r3, #17
 80053bc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80053c0:	ea46 0503 	orr.w	r5, r6, r3
 80053c4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80053c8:	4602      	mov	r2, r0
 80053ca:	462b      	mov	r3, r5
 80053cc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa fec2 	bl	800015c <__adddf3>
 80053d8:	e9cd 0100 	strd	r0, r1, [sp]
 80053dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053e0:	462b      	mov	r3, r5
 80053e2:	4622      	mov	r2, r4
 80053e4:	f7fa feb8 	bl	8000158 <__aeabi_dsub>
 80053e8:	4604      	mov	r4, r0
 80053ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053ee:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	b003      	add	sp, #12
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fa:	4a25      	ldr	r2, [pc, #148]	; (8005490 <rint+0x110>)
 80053fc:	fa42 f20c 	asr.w	r2, r2, ip
 8005400:	4011      	ands	r1, r2
 8005402:	4301      	orrs	r1, r0
 8005404:	d0f5      	beq.n	80053f2 <rint+0x72>
 8005406:	0852      	lsrs	r2, r2, #1
 8005408:	ea05 0102 	and.w	r1, r5, r2
 800540c:	ea50 0601 	orrs.w	r6, r0, r1
 8005410:	d00c      	beq.n	800542c <rint+0xac>
 8005412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005416:	f1bc 0f13 	cmp.w	ip, #19
 800541a:	bf0c      	ite	eq
 800541c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005420:	2600      	movne	r6, #0
 8005422:	ea25 0202 	bic.w	r2, r5, r2
 8005426:	fa43 f30c 	asr.w	r3, r3, ip
 800542a:	4313      	orrs	r3, r2
 800542c:	4917      	ldr	r1, [pc, #92]	; (800548c <rint+0x10c>)
 800542e:	4632      	mov	r2, r6
 8005430:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005434:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005438:	4620      	mov	r0, r4
 800543a:	4629      	mov	r1, r5
 800543c:	f7fa fe8e 	bl	800015c <__adddf3>
 8005440:	e9cd 0100 	strd	r0, r1, [sp]
 8005444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005448:	4622      	mov	r2, r4
 800544a:	462b      	mov	r3, r5
 800544c:	f7fa fe84 	bl	8000158 <__aeabi_dsub>
 8005450:	e008      	b.n	8005464 <rint+0xe4>
 8005452:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005456:	dd08      	ble.n	800546a <rint+0xea>
 8005458:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800545c:	d1c9      	bne.n	80053f2 <rint+0x72>
 800545e:	4602      	mov	r2, r0
 8005460:	f7fa fe7c 	bl	800015c <__adddf3>
 8005464:	4604      	mov	r4, r0
 8005466:	460d      	mov	r5, r1
 8005468:	e7c3      	b.n	80053f2 <rint+0x72>
 800546a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	40ca      	lsrs	r2, r1
 8005474:	4210      	tst	r0, r2
 8005476:	d0bc      	beq.n	80053f2 <rint+0x72>
 8005478:	0852      	lsrs	r2, r2, #1
 800547a:	4210      	tst	r0, r2
 800547c:	bf1f      	itttt	ne
 800547e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005482:	ea20 0202 	bicne.w	r2, r0, r2
 8005486:	410e      	asrne	r6, r1
 8005488:	4316      	orrne	r6, r2
 800548a:	e7cf      	b.n	800542c <rint+0xac>
 800548c:	08006e88 	.word	0x08006e88
 8005490:	000fffff 	.word	0x000fffff
 8005494:	00000000 	.word	0x00000000

08005498 <scalbn>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	4616      	mov	r6, r2
 800549c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80054a0:	4604      	mov	r4, r0
 80054a2:	460d      	mov	r5, r1
 80054a4:	460b      	mov	r3, r1
 80054a6:	b982      	cbnz	r2, 80054ca <scalbn+0x32>
 80054a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054ac:	4303      	orrs	r3, r0
 80054ae:	d034      	beq.n	800551a <scalbn+0x82>
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <scalbn+0xd0>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	f7fb f808 	bl	80004c8 <__aeabi_dmul>
 80054b8:	4b2c      	ldr	r3, [pc, #176]	; (800556c <scalbn+0xd4>)
 80054ba:	4604      	mov	r4, r0
 80054bc:	429e      	cmp	r6, r3
 80054be:	460d      	mov	r5, r1
 80054c0:	da0d      	bge.n	80054de <scalbn+0x46>
 80054c2:	a325      	add	r3, pc, #148	; (adr r3, 8005558 <scalbn+0xc0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	e01c      	b.n	8005504 <scalbn+0x6c>
 80054ca:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80054ce:	42ba      	cmp	r2, r7
 80054d0:	d109      	bne.n	80054e6 <scalbn+0x4e>
 80054d2:	4602      	mov	r2, r0
 80054d4:	f7fa fe42 	bl	800015c <__adddf3>
 80054d8:	4604      	mov	r4, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	e01d      	b.n	800551a <scalbn+0x82>
 80054de:	460b      	mov	r3, r1
 80054e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80054e4:	3a36      	subs	r2, #54	; 0x36
 80054e6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80054ea:	4432      	add	r2, r6
 80054ec:	428a      	cmp	r2, r1
 80054ee:	dd0c      	ble.n	800550a <scalbn+0x72>
 80054f0:	4622      	mov	r2, r4
 80054f2:	462b      	mov	r3, r5
 80054f4:	a11a      	add	r1, pc, #104	; (adr r1, 8005560 <scalbn+0xc8>)
 80054f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054fa:	f000 f9ef 	bl	80058dc <copysign>
 80054fe:	a318      	add	r3, pc, #96	; (adr r3, 8005560 <scalbn+0xc8>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fa ffe0 	bl	80004c8 <__aeabi_dmul>
 8005508:	e7e6      	b.n	80054d8 <scalbn+0x40>
 800550a:	2a00      	cmp	r2, #0
 800550c:	dd08      	ble.n	8005520 <scalbn+0x88>
 800550e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005512:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005516:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800551a:	4620      	mov	r0, r4
 800551c:	4629      	mov	r1, r5
 800551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005520:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005524:	da0b      	bge.n	800553e <scalbn+0xa6>
 8005526:	f24c 3350 	movw	r3, #50000	; 0xc350
 800552a:	429e      	cmp	r6, r3
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	dce0      	bgt.n	80054f4 <scalbn+0x5c>
 8005532:	a109      	add	r1, pc, #36	; (adr r1, 8005558 <scalbn+0xc0>)
 8005534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005538:	f000 f9d0 	bl	80058dc <copysign>
 800553c:	e7c1      	b.n	80054c2 <scalbn+0x2a>
 800553e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005542:	3236      	adds	r2, #54	; 0x36
 8005544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005548:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800554c:	4620      	mov	r0, r4
 800554e:	4629      	mov	r1, r5
 8005550:	2200      	movs	r2, #0
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <scalbn+0xd8>)
 8005554:	e7d6      	b.n	8005504 <scalbn+0x6c>
 8005556:	bf00      	nop
 8005558:	c2f8f359 	.word	0xc2f8f359
 800555c:	01a56e1f 	.word	0x01a56e1f
 8005560:	8800759c 	.word	0x8800759c
 8005564:	7e37e43c 	.word	0x7e37e43c
 8005568:	43500000 	.word	0x43500000
 800556c:	ffff3cb0 	.word	0xffff3cb0
 8005570:	3c900000 	.word	0x3c900000
 8005574:	00000000 	.word	0x00000000

08005578 <__ieee754_log>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005580:	b087      	sub	sp, #28
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	460d      	mov	r5, r1
 8005588:	da24      	bge.n	80055d4 <__ieee754_log+0x5c>
 800558a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800558e:	4304      	orrs	r4, r0
 8005590:	d108      	bne.n	80055a4 <__ieee754_log+0x2c>
 8005592:	2200      	movs	r2, #0
 8005594:	2300      	movs	r3, #0
 8005596:	2000      	movs	r0, #0
 8005598:	49cb      	ldr	r1, [pc, #812]	; (80058c8 <__ieee754_log+0x350>)
 800559a:	f7fb f8bf 	bl	800071c <__aeabi_ddiv>
 800559e:	b007      	add	sp, #28
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	2900      	cmp	r1, #0
 80055a6:	da04      	bge.n	80055b2 <__ieee754_log+0x3a>
 80055a8:	f7fa fdd6 	bl	8000158 <__aeabi_dsub>
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	e7f3      	b.n	800559a <__ieee754_log+0x22>
 80055b2:	2200      	movs	r2, #0
 80055b4:	4bc5      	ldr	r3, [pc, #788]	; (80058cc <__ieee754_log+0x354>)
 80055b6:	f7fa ff87 	bl	80004c8 <__aeabi_dmul>
 80055ba:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	460d      	mov	r5, r1
 80055c4:	49c2      	ldr	r1, [pc, #776]	; (80058d0 <__ieee754_log+0x358>)
 80055c6:	428d      	cmp	r5, r1
 80055c8:	dd06      	ble.n	80055d8 <__ieee754_log+0x60>
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fa fdc5 	bl	800015c <__adddf3>
 80055d2:	e7e4      	b.n	800559e <__ieee754_log+0x26>
 80055d4:	2600      	movs	r6, #0
 80055d6:	e7f5      	b.n	80055c4 <__ieee754_log+0x4c>
 80055d8:	152c      	asrs	r4, r5, #20
 80055da:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80055de:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80055e2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80055e6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80055ea:	4426      	add	r6, r4
 80055ec:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80055f0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80055f4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80055f8:	ea41 0305 	orr.w	r3, r1, r5
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	2200      	movs	r2, #0
 8005602:	4bb4      	ldr	r3, [pc, #720]	; (80058d4 <__ieee754_log+0x35c>)
 8005604:	f7fa fda8 	bl	8000158 <__aeabi_dsub>
 8005608:	1cab      	adds	r3, r5, #2
 800560a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800560e:	2b02      	cmp	r3, #2
 8005610:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8005614:	4682      	mov	sl, r0
 8005616:	468b      	mov	fp, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	dc53      	bgt.n	80056c6 <__ieee754_log+0x14e>
 800561e:	2300      	movs	r3, #0
 8005620:	f7fb f9ba 	bl	8000998 <__aeabi_dcmpeq>
 8005624:	b1d0      	cbz	r0, 800565c <__ieee754_log+0xe4>
 8005626:	2c00      	cmp	r4, #0
 8005628:	f000 8120 	beq.w	800586c <__ieee754_log+0x2f4>
 800562c:	4620      	mov	r0, r4
 800562e:	f7fa fee1 	bl	80003f4 <__aeabi_i2d>
 8005632:	a391      	add	r3, pc, #580	; (adr r3, 8005878 <__ieee754_log+0x300>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	4606      	mov	r6, r0
 800563a:	460f      	mov	r7, r1
 800563c:	f7fa ff44 	bl	80004c8 <__aeabi_dmul>
 8005640:	a38f      	add	r3, pc, #572	; (adr r3, 8005880 <__ieee754_log+0x308>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	4604      	mov	r4, r0
 8005648:	460d      	mov	r5, r1
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	f7fa ff3b 	bl	80004c8 <__aeabi_dmul>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	e7b8      	b.n	80055ce <__ieee754_log+0x56>
 800565c:	a38a      	add	r3, pc, #552	; (adr r3, 8005888 <__ieee754_log+0x310>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	4650      	mov	r0, sl
 8005664:	4659      	mov	r1, fp
 8005666:	f7fa ff2f 	bl	80004c8 <__aeabi_dmul>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	2000      	movs	r0, #0
 8005670:	4999      	ldr	r1, [pc, #612]	; (80058d8 <__ieee754_log+0x360>)
 8005672:	f7fa fd71 	bl	8000158 <__aeabi_dsub>
 8005676:	4652      	mov	r2, sl
 8005678:	4606      	mov	r6, r0
 800567a:	460f      	mov	r7, r1
 800567c:	465b      	mov	r3, fp
 800567e:	4650      	mov	r0, sl
 8005680:	4659      	mov	r1, fp
 8005682:	f7fa ff21 	bl	80004c8 <__aeabi_dmul>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fa ff1b 	bl	80004c8 <__aeabi_dmul>
 8005692:	4606      	mov	r6, r0
 8005694:	460f      	mov	r7, r1
 8005696:	b914      	cbnz	r4, 800569e <__ieee754_log+0x126>
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	e0a0      	b.n	80057e0 <__ieee754_log+0x268>
 800569e:	4620      	mov	r0, r4
 80056a0:	f7fa fea8 	bl	80003f4 <__aeabi_i2d>
 80056a4:	a374      	add	r3, pc, #464	; (adr r3, 8005878 <__ieee754_log+0x300>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	4680      	mov	r8, r0
 80056ac:	4689      	mov	r9, r1
 80056ae:	f7fa ff0b 	bl	80004c8 <__aeabi_dmul>
 80056b2:	a373      	add	r3, pc, #460	; (adr r3, 8005880 <__ieee754_log+0x308>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	4604      	mov	r4, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fa ff02 	bl	80004c8 <__aeabi_dmul>
 80056c4:	e0a5      	b.n	8005812 <__ieee754_log+0x29a>
 80056c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ca:	f7fa fd47 	bl	800015c <__adddf3>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4650      	mov	r0, sl
 80056d4:	4659      	mov	r1, fp
 80056d6:	f7fb f821 	bl	800071c <__aeabi_ddiv>
 80056da:	e9cd 0100 	strd	r0, r1, [sp]
 80056de:	4620      	mov	r0, r4
 80056e0:	f7fa fe88 	bl	80003f4 <__aeabi_i2d>
 80056e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f7fa feea 	bl	80004c8 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056fc:	f7fa fee4 	bl	80004c8 <__aeabi_dmul>
 8005700:	a363      	add	r3, pc, #396	; (adr r3, 8005890 <__ieee754_log+0x318>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	4680      	mov	r8, r0
 8005708:	4689      	mov	r9, r1
 800570a:	f7fa fedd 	bl	80004c8 <__aeabi_dmul>
 800570e:	a362      	add	r3, pc, #392	; (adr r3, 8005898 <__ieee754_log+0x320>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa fd22 	bl	800015c <__adddf3>
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	f7fa fed4 	bl	80004c8 <__aeabi_dmul>
 8005720:	a35f      	add	r3, pc, #380	; (adr r3, 80058a0 <__ieee754_log+0x328>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa fd19 	bl	800015c <__adddf3>
 800572a:	4642      	mov	r2, r8
 800572c:	464b      	mov	r3, r9
 800572e:	f7fa fecb 	bl	80004c8 <__aeabi_dmul>
 8005732:	a35d      	add	r3, pc, #372	; (adr r3, 80058a8 <__ieee754_log+0x330>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fd10 	bl	800015c <__adddf3>
 800573c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005740:	f7fa fec2 	bl	80004c8 <__aeabi_dmul>
 8005744:	a35a      	add	r3, pc, #360	; (adr r3, 80058b0 <__ieee754_log+0x338>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fa feb9 	bl	80004c8 <__aeabi_dmul>
 8005756:	a358      	add	r3, pc, #352	; (adr r3, 80058b8 <__ieee754_log+0x340>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa fcfe 	bl	800015c <__adddf3>
 8005760:	4642      	mov	r2, r8
 8005762:	464b      	mov	r3, r9
 8005764:	f7fa feb0 	bl	80004c8 <__aeabi_dmul>
 8005768:	a355      	add	r3, pc, #340	; (adr r3, 80058c0 <__ieee754_log+0x348>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fa fcf5 	bl	800015c <__adddf3>
 8005772:	4642      	mov	r2, r8
 8005774:	464b      	mov	r3, r9
 8005776:	f7fa fea7 	bl	80004c8 <__aeabi_dmul>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005782:	f7fa fceb 	bl	800015c <__adddf3>
 8005786:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800578a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800578e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005792:	3551      	adds	r5, #81	; 0x51
 8005794:	4335      	orrs	r5, r6
 8005796:	2d00      	cmp	r5, #0
 8005798:	4680      	mov	r8, r0
 800579a:	4689      	mov	r9, r1
 800579c:	dd48      	ble.n	8005830 <__ieee754_log+0x2b8>
 800579e:	2200      	movs	r2, #0
 80057a0:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <__ieee754_log+0x360>)
 80057a2:	4650      	mov	r0, sl
 80057a4:	4659      	mov	r1, fp
 80057a6:	f7fa fe8f 	bl	80004c8 <__aeabi_dmul>
 80057aa:	4652      	mov	r2, sl
 80057ac:	465b      	mov	r3, fp
 80057ae:	f7fa fe8b 	bl	80004c8 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4606      	mov	r6, r0
 80057b8:	460f      	mov	r7, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fa fccd 	bl	800015c <__adddf3>
 80057c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c6:	f7fa fe7f 	bl	80004c8 <__aeabi_dmul>
 80057ca:	4680      	mov	r8, r0
 80057cc:	4689      	mov	r9, r1
 80057ce:	b964      	cbnz	r4, 80057ea <__ieee754_log+0x272>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fcbe 	bl	8000158 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f7fa fcb8 	bl	8000158 <__aeabi_dsub>
 80057e8:	e6d9      	b.n	800559e <__ieee754_log+0x26>
 80057ea:	a323      	add	r3, pc, #140	; (adr r3, 8005878 <__ieee754_log+0x300>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f4:	f7fa fe68 	bl	80004c8 <__aeabi_dmul>
 80057f8:	a321      	add	r3, pc, #132	; (adr r3, 8005880 <__ieee754_log+0x308>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005806:	f7fa fe5f 	bl	80004c8 <__aeabi_dmul>
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	f7fa fca5 	bl	800015c <__adddf3>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa fc9d 	bl	8000158 <__aeabi_dsub>
 800581e:	4652      	mov	r2, sl
 8005820:	465b      	mov	r3, fp
 8005822:	f7fa fc99 	bl	8000158 <__aeabi_dsub>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	e7d9      	b.n	80057e4 <__ieee754_log+0x26c>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	f7fa fc8e 	bl	8000158 <__aeabi_dsub>
 800583c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005840:	f7fa fe42 	bl	80004c8 <__aeabi_dmul>
 8005844:	4606      	mov	r6, r0
 8005846:	460f      	mov	r7, r1
 8005848:	2c00      	cmp	r4, #0
 800584a:	f43f af25 	beq.w	8005698 <__ieee754_log+0x120>
 800584e:	a30a      	add	r3, pc, #40	; (adr r3, 8005878 <__ieee754_log+0x300>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005858:	f7fa fe36 	bl	80004c8 <__aeabi_dmul>
 800585c:	a308      	add	r3, pc, #32	; (adr r3, 8005880 <__ieee754_log+0x308>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4604      	mov	r4, r0
 8005864:	460d      	mov	r5, r1
 8005866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586a:	e729      	b.n	80056c0 <__ieee754_log+0x148>
 800586c:	2000      	movs	r0, #0
 800586e:	2100      	movs	r1, #0
 8005870:	e695      	b.n	800559e <__ieee754_log+0x26>
 8005872:	bf00      	nop
 8005874:	f3af 8000 	nop.w
 8005878:	fee00000 	.word	0xfee00000
 800587c:	3fe62e42 	.word	0x3fe62e42
 8005880:	35793c76 	.word	0x35793c76
 8005884:	3dea39ef 	.word	0x3dea39ef
 8005888:	55555555 	.word	0x55555555
 800588c:	3fd55555 	.word	0x3fd55555
 8005890:	df3e5244 	.word	0xdf3e5244
 8005894:	3fc2f112 	.word	0x3fc2f112
 8005898:	96cb03de 	.word	0x96cb03de
 800589c:	3fc74664 	.word	0x3fc74664
 80058a0:	94229359 	.word	0x94229359
 80058a4:	3fd24924 	.word	0x3fd24924
 80058a8:	55555593 	.word	0x55555593
 80058ac:	3fe55555 	.word	0x3fe55555
 80058b0:	d078c69f 	.word	0xd078c69f
 80058b4:	3fc39a09 	.word	0x3fc39a09
 80058b8:	1d8e78af 	.word	0x1d8e78af
 80058bc:	3fcc71c5 	.word	0x3fcc71c5
 80058c0:	9997fa04 	.word	0x9997fa04
 80058c4:	3fd99999 	.word	0x3fd99999
 80058c8:	c3500000 	.word	0xc3500000
 80058cc:	43500000 	.word	0x43500000
 80058d0:	7fefffff 	.word	0x7fefffff
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	3fe00000 	.word	0x3fe00000

080058dc <copysign>:
 80058dc:	b530      	push	{r4, r5, lr}
 80058de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80058e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058e6:	ea42 0503 	orr.w	r5, r2, r3
 80058ea:	4629      	mov	r1, r5
 80058ec:	bd30      	pop	{r4, r5, pc}
	...

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
