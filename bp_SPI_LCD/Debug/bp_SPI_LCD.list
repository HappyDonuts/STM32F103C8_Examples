
bp_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c24  08001c24  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c48  08001c48  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c48  08001c48  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c48  08001c48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000014  08001c64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08001c64  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007773  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014b5  00000000  00000000  000277b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00028c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00029310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013b70  00000000  00000000  00029900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f2b  00000000  00000000  0003d470  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a4dc  00000000  00000000  0004339b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a4  00000000  00000000  000ad8f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c0c 	.word	0x08001c0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001c0c 	.word	0x08001c0c

0800014c <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <ILI9341_SendCommand+0x54>)
 800015c:	6818      	ldr	r0, [r3, #0]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <ILI9341_SendCommand+0x58>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	2200      	movs	r2, #0
 8000164:	4619      	mov	r1, r3
 8000166:	f000 fef9 	bl	8000f5c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <ILI9341_SendCommand+0x5c>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <ILI9341_SendCommand+0x60>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2200      	movs	r2, #0
 8000174:	4619      	mov	r1, r3
 8000176:	f000 fef1 	bl	8000f5c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800017a:	f107 010f 	add.w	r1, r7, #15
 800017e:	2305      	movs	r3, #5
 8000180:	2201      	movs	r2, #1
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <ILI9341_SendCommand+0x64>)
 8000184:	f001 fb4d 	bl	8001822 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <ILI9341_SendCommand+0x5c>)
 800018a:	6818      	ldr	r0, [r3, #0]
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <ILI9341_SendCommand+0x60>)
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	2201      	movs	r2, #1
 8000192:	4619      	mov	r1, r3
 8000194:	f000 fee2 	bl	8000f5c <HAL_GPIO_WritePin>
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000094 	.word	0x20000094
 80001a8:	20000088 	.word	0x20000088
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	20000030 	.word	0x20000030

080001b4 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <ILI9341_SendData+0x54>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <ILI9341_SendData+0x58>)
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	2201      	movs	r2, #1
 80001cc:	4619      	mov	r1, r3
 80001ce:	f000 fec5 	bl	8000f5c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <ILI9341_SendData+0x5c>)
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <ILI9341_SendData+0x60>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	2200      	movs	r2, #0
 80001dc:	4619      	mov	r1, r3
 80001de:	f000 febd 	bl	8000f5c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80001e2:	f107 010f 	add.w	r1, r7, #15
 80001e6:	2305      	movs	r3, #5
 80001e8:	2201      	movs	r2, #1
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <ILI9341_SendData+0x64>)
 80001ec:	f001 fb19 	bl	8001822 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <ILI9341_SendData+0x5c>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <ILI9341_SendData+0x60>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	2201      	movs	r2, #1
 80001fa:	4619      	mov	r1, r3
 80001fc:	f000 feae 	bl	8000f5c <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000090 	.word	0x20000090
 800020c:	20000094 	.word	0x20000094
 8000210:	20000088 	.word	0x20000088
 8000214:	2000008c 	.word	0x2000008c
 8000218:	20000030 	.word	0x20000030

0800021c <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4604      	mov	r4, r0
 8000224:	4608      	mov	r0, r1
 8000226:	4611      	mov	r1, r2
 8000228:	461a      	mov	r2, r3
 800022a:	4623      	mov	r3, r4
 800022c:	80fb      	strh	r3, [r7, #6]
 800022e:	4603      	mov	r3, r0
 8000230:	80bb      	strh	r3, [r7, #4]
 8000232:	460b      	mov	r3, r1
 8000234:	807b      	strh	r3, [r7, #2]
 8000236:	4613      	mov	r3, r2
 8000238:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 800023a:	202a      	movs	r0, #42	; 0x2a
 800023c:	f7ff ff86 	bl	800014c <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	0a1b      	lsrs	r3, r3, #8
 8000244:	b29b      	uxth	r3, r3
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4618      	mov	r0, r3
 800024a:	f7ff ffb3 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffae 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000258:	887b      	ldrh	r3, [r7, #2]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b29b      	uxth	r3, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ffa7 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000266:	887b      	ldrh	r3, [r7, #2]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ffa2 	bl	80001b4 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000270:	202b      	movs	r0, #43	; 0x2b
 8000272:	f7ff ff6b 	bl	800014c <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000276:	88bb      	ldrh	r3, [r7, #4]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	b29b      	uxth	r3, r3
 800027c:	b2db      	uxtb	r3, r3
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff98 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000284:	88bb      	ldrh	r3, [r7, #4]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff93 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800028e:	883b      	ldrh	r3, [r7, #0]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	b29b      	uxth	r3, r3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff8c 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 800029c:	883b      	ldrh	r3, [r7, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff87 	bl	80001b4 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 80002a6:	202c      	movs	r0, #44	; 0x2c
 80002a8:	f7ff ff50 	bl	800014c <ILI9341_SendCommand>
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	4613      	mov	r3, r2
 80002c2:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 80002c4:	2258      	movs	r2, #88	; 0x58
 80002c6:	68f9      	ldr	r1, [r7, #12]
 80002c8:	4853      	ldr	r0, [pc, #332]	; (8000418 <ILI9341_Init+0x164>)
 80002ca:	f001 fc8b 	bl	8001be4 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 80002ce:	4a53      	ldr	r2, [pc, #332]	; (800041c <ILI9341_Init+0x168>)
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 80002d4:	4a52      	ldr	r2, [pc, #328]	; (8000420 <ILI9341_Init+0x16c>)
 80002d6:	88fb      	ldrh	r3, [r7, #6]
 80002d8:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 80002da:	4a52      	ldr	r2, [pc, #328]	; (8000424 <ILI9341_Init+0x170>)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 80002e0:	4a51      	ldr	r2, [pc, #324]	; (8000428 <ILI9341_Init+0x174>)
 80002e2:	8b3b      	ldrh	r3, [r7, #24]
 80002e4:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80002e6:	4b4d      	ldr	r3, [pc, #308]	; (800041c <ILI9341_Init+0x168>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	4b4d      	ldr	r3, [pc, #308]	; (8000420 <ILI9341_Init+0x16c>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 fe33 	bl	8000f5c <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80002f6:	4a4d      	ldr	r2, [pc, #308]	; (800042c <ILI9341_Init+0x178>)
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80002fc:	4a4c      	ldr	r2, [pc, #304]	; (8000430 <ILI9341_Init+0x17c>)
 80002fe:	8c3b      	ldrh	r3, [r7, #32]
 8000300:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000302:	8c3b      	ldrh	r3, [r7, #32]
 8000304:	2201      	movs	r2, #1
 8000306:	4619      	mov	r1, r3
 8000308:	69f8      	ldr	r0, [r7, #28]
 800030a:	f000 fe27 	bl	8000f5c <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 800030e:	2001      	movs	r0, #1
 8000310:	f7ff ff1c 	bl	800014c <ILI9341_SendCommand>
   HAL_Delay(100);
 8000314:	2064      	movs	r0, #100	; 0x64
 8000316:	f000 fbc1 	bl	8000a9c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800031a:	2028      	movs	r0, #40	; 0x28
 800031c:	f7ff ff16 	bl	800014c <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000320:	20c0      	movs	r0, #192	; 0xc0
 8000322:	f7ff ff13 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 8000326:	2026      	movs	r0, #38	; 0x26
 8000328:	f7ff ff44 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 800032c:	20c1      	movs	r0, #193	; 0xc1
 800032e:	f7ff ff0d 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000332:	2011      	movs	r0, #17
 8000334:	f7ff ff3e 	bl	80001b4 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 8000338:	20c5      	movs	r0, #197	; 0xc5
 800033a:	f7ff ff07 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 800033e:	2035      	movs	r0, #53	; 0x35
 8000340:	f7ff ff38 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000344:	203e      	movs	r0, #62	; 0x3e
 8000346:	f7ff ff35 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 800034a:	20c7      	movs	r0, #199	; 0xc7
 800034c:	f7ff fefe 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8000350:	20be      	movs	r0, #190	; 0xbe
 8000352:	f7ff ff2f 	bl	80001b4 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000356:	2036      	movs	r0, #54	; 0x36
 8000358:	f7ff fef8 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 800035c:	2048      	movs	r0, #72	; 0x48
 800035e:	f7ff ff29 	bl	80001b4 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000362:	203a      	movs	r0, #58	; 0x3a
 8000364:	f7ff fef2 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000368:	2055      	movs	r0, #85	; 0x55
 800036a:	f7ff ff23 	bl	80001b4 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 800036e:	20b1      	movs	r0, #177	; 0xb1
 8000370:	f7ff feec 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ff1d 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800037a:	201f      	movs	r0, #31
 800037c:	f7ff ff1a 	bl	80001b4 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000380:	202a      	movs	r0, #42	; 0x2a
 8000382:	f7ff fee3 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff14 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff11 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ff0e 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000398:	20ef      	movs	r0, #239	; 0xef
 800039a:	f7ff ff0b 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800039e:	202b      	movs	r0, #43	; 0x2b
 80003a0:	f7ff fed4 	bl	800014c <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff05 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 80003aa:	2000      	movs	r0, #0
 80003ac:	f7ff ff02 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 80003b0:	2001      	movs	r0, #1
 80003b2:	f7ff feff 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 80003b6:	203f      	movs	r0, #63	; 0x3f
 80003b8:	f7ff fefc 	bl	80001b4 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 80003bc:	2034      	movs	r0, #52	; 0x34
 80003be:	f7ff fec5 	bl	800014c <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 80003c2:	20b7      	movs	r0, #183	; 0xb7
 80003c4:	f7ff fec2 	bl	800014c <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 80003c8:	2007      	movs	r0, #7
 80003ca:	f7ff fef3 	bl	80001b4 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 80003ce:	20b6      	movs	r0, #182	; 0xb6
 80003d0:	f7ff febc 	bl	800014c <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f7ff feed 	bl	80001b4 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 80003da:	2082      	movs	r0, #130	; 0x82
 80003dc:	f7ff feea 	bl	80001b4 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 80003e0:	2027      	movs	r0, #39	; 0x27
 80003e2:	f7ff fee7 	bl	80001b4 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff fee4 	bl	80001b4 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80003ec:	2011      	movs	r0, #17
 80003ee:	f7ff fead 	bl	800014c <ILI9341_SendCommand>
   HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f000 fb52 	bl	8000a9c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80003f8:	2029      	movs	r0, #41	; 0x29
 80003fa:	f7ff fea7 	bl	800014c <ILI9341_SendCommand>
   HAL_Delay(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 fb4c 	bl	8000a9c <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000404:	202c      	movs	r0, #44	; 0x2c
 8000406:	f7ff fea1 	bl	800014c <ILI9341_SendCommand>
   HAL_Delay(5);
 800040a:	2005      	movs	r0, #5
 800040c:	f000 fb46 	bl	8000a9c <HAL_Delay>
 }
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000030 	.word	0x20000030
 800041c:	20000088 	.word	0x20000088
 8000420:	2000008c 	.word	0x2000008c
 8000424:	20000090 	.word	0x20000090
 8000428:	20000094 	.word	0x20000094
 800042c:	20000098 	.word	0x20000098
 8000430:	2000009c 	.word	0x2000009c

08000434 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]
 800043e:	460b      	mov	r3, r1
 8000440:	80bb      	strh	r3, [r7, #4]
 8000442:	4613      	mov	r3, r2
 8000444:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	88fa      	ldrh	r2, [r7, #6]
 800044a:	88b9      	ldrh	r1, [r7, #4]
 800044c:	88f8      	ldrh	r0, [r7, #6]
 800044e:	f7ff fee5 	bl	800021c <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b29b      	uxth	r3, r3
 8000458:	b2db      	uxtb	r3, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff feaa 	bl	80001b4 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8000460:	887b      	ldrh	r3, [r7, #2]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fea5 	bl	80001b4 <ILI9341_SendData>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 800047e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000482:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000484:	23ff      	movs	r3, #255	; 0xff
 8000486:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <ILI9341_Fill+0x80>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <ILI9341_Fill+0x24>
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <ILI9341_Fill+0x80>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d107      	bne.n	80004a8 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000498:	f240 133f 	movw	r3, #319	; 0x13f
 800049c:	22ef      	movs	r2, #239	; 0xef
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff febb 	bl	800021c <ILI9341_SetCursorPosition>
 80004a6:	e00e      	b.n	80004c6 <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <ILI9341_Fill+0x80>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d003      	beq.n	80004b8 <ILI9341_Fill+0x44>
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <ILI9341_Fill+0x80>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d116      	bne.n	80004e6 <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 80004b8:	23ef      	movs	r3, #239	; 0xef
 80004ba:	f240 123f 	movw	r2, #319	; 0x13f
 80004be:	2100      	movs	r1, #0
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff feab 	bl	800021c <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 80004c6:	e00e      	b.n	80004e6 <ILI9341_Fill+0x72>
			n--;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe6c 	bl	80001b4 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe67 	bl	80001b4 <ILI9341_SendData>
	while (n) {
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1ed      	bne.n	80004c8 <ILI9341_Fill+0x54>
	}
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000000 	.word	0x20000000

080004f8 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3b01      	subs	r3, #1
 8000506:	2b03      	cmp	r3, #3
 8000508:	d832      	bhi.n	8000570 <ILI9341_setRotation+0x78>
 800050a:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <ILI9341_setRotation+0x18>)
 800050c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000510:	08000521 	.word	0x08000521
 8000514:	08000535 	.word	0x08000535
 8000518:	08000549 	.word	0x08000549
 800051c:	0800055d 	.word	0x0800055d
	{
		case 1:
			rotationNum = 1;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <ILI9341_setRotation+0x94>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000526:	2036      	movs	r0, #54	; 0x36
 8000528:	f7ff fe10 	bl	800014c <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800052c:	2088      	movs	r0, #136	; 0x88
 800052e:	f7ff fe41 	bl	80001b4 <ILI9341_SendData>
			break;
 8000532:	e027      	b.n	8000584 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <ILI9341_setRotation+0x94>)
 8000536:	2202      	movs	r2, #2
 8000538:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800053a:	2036      	movs	r0, #54	; 0x36
 800053c:	f7ff fe06 	bl	800014c <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000540:	2028      	movs	r0, #40	; 0x28
 8000542:	f7ff fe37 	bl	80001b4 <ILI9341_SendData>
			break;
 8000546:	e01d      	b.n	8000584 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <ILI9341_setRotation+0x94>)
 800054a:	2203      	movs	r2, #3
 800054c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800054e:	2036      	movs	r0, #54	; 0x36
 8000550:	f7ff fdfc 	bl	800014c <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000554:	2048      	movs	r0, #72	; 0x48
 8000556:	f7ff fe2d 	bl	80001b4 <ILI9341_SendData>
			break;
 800055a:	e013      	b.n	8000584 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <ILI9341_setRotation+0x94>)
 800055e:	2204      	movs	r2, #4
 8000560:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000562:	2036      	movs	r0, #54	; 0x36
 8000564:	f7ff fdf2 	bl	800014c <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000568:	20e8      	movs	r0, #232	; 0xe8
 800056a:	f7ff fe23 	bl	80001b4 <ILI9341_SendData>
			break;
 800056e:	e009      	b.n	8000584 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <ILI9341_setRotation+0x94>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000576:	2036      	movs	r0, #54	; 0x36
 8000578:	f7ff fde8 	bl	800014c <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800057c:	2088      	movs	r0, #136	; 0x88
 800057e:	f7ff fe19 	bl	80001b4 <ILI9341_SendData>
			break;
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fa20 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f807 	bl	80005aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f880 	bl	80006a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a0:	f000 f848 	bl	8000634 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 80005a4:	f000 f9ba 	bl	800091c <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x18>

080005aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b090      	sub	sp, #64	; 0x40
 80005ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	2228      	movs	r2, #40	; 0x28
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fb1e 	bl	8001bfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fcca 	bl	8000f8c <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005fe:	f000 f8ad 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2102      	movs	r1, #2
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff35 	bl	800148c <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000628:	f000 f898 	bl	800075c <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3740      	adds	r7, #64	; 0x40
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_SPI1_Init+0x64>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_SPI1_Init+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI1_Init+0x64>)
 8000640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x64>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x64>)
 8000668:	2208      	movs	r2, #8
 800066a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x64>)
 8000680:	220a      	movs	r2, #10
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_SPI1_Init+0x64>)
 8000686:	f001 f86b 	bl	8001760 <HAL_SPI_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000690:	f000 f864 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000a0 	.word	0x200000a0
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a25      	ldr	r2, [pc, #148]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_GPIO_Init+0xb0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2118      	movs	r1, #24
 8000700:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0xb4>)
 8000702:	f000 fc2b 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2101      	movs	r1, #1
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0xb8>)
 800070c:	f000 fc26 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8000710:	2318      	movs	r3, #24
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0xb4>)
 8000728:	f000 fabe 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_GPIO_Init+0xb8>)
 8000744:	f000 fab0 	bl	8000ca8 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800
 8000758:	40010c00 	.word	0x40010c00

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <HAL_SPI_MspInit+0x88>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d12f      	bne.n	800084c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_SPI_MspInit+0x8c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_SPI_MspInit+0x90>)
 8000830:	f000 fa3a 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_SPI_MspInit+0x90>)
 8000848:	f000 fa2e 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40013000 	.word	0x40013000
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <HardFault_Handler+0x4>

08000872 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <BusFault_Handler+0x4>

0800087e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f8da 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <SystemInit+0x5c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <SystemInit+0x5c>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <SystemInit+0x5c>)
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4911      	ldr	r1, [pc, #68]	; (8000910 <SystemInit+0x5c>)
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x60>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <SystemInit+0x5c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <SystemInit+0x5c>)
 80008d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <SystemInit+0x5c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <SystemInit+0x5c>)
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <SystemInit+0x5c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <SystemInit+0x5c>)
 80008f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SystemInit+0x5c>)
 80008fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SystemInit+0x64>)
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif 
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000
 8000914:	f8ff0000 	.word	0xf8ff0000
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af04      	add	r7, sp, #16
	/* MAIN CODE */
	ILI9341_Init(spi, GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_3, GPIOB, GPIO_PIN_0);
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <main_s+0x64>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <main_s+0x68>)
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	2308      	movs	r3, #8
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <main_s+0x6c>)
 8000934:	2210      	movs	r2, #16
 8000936:	4914      	ldr	r1, [pc, #80]	; (8000988 <main_s+0x6c>)
 8000938:	f7ff fcbc 	bl	80002b4 <ILI9341_Init>
	ILI9341_setRotation(2);
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fddb 	bl	80004f8 <ILI9341_setRotation>
	ILI9341_Fill(COLOR_WHITE);
 8000942:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000946:	f7ff fd95 	bl	8000474 <ILI9341_Fill>


	while(1){
		/* WHILE CODE */
		for (uint16_t i=0;i<200;i++){
 800094a:	2300      	movs	r3, #0
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	e012      	b.n	8000976 <main_s+0x5a>
			for (uint8_t j=0;j<200;j++){
 8000950:	2300      	movs	r3, #0
 8000952:	717b      	strb	r3, [r7, #5]
 8000954:	e009      	b.n	800096a <main_s+0x4e>
				ILI9341_DrawPixel(i, j, COLOR_BLACK);
 8000956:	797b      	ldrb	r3, [r7, #5]
 8000958:	b299      	uxth	r1, r3
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	2200      	movs	r2, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fd68 	bl	8000434 <ILI9341_DrawPixel>
			for (uint8_t j=0;j<200;j++){
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	3301      	adds	r3, #1
 8000968:	717b      	strb	r3, [r7, #5]
 800096a:	797b      	ldrb	r3, [r7, #5]
 800096c:	2bc7      	cmp	r3, #199	; 0xc7
 800096e:	d9f2      	bls.n	8000956 <main_s+0x3a>
		for (uint16_t i=0;i<200;i++){
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	3301      	adds	r3, #1
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	2bc7      	cmp	r3, #199	; 0xc7
 800097a:	d9e9      	bls.n	8000950 <main_s+0x34>
 800097c:	e7e5      	b.n	800094a <main_s+0x2e>
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40010800 	.word	0x40010800

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800098c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009a8:	f842 3b04 	str.w	r3, [r2], #4

080009ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b2:	f7ff ff7f 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f001 f8f1 	bl	8001b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fde9 	bl	8000590 <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r3, =_sidata
 80009c0:	08001c50 	.word	0x08001c50
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009c8:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80009cc:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80009d0:	200000fc 	.word	0x200000fc

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x28>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x28>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f929 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff feb8 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f933 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f909 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000010 	.word	0x20000010
 8000a60:	2000000c 	.word	0x2000000c

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	20000010 	.word	0x20000010
 8000a84:	200000f8 	.word	0x200000f8

08000a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	200000f8 	.word	0x200000f8

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fff0 	bl	8000a88 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_Delay+0x40>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffe0 	bl	8000a88 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000010 	.word	0x20000010

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff90 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff49 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff90 	bl	8000b98 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5f 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb0 	bl	8000bfc <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	; 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e127      	b.n	8000f0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8116 	bne.w	8000f06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d034      	beq.n	8000d4c <HAL_GPIO_Init+0xa4>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d80d      	bhi.n	8000d02 <HAL_GPIO_Init+0x5a>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d02b      	beq.n	8000d42 <HAL_GPIO_Init+0x9a>
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d804      	bhi.n	8000cf8 <HAL_GPIO_Init+0x50>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d031      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d01c      	beq.n	8000d30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf6:	e048      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d043      	beq.n	8000d84 <HAL_GPIO_Init+0xdc>
 8000cfc:	2b11      	cmp	r3, #17
 8000cfe:	d01b      	beq.n	8000d38 <HAL_GPIO_Init+0x90>
          break;
 8000d00:	e043      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d02:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d026      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d08:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d806      	bhi.n	8000d1c <HAL_GPIO_Init+0x74>
 8000d0e:	4a87      	ldr	r2, [pc, #540]	; (8000f2c <HAL_GPIO_Init+0x284>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d020      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d14:	4a86      	ldr	r2, [pc, #536]	; (8000f30 <HAL_GPIO_Init+0x288>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01d      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d1a:	e036      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1c:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <HAL_GPIO_Init+0x28c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d22:	4a85      	ldr	r2, [pc, #532]	; (8000f38 <HAL_GPIO_Init+0x290>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d016      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d28:	4a84      	ldr	r2, [pc, #528]	; (8000f3c <HAL_GPIO_Init+0x294>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d2e:	e02c      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e028      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e023      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	3308      	adds	r3, #8
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e01e      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	330c      	adds	r3, #12
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e019      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e012      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	611a      	str	r2, [r3, #16]
          break;
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	615a      	str	r2, [r3, #20]
          break;
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d801      	bhi.n	8000d94 <HAL_GPIO_Init+0xec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	e001      	b.n	8000d98 <HAL_GPIO_Init+0xf0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3304      	adds	r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d802      	bhi.n	8000da6 <HAL_GPIO_Init+0xfe>
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x104>
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b08      	subs	r3, #8
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	210f      	movs	r1, #15
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	6a39      	ldr	r1, [r7, #32]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8096 	beq.w	8000f06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df2:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x19e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x19a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x196>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x192>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e46:	2300      	movs	r3, #0
 8000e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e58:	493a      	ldr	r1, [pc, #232]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4938      	ldr	r1, [pc, #224]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	492e      	ldr	r1, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4929      	ldr	r1, [pc, #164]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	608b      	str	r3, [r1, #8]
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	491f      	ldr	r1, [pc, #124]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	491a      	ldr	r1, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60cb      	str	r3, [r1, #12]
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4915      	ldr	r1, [pc, #84]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3301      	adds	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f aed0 	bne.w	8000cbc <HAL_GPIO_Init+0x14>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	372c      	adds	r7, #44	; 0x2c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	10210000 	.word	0x10210000
 8000f2c:	10110000 	.word	0x10110000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	10320000 	.word	0x10320000
 8000f3c:	10220000 	.word	0x10220000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e26c      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fac:	4b92      	ldr	r3, [pc, #584]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb8:	4b8f      	ldr	r3, [pc, #572]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d112      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
 8000fc4:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d10b      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	4b89      	ldr	r3, [pc, #548]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d06c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x12c>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d168      	bne.n	80010b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e246      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x76>
 8000ff4:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a7f      	ldr	r2, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e02e      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x98>
 800100a:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a7a      	ldr	r2, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e01d      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0xbc>
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fd0e 	bl	8000a88 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fd0a 	bl	8000a88 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1fa      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0xe4>
 800108e:	e014      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcfa 	bl	8000a88 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fcf6 	bl	8000a88 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1e6      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x10c>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d063      	beq.n	800118e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d11c      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d116      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e1ba      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4939      	ldr	r1, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	e03a      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fcaf 	bl	8000a88 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fcab 	bl	8000a88 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e19b      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4927      	ldr	r1, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fc8e 	bl	8000a88 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fc8a 	bl	8000a88 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e17a      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d03a      	beq.n	8001210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc6e 	bl	8000a88 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e15a      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 faa8 	bl	8001724 <RCC_Delay>
 80011d4:	e01c      	b.n	8001210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc54 	bl	8000a88 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e2:	e00f      	b.n	8001204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc50 	bl	8000a88 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d908      	bls.n	8001204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e140      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	42420000 	.word	0x42420000
 8001200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e9      	bne.n	80011e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a6 	beq.w	800136a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b94      	ldr	r3, [pc, #592]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a93      	ldr	r2, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a8a      	ldr	r2, [pc, #552]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fc11 	bl	8000a88 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fc0d 	bl	8000a88 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0fd      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x312>
 8001290:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e02d      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x334>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a72      	ldr	r2, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	e01c      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x356>
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a6c      	ldr	r2, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6213      	str	r3, [r2, #32]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a69      	ldr	r2, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012e2:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b64      	ldr	r3, [pc, #400]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a63      	ldr	r2, [pc, #396]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d015      	beq.n	800132e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbc1 	bl	8000a88 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fbbd 	bl	8000a88 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0ab      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ee      	beq.n	800130a <HAL_RCC_OscConfig+0x37e>
 800132c:	e014      	b.n	8001358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fbab 	bl	8000a88 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fba7 	bl	8000a88 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e095      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ee      	bne.n	8001336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d105      	bne.n	800136a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135e:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a47      	ldr	r2, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8081 	beq.w	8001476 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d061      	beq.n	8001444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d146      	bne.n	8001416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb7b 	bl	8000a88 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff fb77 	bl	8000a88 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e067      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d108      	bne.n	80013d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	492d      	ldr	r1, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a19      	ldr	r1, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	430b      	orrs	r3, r1
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb4b 	bl	8000a88 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fb47 	bl	8000a88 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e037      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46a>
 8001414:	e02f      	b.n	8001476 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb34 	bl	8000a88 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fb30 	bl	8000a88 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e020      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x498>
 8001442:	e018      	b.n	8001476 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e013      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	429a      	cmp	r2, r3
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
 8001488:	42420060 	.word	0x42420060

0800148c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d0      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d910      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4965      	ldr	r1, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d040      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e073      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06b      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fa84 	bl	8000a88 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa80 	bl	8000a88 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e053      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d210      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4922      	ldr	r1, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f821 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800161e:	4601      	mov	r1, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	fa21 f303 	lsr.w	r3, r1, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1cc>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f9e2 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	40021000 	.word	0x40021000
 8001654:	08001c38 	.word	0x08001c38
 8001658:	20000004 	.word	0x20000004
 800165c:	2000000c 	.word	0x2000000c

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b490      	push	{r4, r7}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001668:	1d3c      	adds	r4, r7, #4
 800166a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x40>
 800169a:	2b08      	cmp	r3, #8
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x46>
 800169e:	e02d      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	e02d      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b2:	4413      	add	r3, r2
 80016b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0c5b      	lsrs	r3, r3, #17
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d2:	4413      	add	r3, r2
 80016d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016de:	fb02 f203 	mul.w	r2, r2, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	e004      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	623b      	str	r3, [r7, #32]
      break;
 80016fa:	e002      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016fe:	623b      	str	r3, [r7, #32]
      break;
 8001700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001702:	6a3b      	ldr	r3, [r7, #32]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bc90      	pop	{r4, r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	08001c24 	.word	0x08001c24
 8001714:	08001c34 	.word	0x08001c34
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	003d0900 	.word	0x003d0900

08001724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <RCC_Delay+0x34>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <RCC_Delay+0x38>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0a5b      	lsrs	r3, r3, #9
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001740:	bf00      	nop
  }
  while (Delay --);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	60fa      	str	r2, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f9      	bne.n	8001740 <RCC_Delay+0x1c>
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000004 	.word	0x20000004
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e053      	b.n	800181a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d106      	bne.n	8001792 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff f81d 	bl	80007cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	ea42 0103 	orr.w	r1, r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	0c1a      	lsrs	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f002 0204 	and.w	r2, r2, #4
 80017f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b088      	sub	sp, #32
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_SPI_Transmit+0x22>
 8001840:	2302      	movs	r3, #2
 8001842:	e11e      	b.n	8001a82 <HAL_SPI_Transmit+0x260>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800184c:	f7ff f91c 	bl	8000a88 <HAL_GetTick>
 8001850:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d002      	beq.n	8001868 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001862:	2302      	movs	r3, #2
 8001864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001866:	e103      	b.n	8001a70 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_SPI_Transmit+0x52>
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001878:	e0fa      	b.n	8001a70 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2203      	movs	r2, #3
 800187e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	88fa      	ldrh	r2, [r7, #6]
 8001892:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018c0:	d107      	bne.n	80018d2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b40      	cmp	r3, #64	; 0x40
 80018de:	d007      	beq.n	80018f0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	d14b      	bne.n	8001992 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_SPI_Transmit+0xe6>
 8001902:	8afb      	ldrh	r3, [r7, #22]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d13e      	bne.n	8001986 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	1c9a      	adds	r2, r3, #2
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800192c:	e02b      	b.n	8001986 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b02      	cmp	r3, #2
 800193a:	d112      	bne.n	8001962 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	1c9a      	adds	r2, r3, #2
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001960:	e011      	b.n	8001986 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001962:	f7ff f891 	bl	8000a88 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d803      	bhi.n	800197a <HAL_SPI_Transmit+0x158>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d102      	bne.n	8001980 <HAL_SPI_Transmit+0x15e>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001984:	e074      	b.n	8001a70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ce      	bne.n	800192e <HAL_SPI_Transmit+0x10c>
 8001990:	e04c      	b.n	8001a2c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HAL_SPI_Transmit+0x17e>
 800199a:	8afb      	ldrh	r3, [r7, #22]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d140      	bne.n	8001a22 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	330c      	adds	r3, #12
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019c6:	e02c      	b.n	8001a22 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d113      	bne.n	80019fe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	330c      	adds	r3, #12
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80019fc:	e011      	b.n	8001a22 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019fe:	f7ff f843 	bl	8000a88 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d803      	bhi.n	8001a16 <HAL_SPI_Transmit+0x1f4>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d102      	bne.n	8001a1c <HAL_SPI_Transmit+0x1fa>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a20:	e026      	b.n	8001a70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1cd      	bne.n	80019c8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f894 	bl	8001b5e <SPI_EndRxTxTransaction>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	77fb      	strb	r3, [r7, #31]
 8001a6c:	e000      	b.n	8001a70 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001a6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a9a:	e04c      	b.n	8001b36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d048      	beq.n	8001b36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001aa4:	f7fe fff0 	bl	8000a88 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d902      	bls.n	8001aba <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d13d      	bne.n	8001b36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ad2:	d111      	bne.n	8001af8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001adc:	d004      	beq.n	8001ae8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d107      	bne.n	8001af8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b00:	d10f      	bne.n	8001b22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1a3      	bne.n	8001a9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff ff88 	bl	8001a8a <SPI_WaitFlagStateUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <__libc_init_array>:
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	2500      	movs	r5, #0
 8001ba0:	4e0c      	ldr	r6, [pc, #48]	; (8001bd4 <__libc_init_array+0x38>)
 8001ba2:	4c0d      	ldr	r4, [pc, #52]	; (8001bd8 <__libc_init_array+0x3c>)
 8001ba4:	1ba4      	subs	r4, r4, r6
 8001ba6:	10a4      	asrs	r4, r4, #2
 8001ba8:	42a5      	cmp	r5, r4
 8001baa:	d109      	bne.n	8001bc0 <__libc_init_array+0x24>
 8001bac:	f000 f82e 	bl	8001c0c <_init>
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	4e0a      	ldr	r6, [pc, #40]	; (8001bdc <__libc_init_array+0x40>)
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <__libc_init_array+0x44>)
 8001bb6:	1ba4      	subs	r4, r4, r6
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	42a5      	cmp	r5, r4
 8001bbc:	d105      	bne.n	8001bca <__libc_init_array+0x2e>
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bc4:	4798      	blx	r3
 8001bc6:	3501      	adds	r5, #1
 8001bc8:	e7ee      	b.n	8001ba8 <__libc_init_array+0xc>
 8001bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bce:	4798      	blx	r3
 8001bd0:	3501      	adds	r5, #1
 8001bd2:	e7f2      	b.n	8001bba <__libc_init_array+0x1e>
 8001bd4:	08001c48 	.word	0x08001c48
 8001bd8:	08001c48 	.word	0x08001c48
 8001bdc:	08001c48 	.word	0x08001c48
 8001be0:	08001c4c 	.word	0x08001c4c

08001be4 <memcpy>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	1e43      	subs	r3, r0, #1
 8001be8:	440a      	add	r2, r1
 8001bea:	4291      	cmp	r1, r2
 8001bec:	d100      	bne.n	8001bf0 <memcpy+0xc>
 8001bee:	bd10      	pop	{r4, pc}
 8001bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bf8:	e7f7      	b.n	8001bea <memcpy+0x6>

08001bfa <memset>:
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4402      	add	r2, r0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d100      	bne.n	8001c04 <memset+0xa>
 8001c02:	4770      	bx	lr
 8001c04:	f803 1b01 	strb.w	r1, [r3], #1
 8001c08:	e7f9      	b.n	8001bfe <memset+0x4>
	...

08001c0c <_init>:
 8001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0e:	bf00      	nop
 8001c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c12:	bc08      	pop	{r3}
 8001c14:	469e      	mov	lr, r3
 8001c16:	4770      	bx	lr

08001c18 <_fini>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	bf00      	nop
 8001c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1e:	bc08      	pop	{r3}
 8001c20:	469e      	mov	lr, r3
 8001c22:	4770      	bx	lr
