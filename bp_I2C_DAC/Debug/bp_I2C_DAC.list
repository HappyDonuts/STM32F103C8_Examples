
bp_I2C_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d0c  08001d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d38  08001d38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08001db0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001db0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007db8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001498  00000000  00000000  00027e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  000292f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001364f  00000000  00000000  00029fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063c6  00000000  00000000  0003d637  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ab00  00000000  00000000  000439fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ae4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b98  00000000  00000000  000ae578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cf4 	.word	0x08001cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001cf4 	.word	0x08001cf4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa3e 	bl	80005d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f88e 	bl	8000278 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f85e 	bl	800021c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mcp_1 = mcp_new(&hi2c1, 0xC0); //0xC4 - other address
 8000160:	21c0      	movs	r1, #192	; 0xc0
 8000162:	4809      	ldr	r0, [pc, #36]	; (8000188 <main+0x3c>)
 8000164:	f000 f8bc 	bl	80002e0 <mcp_new>
 8000168:	4602      	mov	r2, r0
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <main+0x40>)
 800016c:	601a      	str	r2, [r3, #0]
  HAL_Delay(200);
 800016e:	20c8      	movs	r0, #200	; 0xc8
 8000170:	f000 fa90 	bl	8000694 <HAL_Delay>
  mcp_write(mcp_1, 4095, 1);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <main+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2201      	movs	r2, #1
 800017a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800017e:	4618      	mov	r0, r3
 8000180:	f000 f8d6 	bl	8000330 <mcp_write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	e7fe      	b.n	8000184 <main+0x38>
 8000186:	bf00      	nop
 8000188:	20000098 	.word	0x20000098
 800018c:	200000ec 	.word	0x200000ec

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fd34 	bl	8001c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0318 	add.w	r3, r7, #24
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 f8dd 	bl	8001398 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e4:	f000 f876 	bl	80002d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fb48 	bl	8001898 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800020e:	f000 f861 	bl	80002d4 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <MX_I2C1_Init+0x50>)
 8000222:	4a13      	ldr	r2, [pc, #76]	; (8000270 <MX_I2C1_Init+0x54>)
 8000224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <MX_I2C1_Init+0x50>)
 8000228:	4a12      	ldr	r2, [pc, #72]	; (8000274 <MX_I2C1_Init+0x58>)
 800022a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_I2C1_Init+0x50>)
 800023a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MX_I2C1_Init+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_I2C1_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <MX_I2C1_Init+0x50>)
 800025a:	f000 fc7b 	bl	8000b54 <HAL_I2C_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000264:	f000 f836 	bl	80002d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000098 	.word	0x20000098
 8000270:	40005400 	.word	0x40005400
 8000274:	000186a0 	.word	0x000186a0

08000278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_GPIO_Init+0x58>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_GPIO_Init+0x58>)
 8000284:	f043 0320 	orr.w	r3, r3, #32
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_GPIO_Init+0x58>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0320 	and.w	r3, r3, #32
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_GPIO_Init+0x58>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <MX_GPIO_Init+0x58>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_GPIO_Init+0x58>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_GPIO_Init+0x58>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <MX_GPIO_Init+0x58>)
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <MX_GPIO_Init+0x58>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0308 	and.w	r3, r3, #8
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <mcp_new>:
 * @brief  Creates new mcp_t variable corresponding to a mcp module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval mcp_t variable corresponding to the mcp module
 */
mcp_t* mcp_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
	mcp_t* mcp = malloc(sizeof(*mcp));
 80002ec:	200c      	movs	r0, #12
 80002ee:	f001 fc85 	bl	8001bfc <malloc>
 80002f2:	4603      	mov	r3, r0
 80002f4:	60fb      	str	r3, [r7, #12]
	mcp_init(mcp, hi2c, addr);
 80002f6:	78fb      	ldrb	r3, [r7, #3]
 80002f8:	461a      	mov	r2, r3
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	68f8      	ldr	r0, [r7, #12]
 80002fe:	f000 f805 	bl	800030c <mcp_init>
	return mcp;
 8000302:	68fb      	ldr	r3, [r7, #12]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <mcp_init>:
 * @param  *mcp: mcp variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void mcp_init(mcp_t *mcp, I2C_HandleTypeDef *hi2c, uint8_t addr){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	4613      	mov	r3, r2
 8000318:	71fb      	strb	r3, [r7, #7]
	mcp->hi2c = hi2c;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	605a      	str	r2, [r3, #4]
	mcp->addr = addr;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	701a      	strb	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <mcp_write>:
 * @brief  Writes a value on the mcp4725 DAC module
 * @param  value: From 0 to 4095 (12 bits) value to be written on the DAC
 * @param  eeprom: If 1, saves the value on eeprom (persistence after reset)
 * @retval None
 */
void mcp_write(mcp_t *mcp, uint16_t value, uint8_t eeprom){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	807b      	strh	r3, [r7, #2]
 800033c:	4613      	mov	r3, r2
 800033e:	707b      	strb	r3, [r7, #1]
	if (eeprom == 1) {
 8000340:	787b      	ldrb	r3, [r7, #1]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d103      	bne.n	800034e <mcp_write+0x1e>
		mcp->buffer[0] = 0x60;	} // Persists after reset
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2260      	movs	r2, #96	; 0x60
 800034a:	721a      	strb	r2, [r3, #8]
 800034c:	e002      	b.n	8000354 <mcp_write+0x24>
	else {
		mcp->buffer[0] = 0x40;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2240      	movs	r2, #64	; 0x40
 8000352:	721a      	strb	r2, [r3, #8]
	}
	mcp->buffer[1] = (value / 16);       // Upper data bits     (D11.D10.D9.D8.D7.D6.D5.D4)
 8000354:	887b      	ldrh	r3, [r7, #2]
 8000356:	091b      	lsrs	r3, r3, #4
 8000358:	b29b      	uxth	r3, r3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	725a      	strb	r2, [r3, #9]
	mcp->buffer[2] = (value % 16) << 4;  // Lower data bits     (D3.D2.D1.D0.x.x.x.x)
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	b2da      	uxtb	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	729a      	strb	r2, [r3, #10]
	HAL_I2C_Master_Transmit(mcp->hi2c, mcp->addr, mcp->buffer, sizeof(mcp->buffer), 1000);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6858      	ldr	r0, [r3, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b299      	uxth	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f103 0208 	add.w	r2, r3, #8
 800037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2303      	movs	r3, #3
 8000382:	f000 fd0f 	bl	8000da4 <HAL_I2C_Master_Transmit>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	; (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	; 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f000 fa2e 	bl	80008a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <HardFault_Handler+0x4>

08000482 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <BusFault_Handler+0x4>

0800048e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f8ce 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <_sbrk+0x50>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x16>
		heap_end = &end;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <_sbrk+0x50>)
 80004d6:	4a10      	ldr	r2, [pc, #64]	; (8000518 <_sbrk+0x54>)
 80004d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <_sbrk+0x50>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <_sbrk+0x50>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	466a      	mov	r2, sp
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d907      	bls.n	80004fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004ee:	f001 fb5b 	bl	8001ba8 <__errno>
 80004f2:	4602      	mov	r2, r0
 80004f4:	230c      	movs	r3, #12
 80004f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	e006      	b.n	800050c <_sbrk+0x48>
	}

	heap_end += incr;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <_sbrk+0x50>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a03      	ldr	r2, [pc, #12]	; (8000514 <_sbrk+0x50>)
 8000508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000008c 	.word	0x2000008c
 8000518:	200000f8 	.word	0x200000f8

0800051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <SystemInit+0x5c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <SystemInit+0x5c>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <SystemInit+0x5c>)
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	4911      	ldr	r1, [pc, #68]	; (8000578 <SystemInit+0x5c>)
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <SystemInit+0x60>)
 8000534:	4013      	ands	r3, r2
 8000536:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <SystemInit+0x5c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <SystemInit+0x5c>)
 800053e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000546:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <SystemInit+0x5c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <SystemInit+0x5c>)
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <SystemInit+0x5c>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <SystemInit+0x5c>)
 800055a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800055e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SystemInit+0x5c>)
 8000562:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000566:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <SystemInit+0x64>)
 800056a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800056e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	f8ff0000 	.word	0xf8ff0000
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000584:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f7ff ffb7 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f001 fb01 	bl	8001bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff fdcb 	bl	800014c <main>
  bx lr
 80005b6:	4770      	bx	lr
  ldr r3, =_sidata
 80005b8:	08001d40 	.word	0x08001d40
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005c0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80005c4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80005c8:	200000f8 	.word	0x200000f8

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x28>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f929 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f7ff fed0 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f933 	bl	8000886 <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f000 f909 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000
 8000654:	20000008 	.word	0x20000008
 8000658:	20000004 	.word	0x20000004

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_IncTick+0x1c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <HAL_IncTick+0x20>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000008 	.word	0x20000008
 800067c:	200000f0 	.word	0x200000f0

08000680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <HAL_GetTick+0x10>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	200000f0 	.word	0x200000f0

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff fff0 	bl	8000680 <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_Delay+0x40>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffe0 	bl	8000680 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff90 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff49 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff5e 	bl	8000720 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff90 	bl	8000790 <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5f 	bl	800073c <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffb0 	bl	80007f4 <SysTick_Config>
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b2:	e127      	b.n	8000b04 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008b4:	2201      	movs	r2, #1
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	4013      	ands	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f040 8116 	bne.w	8000afe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d034      	beq.n	8000944 <HAL_GPIO_Init+0xa4>
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d80d      	bhi.n	80008fa <HAL_GPIO_Init+0x5a>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d02b      	beq.n	800093a <HAL_GPIO_Init+0x9a>
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d804      	bhi.n	80008f0 <HAL_GPIO_Init+0x50>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d031      	beq.n	800094e <HAL_GPIO_Init+0xae>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d01c      	beq.n	8000928 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ee:	e048      	b.n	8000982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d043      	beq.n	800097c <HAL_GPIO_Init+0xdc>
 80008f4:	2b11      	cmp	r3, #17
 80008f6:	d01b      	beq.n	8000930 <HAL_GPIO_Init+0x90>
          break;
 80008f8:	e043      	b.n	8000982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008fa:	4a89      	ldr	r2, [pc, #548]	; (8000b20 <HAL_GPIO_Init+0x280>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d026      	beq.n	800094e <HAL_GPIO_Init+0xae>
 8000900:	4a87      	ldr	r2, [pc, #540]	; (8000b20 <HAL_GPIO_Init+0x280>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d806      	bhi.n	8000914 <HAL_GPIO_Init+0x74>
 8000906:	4a87      	ldr	r2, [pc, #540]	; (8000b24 <HAL_GPIO_Init+0x284>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d020      	beq.n	800094e <HAL_GPIO_Init+0xae>
 800090c:	4a86      	ldr	r2, [pc, #536]	; (8000b28 <HAL_GPIO_Init+0x288>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d01d      	beq.n	800094e <HAL_GPIO_Init+0xae>
          break;
 8000912:	e036      	b.n	8000982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000914:	4a85      	ldr	r2, [pc, #532]	; (8000b2c <HAL_GPIO_Init+0x28c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d019      	beq.n	800094e <HAL_GPIO_Init+0xae>
 800091a:	4a85      	ldr	r2, [pc, #532]	; (8000b30 <HAL_GPIO_Init+0x290>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d016      	beq.n	800094e <HAL_GPIO_Init+0xae>
 8000920:	4a84      	ldr	r2, [pc, #528]	; (8000b34 <HAL_GPIO_Init+0x294>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xae>
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e028      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e023      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01e      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e019      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e012      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e008      	b.n	8000982 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	d801      	bhi.n	800098c <HAL_GPIO_Init+0xec>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	e001      	b.n	8000990 <HAL_GPIO_Init+0xf0>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3304      	adds	r3, #4
 8000990:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	2bff      	cmp	r3, #255	; 0xff
 8000996:	d802      	bhi.n	800099e <HAL_GPIO_Init+0xfe>
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	e002      	b.n	80009a4 <HAL_GPIO_Init+0x104>
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	3b08      	subs	r3, #8
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	210f      	movs	r1, #15
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	6a39      	ldr	r1, [r7, #32]
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	431a      	orrs	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 8096 	beq.w	8000afe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d2:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <HAL_GPIO_Init+0x298>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a58      	ldr	r2, [pc, #352]	; (8000b38 <HAL_GPIO_Init+0x298>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b56      	ldr	r3, [pc, #344]	; (8000b38 <HAL_GPIO_Init+0x298>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ea:	4a54      	ldr	r2, [pc, #336]	; (8000b3c <HAL_GPIO_Init+0x29c>)
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <HAL_GPIO_Init+0x2a0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0x19e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x2a4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00d      	beq.n	8000a3a <HAL_GPIO_Init+0x19a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a49      	ldr	r2, [pc, #292]	; (8000b48 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d007      	beq.n	8000a36 <HAL_GPIO_Init+0x196>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a48      	ldr	r2, [pc, #288]	; (8000b4c <HAL_GPIO_Init+0x2ac>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_GPIO_Init+0x192>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x1a0>
 8000a32:	2304      	movs	r3, #4
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x1a0>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x1a0>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x1a0>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a50:	493a      	ldr	r1, [pc, #232]	; (8000b3c <HAL_GPIO_Init+0x29c>)
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4938      	ldr	r1, [pc, #224]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
 8000a76:	e006      	b.n	8000a86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4933      	ldr	r1, [pc, #204]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	492e      	ldr	r1, [pc, #184]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	604b      	str	r3, [r1, #4]
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4929      	ldr	r1, [pc, #164]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	4924      	ldr	r1, [pc, #144]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	608b      	str	r3, [r1, #8]
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	491f      	ldr	r1, [pc, #124]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d006      	beq.n	8000af0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	491a      	ldr	r1, [pc, #104]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60cb      	str	r3, [r1, #12]
 8000aee:	e006      	b.n	8000afe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4915      	ldr	r1, [pc, #84]	; (8000b50 <HAL_GPIO_Init+0x2b0>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f aed0 	bne.w	80008b4 <HAL_GPIO_Init+0x14>
  }
}
 8000b14:	bf00      	nop
 8000b16:	372c      	adds	r7, #44	; 0x2c
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	10210000 	.word	0x10210000
 8000b24:	10110000 	.word	0x10110000
 8000b28:	10120000 	.word	0x10120000
 8000b2c:	10310000 	.word	0x10310000
 8000b30:	10320000 	.word	0x10320000
 8000b34:	10220000 	.word	0x10220000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40011400 	.word	0x40011400
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e10f      	b.n	8000d86 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fc3a 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2224      	movs	r2, #36	; 0x24
 8000b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0201 	bic.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b98:	f000 ffd4 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8000b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a7b      	ldr	r2, [pc, #492]	; (8000d90 <HAL_I2C_Init+0x23c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d807      	bhi.n	8000bb8 <HAL_I2C_Init+0x64>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4a7a      	ldr	r2, [pc, #488]	; (8000d94 <HAL_I2C_Init+0x240>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	bf94      	ite	ls
 8000bb0:	2301      	movls	r3, #1
 8000bb2:	2300      	movhi	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	e006      	b.n	8000bc6 <HAL_I2C_Init+0x72>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4a77      	ldr	r2, [pc, #476]	; (8000d98 <HAL_I2C_Init+0x244>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	bf94      	ite	ls
 8000bc0:	2301      	movls	r3, #1
 8000bc2:	2300      	movhi	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0db      	b.n	8000d86 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a72      	ldr	r2, [pc, #456]	; (8000d9c <HAL_I2C_Init+0x248>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a64      	ldr	r2, [pc, #400]	; (8000d90 <HAL_I2C_Init+0x23c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d802      	bhi.n	8000c08 <HAL_I2C_Init+0xb4>
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	e009      	b.n	8000c1c <HAL_I2C_Init+0xc8>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <HAL_I2C_Init+0x24c>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	099b      	lsrs	r3, r3, #6
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4956      	ldr	r1, [pc, #344]	; (8000d90 <HAL_I2C_Init+0x23c>)
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d80d      	bhi.n	8000c58 <HAL_I2C_Init+0x104>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	1e59      	subs	r1, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	bf38      	it	cc
 8000c54:	2304      	movcc	r3, #4
 8000c56:	e04f      	b.n	8000cf8 <HAL_I2C_Init+0x1a4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d111      	bne.n	8000c84 <HAL_I2C_Init+0x130>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	1e58      	subs	r0, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	440b      	add	r3, r1
 8000c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	e012      	b.n	8000caa <HAL_I2C_Init+0x156>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	1e58      	subs	r0, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6859      	ldr	r1, [r3, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	0099      	lsls	r1, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_Init+0x15e>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e022      	b.n	8000cf8 <HAL_I2C_Init+0x1a4>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10e      	bne.n	8000cd8 <HAL_I2C_Init+0x184>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6859      	ldr	r1, [r3, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	440b      	add	r3, r1
 8000cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	e00f      	b.n	8000cf8 <HAL_I2C_Init+0x1a4>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1e58      	subs	r0, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6859      	ldr	r1, [r3, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	0099      	lsls	r1, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	6809      	ldr	r1, [r1, #0]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69da      	ldr	r2, [r3, #28]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6911      	ldr	r1, [r2, #16]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68d2      	ldr	r2, [r2, #12]
 8000d32:	4311      	orrs	r1, r2
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	000186a0 	.word	0x000186a0
 8000d94:	001e847f 	.word	0x001e847f
 8000d98:	003d08ff 	.word	0x003d08ff
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	10624dd3 	.word	0x10624dd3

08000da4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	817b      	strh	r3, [r7, #10]
 8000db4:	4613      	mov	r3, r2
 8000db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fc62 	bl	8000680 <HAL_GetTick>
 8000dbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	f040 80e0 	bne.w	8000f8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2319      	movs	r3, #25
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4970      	ldr	r1, [pc, #448]	; (8000f98 <HAL_I2C_Master_Transmit+0x1f4>)
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 f958 	bl	800108c <I2C_WaitOnFlagUntilTimeout>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000de2:	2302      	movs	r3, #2
 8000de4:	e0d3      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <HAL_I2C_Master_Transmit+0x50>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e0cc      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d007      	beq.n	8000e1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0201 	orr.w	r2, r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2221      	movs	r2, #33	; 0x21
 8000e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2210      	movs	r2, #16
 8000e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	893a      	ldrh	r2, [r7, #8]
 8000e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_I2C_Master_Transmit+0x1f8>)
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e5c:	8979      	ldrh	r1, [r7, #10]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	6a3a      	ldr	r2, [r7, #32]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f89c 	bl	8000fa0 <I2C_MasterRequestWrite>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e08d      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e88:	e066      	b.n	8000f58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	6a39      	ldr	r1, [r7, #32]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 f9d2 	bl	8001238 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d107      	bne.n	8000eb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e06b      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d11b      	bne.n	8000f2c <HAL_I2C_Master_Transmit+0x188>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d017      	beq.n	8000f2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	6a39      	ldr	r1, [r7, #32]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f000 f9c2 	bl	80012ba <I2C_WaitOnBTFFlagUntilTimeout>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00d      	beq.n	8000f58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d107      	bne.n	8000f54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e01a      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d194      	bne.n	8000e8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2220      	movs	r2, #32
 8000f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e000      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f8c:	2302      	movs	r3, #2
  }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	00100002 	.word	0x00100002
 8000f9c:	ffff0000 	.word	0xffff0000

08000fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	460b      	mov	r3, r1
 8000fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d006      	beq.n	8000fca <I2C_MasterRequestWrite+0x2a>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d003      	beq.n	8000fca <I2C_MasterRequestWrite+0x2a>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000fc8:	d108      	bne.n	8000fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00b      	b.n	8000ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	2b12      	cmp	r3, #18
 8000fe2:	d107      	bne.n	8000ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f000 f843 	bl	800108c <I2C_WaitOnFlagUntilTimeout>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e035      	b.n	800107c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001018:	d108      	bne.n	800102c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	e01b      	b.n	8001064 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	11db      	asrs	r3, r3, #7
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 0306 	and.w	r3, r3, #6
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f063 030f 	orn	r3, r3, #15
 800103c:	b2da      	uxtb	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <I2C_MasterRequestWrite+0xe4>)
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f875 	bl	800113a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e010      	b.n	800107c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800105a:	897b      	ldrh	r3, [r7, #10]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <I2C_MasterRequestWrite+0xe8>)
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f865 	bl	800113a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	00010008 	.word	0x00010008
 8001088:	00010002 	.word	0x00010002

0800108c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800109c:	e025      	b.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d021      	beq.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010a6:	f7ff faeb 	bl	8000680 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d302      	bcc.n	80010bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d116      	bne.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f043 0220 	orr.w	r2, r3, #32
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e023      	b.n	8001132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10d      	bne.n	8001110 <I2C_WaitOnFlagUntilTimeout+0x84>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4013      	ands	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	e00c      	b.n	800112a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4013      	ands	r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	429a      	cmp	r2, r3
 800112e:	d0b6      	beq.n	800109e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001148:	e051      	b.n	80011ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001158:	d123      	bne.n	80011a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2220      	movs	r2, #32
 800117e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f043 0204 	orr.w	r2, r3, #4
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e046      	b.n	8001230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d021      	beq.n	80011ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011aa:	f7ff fa69 	bl	8000680 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d302      	bcc.n	80011c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d116      	bne.n	80011ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2220      	movs	r2, #32
 80011ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f043 0220 	orr.w	r2, r3, #32
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e020      	b.n	8001230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10c      	bne.n	8001212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4013      	ands	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	e00b      	b.n	800122a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	43da      	mvns	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4013      	ands	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf14      	ite	ne
 8001224:	2301      	movne	r3, #1
 8001226:	2300      	moveq	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d18d      	bne.n	800114a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001244:	e02d      	b.n	80012a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f878 	bl	800133c <I2C_IsAcknowledgeFailed>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e02d      	b.n	80012b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d021      	beq.n	80012a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800125e:	f7ff fa0f 	bl	8000680 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d302      	bcc.n	8001274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d116      	bne.n	80012a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2220      	movs	r2, #32
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f043 0220 	orr.w	r2, r3, #32
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e007      	b.n	80012b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ac:	2b80      	cmp	r3, #128	; 0x80
 80012ae:	d1ca      	bne.n	8001246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012c6:	e02d      	b.n	8001324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f837 	bl	800133c <I2C_IsAcknowledgeFailed>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e02d      	b.n	8001334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d021      	beq.n	8001324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e0:	f7ff f9ce 	bl	8000680 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d302      	bcc.n	80012f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d116      	bne.n	8001324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2220      	movs	r2, #32
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0220 	orr.w	r2, r3, #32
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e007      	b.n	8001334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	2b04      	cmp	r3, #4
 8001330:	d1ca      	bne.n	80012c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001352:	d11b      	bne.n	800138c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800135c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2220      	movs	r2, #32
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f043 0204 	orr.w	r2, r3, #4
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e26c      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8087 	beq.w	80014c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d00c      	beq.n	80013de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c4:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d112      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
 80013d0:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d10b      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d06c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x12c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d168      	bne.n	80014c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e246      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x76>
 8001400:	4b80      	ldr	r3, [pc, #512]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a7f      	ldr	r2, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7a      	ldr	r2, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a77      	ldr	r2, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0xbc>
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a71      	ldr	r2, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6e      	ldr	r2, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xd4>
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a67      	ldr	r2, [pc, #412]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff f904 	bl	8000680 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff f900 	bl	8000680 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1fa      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xe4>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff f8f0 	bl	8000680 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff f8ec 	bl	8000680 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1e6      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x10c>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1ba      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4939      	ldr	r1, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff f8a5 	bl	8000680 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff f8a1 	bl	8000680 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e19b      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4927      	ldr	r1, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff f884 	bl	8000680 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff f880 	bl	8000680 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e17a      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03a      	beq.n	800161c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d019      	beq.n	80015e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f864 	bl	8000680 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff f860 	bl	8000680 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e15a      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fac6 	bl	8001b6c <RCC_Delay>
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f84a 	bl	8000680 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	e00f      	b.n	8001610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff f846 	bl	8000680 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d908      	bls.n	8001610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e140      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	42420000 	.word	0x42420000
 800160c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e9      	bne.n	80015f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a6 	beq.w	8001776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b94      	ldr	r3, [pc, #592]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a93      	ldr	r2, [pc, #588]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b91      	ldr	r3, [pc, #580]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a8a      	ldr	r2, [pc, #552]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff f807 	bl	8000680 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff f803 	bl	8000680 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b64      	cmp	r3, #100	; 0x64
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0fd      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x4f8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x312>
 800169c:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a7a      	ldr	r2, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e02d      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a75      	ldr	r2, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b73      	ldr	r3, [pc, #460]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a72      	ldr	r2, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e01c      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x356>
 80016d4:	4b6d      	ldr	r3, [pc, #436]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a6c      	ldr	r2, [pc, #432]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x36e>
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d015      	beq.n	800173a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7fe ffb7 	bl	8000680 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7fe ffb3 	bl	8000680 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0ab      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	4b57      	ldr	r3, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ee      	beq.n	8001716 <HAL_RCC_OscConfig+0x37e>
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7fe ffa1 	bl	8000680 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7fe ff9d 	bl	8000680 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e095      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a47      	ldr	r2, [pc, #284]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8081 	beq.w	8001882 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001780:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d061      	beq.n	8001850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d146      	bne.n	8001822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7fe ff71 	bl	8000680 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7fe ff6d 	bl	8000680 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e067      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d108      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	492d      	ldr	r1, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a19      	ldr	r1, [r3, #32]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	430b      	orrs	r3, r1
 80017ee:	4927      	ldr	r1, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7fe ff41 	bl	8000680 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7fe ff3d 	bl	8000680 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e037      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x46a>
 8001820:	e02f      	b.n	8001882 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x4fc>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe ff2a 	bl	8000680 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7fe ff26 	bl	8000680 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e020      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x498>
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e013      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_OscConfig+0x4f4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060

08001898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d0      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d910      	bls.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4965      	ldr	r1, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001916:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d040      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e073      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06b      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4936      	ldr	r1, [pc, #216]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7fe fe7a 	bl	8000680 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7fe fe76 	bl	8000680 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e053      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d210      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fdd8 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08001d20 	.word	0x08001d20
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b490      	push	{r4, r7}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a74:	1d3c      	adds	r4, r7, #4
 8001a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x46>
 8001aaa:	e02d      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aae:	623b      	str	r3, [r7, #32]
      break;
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	0c9b      	lsrs	r3, r3, #18
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001abe:	4413      	add	r3, r2
 8001ac0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ac4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c5b      	lsrs	r3, r3, #17
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ade:	4413      	add	r3, r2
 8001ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aea:	fb02 f203 	mul.w	r2, r2, r3
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e004      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	623b      	str	r3, [r7, #32]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b0a:	623b      	str	r3, [r7, #32]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc90      	pop	{r4, r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	08001d0c 	.word	0x08001d0c
 8001b20:	08001d1c 	.word	0x08001d1c
 8001b24:	40021000 	.word	0x40021000
 8001b28:	007a1200 	.word	0x007a1200
 8001b2c:	003d0900 	.word	0x003d0900

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff2 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08001d30 	.word	0x08001d30

08001b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <RCC_Delay+0x34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <RCC_Delay+0x38>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0a5b      	lsrs	r3, r3, #9
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b88:	bf00      	nop
  }
  while (Delay --);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f9      	bne.n	8001b88 <RCC_Delay+0x1c>
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <__errno>:
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <__errno+0x8>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c

08001bb4 <__libc_init_array>:
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	4e0c      	ldr	r6, [pc, #48]	; (8001bec <__libc_init_array+0x38>)
 8001bba:	4c0d      	ldr	r4, [pc, #52]	; (8001bf0 <__libc_init_array+0x3c>)
 8001bbc:	1ba4      	subs	r4, r4, r6
 8001bbe:	10a4      	asrs	r4, r4, #2
 8001bc0:	42a5      	cmp	r5, r4
 8001bc2:	d109      	bne.n	8001bd8 <__libc_init_array+0x24>
 8001bc4:	f000 f896 	bl	8001cf4 <_init>
 8001bc8:	2500      	movs	r5, #0
 8001bca:	4e0a      	ldr	r6, [pc, #40]	; (8001bf4 <__libc_init_array+0x40>)
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	; (8001bf8 <__libc_init_array+0x44>)
 8001bce:	1ba4      	subs	r4, r4, r6
 8001bd0:	10a4      	asrs	r4, r4, #2
 8001bd2:	42a5      	cmp	r5, r4
 8001bd4:	d105      	bne.n	8001be2 <__libc_init_array+0x2e>
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bdc:	4798      	blx	r3
 8001bde:	3501      	adds	r5, #1
 8001be0:	e7ee      	b.n	8001bc0 <__libc_init_array+0xc>
 8001be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be6:	4798      	blx	r3
 8001be8:	3501      	adds	r5, #1
 8001bea:	e7f2      	b.n	8001bd2 <__libc_init_array+0x1e>
 8001bec:	08001d38 	.word	0x08001d38
 8001bf0:	08001d38 	.word	0x08001d38
 8001bf4:	08001d38 	.word	0x08001d38
 8001bf8:	08001d3c 	.word	0x08001d3c

08001bfc <malloc>:
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <malloc+0xc>)
 8001bfe:	4601      	mov	r1, r0
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f000 b80b 	b.w	8001c1c <_malloc_r>
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <memset>:
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4402      	add	r2, r0
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d100      	bne.n	8001c16 <memset+0xa>
 8001c14:	4770      	bx	lr
 8001c16:	f803 1b01 	strb.w	r1, [r3], #1
 8001c1a:	e7f9      	b.n	8001c10 <memset+0x4>

08001c1c <_malloc_r>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	1ccd      	adds	r5, r1, #3
 8001c20:	f025 0503 	bic.w	r5, r5, #3
 8001c24:	3508      	adds	r5, #8
 8001c26:	2d0c      	cmp	r5, #12
 8001c28:	bf38      	it	cc
 8001c2a:	250c      	movcc	r5, #12
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	4606      	mov	r6, r0
 8001c30:	db01      	blt.n	8001c36 <_malloc_r+0x1a>
 8001c32:	42a9      	cmp	r1, r5
 8001c34:	d903      	bls.n	8001c3e <_malloc_r+0x22>
 8001c36:	230c      	movs	r3, #12
 8001c38:	6033      	str	r3, [r6, #0]
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	f000 f857 	bl	8001cf0 <__malloc_lock>
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <_malloc_r+0xac>)
 8001c44:	6814      	ldr	r4, [r2, #0]
 8001c46:	4621      	mov	r1, r4
 8001c48:	b991      	cbnz	r1, 8001c70 <_malloc_r+0x54>
 8001c4a:	4c20      	ldr	r4, [pc, #128]	; (8001ccc <_malloc_r+0xb0>)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	b91b      	cbnz	r3, 8001c58 <_malloc_r+0x3c>
 8001c50:	4630      	mov	r0, r6
 8001c52:	f000 f83d 	bl	8001cd0 <_sbrk_r>
 8001c56:	6020      	str	r0, [r4, #0]
 8001c58:	4629      	mov	r1, r5
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f000 f838 	bl	8001cd0 <_sbrk_r>
 8001c60:	1c43      	adds	r3, r0, #1
 8001c62:	d124      	bne.n	8001cae <_malloc_r+0x92>
 8001c64:	230c      	movs	r3, #12
 8001c66:	4630      	mov	r0, r6
 8001c68:	6033      	str	r3, [r6, #0]
 8001c6a:	f000 f842 	bl	8001cf2 <__malloc_unlock>
 8001c6e:	e7e4      	b.n	8001c3a <_malloc_r+0x1e>
 8001c70:	680b      	ldr	r3, [r1, #0]
 8001c72:	1b5b      	subs	r3, r3, r5
 8001c74:	d418      	bmi.n	8001ca8 <_malloc_r+0x8c>
 8001c76:	2b0b      	cmp	r3, #11
 8001c78:	d90f      	bls.n	8001c9a <_malloc_r+0x7e>
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	18cc      	adds	r4, r1, r3
 8001c7e:	50cd      	str	r5, [r1, r3]
 8001c80:	4630      	mov	r0, r6
 8001c82:	f000 f836 	bl	8001cf2 <__malloc_unlock>
 8001c86:	f104 000b 	add.w	r0, r4, #11
 8001c8a:	1d23      	adds	r3, r4, #4
 8001c8c:	f020 0007 	bic.w	r0, r0, #7
 8001c90:	1ac3      	subs	r3, r0, r3
 8001c92:	d0d3      	beq.n	8001c3c <_malloc_r+0x20>
 8001c94:	425a      	negs	r2, r3
 8001c96:	50e2      	str	r2, [r4, r3]
 8001c98:	e7d0      	b.n	8001c3c <_malloc_r+0x20>
 8001c9a:	684b      	ldr	r3, [r1, #4]
 8001c9c:	428c      	cmp	r4, r1
 8001c9e:	bf16      	itet	ne
 8001ca0:	6063      	strne	r3, [r4, #4]
 8001ca2:	6013      	streq	r3, [r2, #0]
 8001ca4:	460c      	movne	r4, r1
 8001ca6:	e7eb      	b.n	8001c80 <_malloc_r+0x64>
 8001ca8:	460c      	mov	r4, r1
 8001caa:	6849      	ldr	r1, [r1, #4]
 8001cac:	e7cc      	b.n	8001c48 <_malloc_r+0x2c>
 8001cae:	1cc4      	adds	r4, r0, #3
 8001cb0:	f024 0403 	bic.w	r4, r4, #3
 8001cb4:	42a0      	cmp	r0, r4
 8001cb6:	d005      	beq.n	8001cc4 <_malloc_r+0xa8>
 8001cb8:	1a21      	subs	r1, r4, r0
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f000 f808 	bl	8001cd0 <_sbrk_r>
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d0cf      	beq.n	8001c64 <_malloc_r+0x48>
 8001cc4:	6025      	str	r5, [r4, #0]
 8001cc6:	e7db      	b.n	8001c80 <_malloc_r+0x64>
 8001cc8:	20000090 	.word	0x20000090
 8001ccc:	20000094 	.word	0x20000094

08001cd0 <_sbrk_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	4c05      	ldr	r4, [pc, #20]	; (8001cec <_sbrk_r+0x1c>)
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	f7fe fbf2 	bl	80004c4 <_sbrk>
 8001ce0:	1c43      	adds	r3, r0, #1
 8001ce2:	d102      	bne.n	8001cea <_sbrk_r+0x1a>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	b103      	cbz	r3, 8001cea <_sbrk_r+0x1a>
 8001ce8:	602b      	str	r3, [r5, #0]
 8001cea:	bd38      	pop	{r3, r4, r5, pc}
 8001cec:	200000f4 	.word	0x200000f4

08001cf0 <__malloc_lock>:
 8001cf0:	4770      	bx	lr

08001cf2 <__malloc_unlock>:
 8001cf2:	4770      	bx	lr

08001cf4 <_init>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	bf00      	nop
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr

08001d00 <_fini>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	bf00      	nop
 8001d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d06:	bc08      	pop	{r3}
 8001d08:	469e      	mov	lr, r3
 8001d0a:	4770      	bx	lr
