
bp_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080045f0  080045f0  000145f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080046a0  080046a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046a0  080046a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080046a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000074  0800471c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800471c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abd6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a01  00000000  00000000  0002ac73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  0002c678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b22  00000000  00000000  0002d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066cf  00000000  00000000  00041ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bb31  00000000  00000000  000483b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  000b3f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080045d8 	.word	0x080045d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080045d8 	.word	0x080045d8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x28>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f907 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f001 fc7e 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f911 	bl	8000d2a <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8e7 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000000 	.word	0x20000000

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000004 	.word	0x20000004
 8000b64:	2000009c 	.word	0x2000009c

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	2000009c 	.word	0x2000009c

08000b7c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da0b      	bge.n	8000c0c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <NVIC_SetPriority+0x4c>)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	3b04      	subs	r3, #4
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0a:	e009      	b.n	8000c20 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <NVIC_SetPriority+0x50>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff49 	bl	8000b7c <NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5e 	bl	8000bc4 <NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
 8000d66:	e127      	b.n	8000fb8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f040 8116 	bne.w	8000fb2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d034      	beq.n	8000df8 <HAL_GPIO_Init+0xb4>
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d80d      	bhi.n	8000dae <HAL_GPIO_Init+0x6a>
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d02b      	beq.n	8000dee <HAL_GPIO_Init+0xaa>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d804      	bhi.n	8000da4 <HAL_GPIO_Init+0x60>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d031      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d01c      	beq.n	8000ddc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da2:	e048      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d043      	beq.n	8000e30 <HAL_GPIO_Init+0xec>
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d01b      	beq.n	8000de4 <HAL_GPIO_Init+0xa0>
          break;
 8000dac:	e043      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000dae:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <HAL_GPIO_Init+0x288>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d026      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
 8000db4:	4a85      	ldr	r2, [pc, #532]	; (8000fcc <HAL_GPIO_Init+0x288>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d806      	bhi.n	8000dc8 <HAL_GPIO_Init+0x84>
 8000dba:	4a85      	ldr	r2, [pc, #532]	; (8000fd0 <HAL_GPIO_Init+0x28c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d020      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
 8000dc0:	4a84      	ldr	r2, [pc, #528]	; (8000fd4 <HAL_GPIO_Init+0x290>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01d      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
          break;
 8000dc6:	e036      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000dc8:	4a83      	ldr	r2, [pc, #524]	; (8000fd8 <HAL_GPIO_Init+0x294>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
 8000dce:	4a83      	ldr	r2, [pc, #524]	; (8000fdc <HAL_GPIO_Init+0x298>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d016      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
 8000dd4:	4a82      	ldr	r2, [pc, #520]	; (8000fe0 <HAL_GPIO_Init+0x29c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xbe>
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e028      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e023      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01e      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e019      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e012      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e008      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2bff      	cmp	r3, #255	; 0xff
 8000e3a:	d801      	bhi.n	8000e40 <HAL_GPIO_Init+0xfc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	e001      	b.n	8000e44 <HAL_GPIO_Init+0x100>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3304      	adds	r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d802      	bhi.n	8000e52 <HAL_GPIO_Init+0x10e>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x114>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3b08      	subs	r3, #8
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	6a39      	ldr	r1, [r7, #32]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	431a      	orrs	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8096 	beq.w	8000fb2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000e9e:	4a52      	ldr	r2, [pc, #328]	; (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a49      	ldr	r2, [pc, #292]	; (8000fec <HAL_GPIO_Init+0x2a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x1ae>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x1aa>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x1a6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <HAL_GPIO_Init+0x2b4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x1a2>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x1b0>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x1b0>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x1b0>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x1b0>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f04:	4938      	ldr	r1, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4936      	ldr	r1, [pc, #216]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	4931      	ldr	r1, [pc, #196]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	492c      	ldr	r1, [pc, #176]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4927      	ldr	r1, [pc, #156]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	4922      	ldr	r1, [pc, #136]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	608b      	str	r3, [r1, #8]
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	491d      	ldr	r1, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	4918      	ldr	r1, [pc, #96]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	f67f aed4 	bls.w	8000d68 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	372c      	adds	r7, #44	; 0x2c
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	10210000 	.word	0x10210000
 8000fd0:	10110000 	.word	0x10110000
 8000fd4:	10120000 	.word	0x10120000
 8000fd8:	10310000 	.word	0x10310000
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 8087 	beq.w	8001128 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800101a:	4b92      	ldr	r3, [pc, #584]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b04      	cmp	r3, #4
 8001024:	d00c      	beq.n	8001040 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001026:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b08      	cmp	r3, #8
 8001030:	d112      	bne.n	8001058 <HAL_RCC_OscConfig+0x58>
 8001032:	4b8c      	ldr	r3, [pc, #560]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d10b      	bne.n	8001058 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d06c      	beq.n	8001126 <HAL_RCC_OscConfig+0x126>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d168      	bne.n	8001126 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e22d      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d106      	bne.n	8001070 <HAL_RCC_OscConfig+0x70>
 8001062:	4b80      	ldr	r3, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7f      	ldr	r2, [pc, #508]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e02e      	b.n	80010ce <HAL_RCC_OscConfig+0xce>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10c      	bne.n	8001092 <HAL_RCC_OscConfig+0x92>
 8001078:	4b7a      	ldr	r3, [pc, #488]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a79      	ldr	r2, [pc, #484]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b77      	ldr	r3, [pc, #476]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a76      	ldr	r2, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e01d      	b.n	80010ce <HAL_RCC_OscConfig+0xce>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109a:	d10c      	bne.n	80010b6 <HAL_RCC_OscConfig+0xb6>
 800109c:	4b71      	ldr	r3, [pc, #452]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a70      	ldr	r2, [pc, #448]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b6e      	ldr	r3, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e00b      	b.n	80010ce <HAL_RCC_OscConfig+0xce>
 80010b6:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6a      	ldr	r2, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b68      	ldr	r3, [pc, #416]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a67      	ldr	r2, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fd47 	bl	8000b68 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fd43 	bl	8000b68 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	; 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1e1      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f0:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0xde>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fd33 	bl	8000b68 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fd2f 	bl	8000b68 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1cd      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x106>
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d063      	beq.n	80011fc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001134:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001140:	4b48      	ldr	r3, [pc, #288]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d11c      	bne.n	8001186 <HAL_RCC_OscConfig+0x186>
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d116      	bne.n	8001186 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x170>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e1a1      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4939      	ldr	r1, [pc, #228]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001184:	e03a      	b.n	80011fc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d020      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x268>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fce8 	bl	8000b68 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fce4 	bl	8000b68 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e182      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_RCC_OscConfig+0x268>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fcc7 	bl	8000b68 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fcc3 	bl	8000b68 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e161      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d039      	beq.n	800127c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d019      	beq.n	8001244 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_RCC_OscConfig+0x26c>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fca7 	bl	8000b68 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fca3 	bl	8000b68 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e141      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_RCC_OscConfig+0x264>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fae3 	bl	8001808 <RCC_Delay>
 8001242:	e01b      	b.n	800127c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_RCC_OscConfig+0x26c>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fc8d 	bl	8000b68 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	e00e      	b.n	8001270 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff fc89 	bl	8000b68 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d907      	bls.n	8001270 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e127      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
 8001264:	40021000 	.word	0x40021000
 8001268:	42420000 	.word	0x42420000
 800126c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ea      	bne.n	8001252 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a6 	beq.w	80013d6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a87      	ldr	r2, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x4c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x4c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7e      	ldr	r2, [pc, #504]	; (80014c0 <HAL_RCC_OscConfig+0x4c0>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fc4b 	bl	8000b68 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fc47 	bl	8000b68 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e0e5      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b75      	ldr	r3, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x4c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x30a>
 80012fc:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6213      	str	r3, [r2, #32]
 8001308:	e02d      	b.n	8001366 <HAL_RCC_OscConfig+0x366>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x32c>
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a69      	ldr	r2, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a66      	ldr	r2, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	e01c      	b.n	8001366 <HAL_RCC_OscConfig+0x366>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x34e>
 8001334:	4b61      	ldr	r3, [pc, #388]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4a60      	ldr	r2, [pc, #384]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6213      	str	r3, [r2, #32]
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x366>
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbfb 	bl	8000b68 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fbf7 	bl	8000b68 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e093      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ee      	beq.n	8001376 <HAL_RCC_OscConfig+0x376>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fbe5 	bl	8000b68 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fbe1 	bl	8000b68 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e07d      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ee      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d069      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d061      	beq.n	80014ae <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d146      	bne.n	8001480 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbb6 	bl	8000b68 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fbb2 	bl	8000b68 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e050      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d108      	bne.n	800143a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4921      	ldr	r1, [pc, #132]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a19      	ldr	r1, [r3, #32]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	430b      	orrs	r3, r1
 800144c:	491b      	ldr	r1, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb86 	bl	8000b68 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb82 	bl	8000b68 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e020      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x460>
 800147e:	e018      	b.n	80014b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb6f 	bl	8000b68 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fb6b 	bl	8000b68 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e009      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_OscConfig+0x4bc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x48e>
 80014ac:	e001      	b.n	80014b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40007000 	.word	0x40007000
 80014c4:	42420060 	.word	0x42420060

080014c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014d6:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d910      	bls.n	8001506 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e4:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0207 	bic.w	r2, r3, #7
 80014ec:	4978      	ldr	r1, [pc, #480]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014f4:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0e0      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d020      	beq.n	8001554 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001524:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001528:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 800153c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001540:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4961      	ldr	r1, [pc, #388]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d06a      	beq.n	8001636 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d115      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0a7      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d107      	bne.n	8001590 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e09b      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e093      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 0203 	bic.w	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4949      	ldr	r1, [pc, #292]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b2:	f7ff fad9 	bl	8000b68 <HAL_GetTick>
 80015b6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c2:	f7ff fad1 	bl	8000b68 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e077      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xfa>
 80015e4:	e027      	b.n	8001636 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d11d      	bne.n	800162a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff faba 	bl	8000b68 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e060      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x128>
 8001612:	e010      	b.n	8001636 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff faa8 	bl	8000b68 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e04e      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d210      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	4920      	ldr	r1, [pc, #128]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_ClockConfig+0x208>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e030      	b.n	80016c8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4915      	ldr	r1, [pc, #84]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a4:	f000 f81c 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 80016a8:	4601      	mov	r1, r0
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x20c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_RCC_ClockConfig+0x210>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	fa21 f303 	lsr.w	r3, r1, r3
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_RCC_ClockConfig+0x214>)
 80016be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fa0f 	bl	8000ae4 <HAL_InitTick>
  
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40022000 	.word	0x40022000
 80016d4:	40021000 	.word	0x40021000
 80016d8:	08004608 	.word	0x08004608
 80016dc:	20000008 	.word	0x20000008

080016e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b490      	push	{r4, r7}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e8:	1d3c      	adds	r4, r7, #4
 80016ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x40>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x46>
 800171e:	e02d      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001722:	623b      	str	r3, [r7, #32]
      break;
 8001724:	e02d      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001732:	4413      	add	r3, r2
 8001734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001752:	4413      	add	r3, r2
 8001754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001758:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800175e:	fb02 f203 	mul.w	r2, r2, r3
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	e004      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	623b      	str	r3, [r7, #32]
      break;
 800177a:	e002      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800177e:	623b      	str	r3, [r7, #32]
      break;
 8001780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001782:	6a3b      	ldr	r3, [r7, #32]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bc90      	pop	{r4, r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	080045f0 	.word	0x080045f0
 8001794:	08004600 	.word	0x08004600
 8001798:	40021000 	.word	0x40021000
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	003d0900 	.word	0x003d0900

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000008 	.word	0x20000008

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017bc:	f7ff fff2 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017c0:	4601      	mov	r1, r0
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08004618 	.word	0x08004618

080017e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017e8:	4601      	mov	r1, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0adb      	lsrs	r3, r3, #11
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	08004618 	.word	0x08004618

08001808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <RCC_Delay+0x34>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <RCC_Delay+0x38>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0a5b      	lsrs	r3, r3, #9
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001824:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	60fa      	str	r2, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f9      	bne.n	8001824 <RCC_Delay+0x1c>
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	10624dd3 	.word	0x10624dd3

08001844 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e03f      	b.n	80018d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fde4 	bl	8002438 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001886:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f90b 	bl	8001aa4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800189c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018ac:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018bc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b088      	sub	sp, #32
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 8083 	bne.w	8001a06 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_UART_Transmit+0x2e>
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e07b      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_UART_Transmit+0x40>
 800191a:	2302      	movs	r3, #2
 800191c:	e074      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2221      	movs	r2, #33	; 0x21
 8001930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001934:	f7ff f918 	bl	8000b68 <HAL_GetTick>
 8001938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001946:	e042      	b.n	80019ce <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195e:	d122      	bne.n	80019a6 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2200      	movs	r2, #0
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f850 	bl	8001a10 <UART_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e046      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800198c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3302      	adds	r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	e017      	b.n	80019ce <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	e013      	b.n	80019ce <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f82d 	bl	8001a10 <UART_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e023      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1b7      	bne.n	8001948 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f814 	bl	8001a10 <UART_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e00a      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001a20:	e02c      	b.n	8001a7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d028      	beq.n	8001a7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a30:	f7ff f89a 	bl	8000b68 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d21d      	bcs.n	8001a7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e00f      	b.n	8001a9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d0c3      	beq.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ae6:	f023 030c 	bic.w	r3, r3, #12
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <UART_SetConfig+0x228>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d16b      	bne.n	8001bec <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b14:	f7ff fe64 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	009a      	lsls	r2, r3, #2
 8001b22:	441a      	add	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	011c      	lsls	r4, r3, #4
 8001b38:	f7ff fe52 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	441a      	add	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b52:	f7ff fe45 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009a      	lsls	r2, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2264      	movs	r2, #100	; 0x64
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	1aeb      	subs	r3, r5, r3
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	3332      	adds	r3, #50	; 0x32
 8001b80:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8c:	441c      	add	r4, r3
 8001b8e:	f7ff fe27 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	009a      	lsls	r2, r3, #2
 8001b9c:	441a      	add	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ba8:	f7ff fe1a 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	441a      	add	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4a43      	ldr	r2, [pc, #268]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	2264      	movs	r2, #100	; 0x64
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	1aeb      	subs	r3, r5, r3
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4422      	add	r2, r4
 8001be8:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001bea:	e06a      	b.n	8001cc2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bec:	f7ff fde4 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009a      	lsls	r2, r3, #2
 8001bfa:	441a      	add	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	011c      	lsls	r4, r3, #4
 8001c10:	f7ff fdd2 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	441a      	add	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c2a:	f7ff fdc5 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	009a      	lsls	r2, r3, #2
 8001c38:	441a      	add	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	1aeb      	subs	r3, r5, r3
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	3332      	adds	r3, #50	; 0x32
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	441c      	add	r4, r3
 8001c66:	f7ff fda7 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009a      	lsls	r2, r3, #2
 8001c74:	441a      	add	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c80:	f7ff fd9a 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	441a      	add	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	2264      	movs	r2, #100	; 0x64
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	1aeb      	subs	r3, r5, r3
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	3332      	adds	r3, #50	; 0x32
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <UART_SetConfig+0x22c>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4422      	add	r2, r4
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	51eb851f 	.word	0x51eb851f
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cde:	f7fe feeb 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce2:	f000 f82b 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce6:	f000 f899 	bl	8001e1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cea:	f000 f86d 	bl	8001dc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  double data_d = -1.0004;
 8001cee:	a410      	add	r4, pc, #64	; (adr r4, 8001d30 <main+0x58>)
 8001cf0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cf4:	e9c7 3402 	strd	r3, r4, [r7, #8]
  int data_i = -123;
 8001cf8:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001cfc:	607b      	str	r3, [r7, #4]
  uint8_t data_b = 0b10011010;
 8001cfe:	239a      	movs	r3, #154	; 0x9a
 8001d00:	70fb      	strb	r3, [r7, #3]

  tx_UART_double(&huart1, data_d, 4, 10);
 8001d02:	230a      	movs	r3, #10
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2304      	movs	r3, #4
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d0e:	480a      	ldr	r0, [pc, #40]	; (8001d38 <main+0x60>)
 8001d10:	f000 f95a 	bl	8001fc8 <tx_UART_double>
  tx_UART_int(&huart1, data_i, 10);
 8001d14:	220a      	movs	r2, #10
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <main+0x60>)
 8001d1a:	f000 f8a7 	bl	8001e6c <tx_UART_int>
  tx_UART_byte(&huart1, data_b, 10);
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	220a      	movs	r2, #10
 8001d22:	4619      	mov	r1, r3
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <main+0x60>)
 8001d26:	f000 fae5 	bl	80022f4 <tx_UART_byte>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <main+0x52>
 8001d2c:	f3af 8000 	nop.w
 8001d30:	6e2eb1c4 	.word	0x6e2eb1c4
 8001d34:	bff001a3 	.word	0xbff001a3
 8001d38:	200000a0 	.word	0x200000a0

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	2228      	movs	r2, #40	; 0x28
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fc9a 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f93b 	bl	8001000 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d90:	f000 f866 	bl	8001e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2102      	movs	r1, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb8a 	bl	80014c8 <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dba:	f000 f851 	bl	8001e60 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3740      	adds	r7, #64	; 0x40
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_USART1_UART_Init+0x50>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001e00:	f7ff fd20 	bl	8001844 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e0a:	f000 f829 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200000a0 	.word	0x200000a0
 8001e18:	40013800 	.word	0x40013800

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	6193      	str	r3, [r2, #24]
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <MX_GPIO_Init+0x40>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <tx_UART_int>:
#include "print_UART.h"
#include "math.h"

void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout) {
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	466b      	mov	r3, sp
 8001e7a:	461d      	mov	r5, r3
	uint8_t negativo = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (data < 0) {	// Si es negativo se pasa a positivo y activamos el flag
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da05      	bge.n	8001e94 <tx_UART_int+0x28>
		data = -data;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	60bb      	str	r3, [r7, #8]
		negativo = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	uint8_t size = size_int(data);
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f000 fa6f 	bl	8002378 <size_int>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char data_char[size];		// String de chars
 8001ea0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	b2c1      	uxtb	r1, r0
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	00d4      	lsls	r4, r2, #3
 8001eba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	b2c1      	uxtb	r1, r0
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f04f 0400 	mov.w	r4, #0
 8001ece:	00d4      	lsls	r4, r2, #3
 8001ed0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ed4:	00cb      	lsls	r3, r1, #3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	3307      	adds	r3, #7
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee2:	466b      	mov	r3, sp
 8001ee4:	3300      	adds	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <tx_UART_int+0x158>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fbd0 	bl	8002694 <siprintf>

	size = size+negativo+2;
 8001ef4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001efc:	4413      	add	r3, r2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3302      	adds	r3, #2
 8001f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t int_str[size];
 8001f06:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	b2c1      	uxtb	r1, r0
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f04f 0400 	mov.w	r4, #0
 8001f1e:	00d4      	lsls	r4, r2, #3
 8001f20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f24:	00cb      	lsls	r3, r1, #3
 8001f26:	b2c1      	uxtb	r1, r0
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	00d4      	lsls	r4, r2, #3
 8001f36:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	3307      	adds	r3, #7
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	ebad 0d03 	sub.w	sp, sp, r3
 8001f48:	466b      	mov	r3, sp
 8001f4a:	3300      	adds	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

	int_str[size-1] = '\r';
 8001f4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f52:	3b01      	subs	r3, #1
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	210d      	movs	r1, #13
 8001f58:	54d1      	strb	r1, [r2, r3]
	int_str[size-2] = '\n';
 8001f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f5e:	3b02      	subs	r3, #2
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	210a      	movs	r1, #10
 8001f64:	54d1      	strb	r1, [r2, r3]

	for(int8_t i=(size-3); i>=0; i--){
 8001f66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f6a:	3b03      	subs	r3, #3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f72:	e011      	b.n	8001f98 <tx_UART_int+0x12c>
		int_str[i] = (uint8_t) data_char[i-negativo];
 8001f74:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8001f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7c:	1ad2      	subs	r2, r2, r3
 8001f7e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001f82:	69f9      	ldr	r1, [r7, #28]
 8001f84:	5c89      	ldrb	r1, [r1, r2]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=(size-3); i>=0; i--){
 8001f8a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f98:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dae9      	bge.n	8001f74 <tx_UART_int+0x108>
	}
	if (negativo == 1) {
 8001fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <tx_UART_int+0x142>
		int_str[0] = '-';
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	222d      	movs	r2, #45	; 0x2d
 8001fac:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(huart,int_str,sizeof(int_str), 10);	// TX por UART del array de uint8_t
 8001fae:	6979      	ldr	r1, [r7, #20]
 8001fb0:	b282      	uxth	r2, r0
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fc92 	bl	80018de <HAL_UART_Transmit>
 8001fba:	46ad      	mov	sp, r5
}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	08004604 	.word	0x08004604

08001fc8 <tx_UART_double>:

void tx_UART_double(UART_HandleTypeDef *huart, double data, uint8_t decimal_p, uint32_t Timeout) {
 8001fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fcc:	b097      	sub	sp, #92	; 0x5c
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	e9c7 2300 	strd	r2, r3, [r7]
 8001fd6:	466b      	mov	r3, sp
 8001fd8:	461e      	mov	r6, r3
	uint8_t negativo = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (data < 0) {
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fec:	f7fe fcde 	bl	80009ac <__aeabi_dcmplt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <tx_UART_double+0x40>
		data = -data;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002000:	607b      	str	r3, [r7, #4]
		negativo = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	int potencia_10 = pow(10, decimal_p);
 8002008:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe f9e1 	bl	80003d4 <__aeabi_ui2d>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	49b3      	ldr	r1, [pc, #716]	; (80022ec <tx_UART_double+0x324>)
 8002020:	f001 f878 	bl	8003114 <pow>
 8002024:	4603      	mov	r3, r0
 8002026:	460c      	mov	r4, r1
 8002028:	4618      	mov	r0, r3
 800202a:	4621      	mov	r1, r4
 800202c:	f7fe fcfc 	bl	8000a28 <__aeabi_d2iz>
 8002030:	4603      	mov	r3, r0
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
	double p_entera_f = trunc(data);
 8002034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002038:	f000 ffc2 	bl	8002fc0 <trunc>
 800203c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 8002040:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002042:	f7fe f9d7 	bl	80003f4 <__aeabi_i2d>
 8002046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800204a:	f7fe fa3d 	bl	80004c8 <__aeabi_dmul>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	4625      	mov	r5, r4
 8002054:	461c      	mov	r4, r3
 8002056:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002058:	f7fe f9cc 	bl	80003f4 <__aeabi_i2d>
 800205c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002060:	f7fe fa32 	bl	80004c8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f874 	bl	8000158 <__aeabi_dsub>
 8002070:	4603      	mov	r3, r0
 8002072:	460c      	mov	r4, r1
 8002074:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	int p_entera = p_entera_f;
 8002078:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800207c:	f7fe fcd4 	bl	8000a28 <__aeabi_d2iz>
 8002080:	4603      	mov	r3, r0
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
	int p_decimal = p_decimal_f;
 8002084:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002088:	f7fe fcce 	bl	8000a28 <__aeabi_d2iz>
 800208c:	4603      	mov	r3, r0
 800208e:	653b      	str	r3, [r7, #80]	; 0x50

	int size = size_int(p_entera);
 8002090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002092:	f000 f971 	bl	8002378 <size_int>
 8002096:	4603      	mov	r3, r0
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
	char p_entera_char[size];		// String de chars
 800209a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800209c:	1e6b      	subs	r3, r5, #1
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a0:	462b      	mov	r3, r5
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	f04f 0400 	mov.w	r4, #0
 80020b0:	00d4      	lsls	r4, r2, #3
 80020b2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020b6:	00cb      	lsls	r3, r1, #3
 80020b8:	462b      	mov	r3, r5
 80020ba:	4619      	mov	r1, r3
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f04f 0400 	mov.w	r4, #0
 80020c8:	00d4      	lsls	r4, r2, #3
 80020ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020ce:	00cb      	lsls	r3, r1, #3
 80020d0:	462b      	mov	r3, r5
 80020d2:	3307      	adds	r3, #7
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	ebad 0d03 	sub.w	sp, sp, r3
 80020dc:	466b      	mov	r3, sp
 80020de:	3300      	adds	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020e6:	4982      	ldr	r1, [pc, #520]	; (80022f0 <tx_UART_double+0x328>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fad3 	bl	8002694 <siprintf>

	char p_decimal_char[decimal_p];
 80020ee:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
 80020f2:	4603      	mov	r3, r0
 80020f4:	3b01      	subs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	b2c1      	uxtb	r1, r0
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	00d4      	lsls	r4, r2, #3
 8002108:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800210c:	00cb      	lsls	r3, r1, #3
 800210e:	b2c1      	uxtb	r1, r0
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	f04f 0400 	mov.w	r4, #0
 800211c:	00d4      	lsls	r4, r2, #3
 800211e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4603      	mov	r3, r0
 8002126:	3307      	adds	r3, #7
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	ebad 0d03 	sub.w	sp, sp, r3
 8002130:	466b      	mov	r3, sp
 8002132:	3300      	adds	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
	size = size_int(p_decimal);
 8002136:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002138:	f000 f91e 	bl	8002378 <size_int>
 800213c:	4603      	mov	r3, r0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
	if (decimal_p>size){
 8002140:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002146:	429a      	cmp	r2, r3
 8002148:	da23      	bge.n	8002192 <tx_UART_double+0x1ca>
		p_decimal = p_decimal + pow(10,decimal_p-1);
 800214a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800214c:	f7fe f952 	bl	80003f4 <__aeabi_i2d>
 8002150:	4680      	mov	r8, r0
 8002152:	4689      	mov	r9, r1
 8002154:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002158:	3b01      	subs	r3, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f94a 	bl	80003f4 <__aeabi_i2d>
 8002160:	4603      	mov	r3, r0
 8002162:	460c      	mov	r4, r1
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	495f      	ldr	r1, [pc, #380]	; (80022ec <tx_UART_double+0x324>)
 800216e:	f000 ffd1 	bl	8003114 <pow>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	461a      	mov	r2, r3
 8002178:	4623      	mov	r3, r4
 800217a:	4640      	mov	r0, r8
 800217c:	4649      	mov	r1, r9
 800217e:	f7fd ffed 	bl	800015c <__adddf3>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	4618      	mov	r0, r3
 8002188:	4621      	mov	r1, r4
 800218a:	f7fe fc4d 	bl	8000a28 <__aeabi_d2iz>
 800218e:	4603      	mov	r3, r0
 8002190:	653b      	str	r3, [r7, #80]	; 0x50
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002196:	4956      	ldr	r1, [pc, #344]	; (80022f0 <tx_UART_double+0x328>)
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa7b 	bl	8002694 <siprintf>
	for(uint8_t i=0; i<(decimal_p-size);i++){
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80021a4:	e009      	b.n	80021ba <tx_UART_double+0x1f2>
		p_decimal_char[i] = '0';
 80021a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021aa:	6a3a      	ldr	r2, [r7, #32]
 80021ac:	2130      	movs	r1, #48	; 0x30
 80021ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimal_p-size);i++){
 80021b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80021ba:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80021be:	f897 1078 	ldrb.w	r1, [r7, #120]	; 0x78
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	1acb      	subs	r3, r1, r3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dbed      	blt.n	80021a6 <tx_UART_double+0x1de>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimal_p+3+negativo;
 80021ca:	b2ea      	uxtb	r2, r5
 80021cc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80021d0:	4413      	add	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021d8:	4413      	add	r3, r2
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3303      	adds	r3, #3
 80021de:	77fb      	strb	r3, [r7, #31]
	uint8_t double_str[total_size];
 80021e0:	7ff8      	ldrb	r0, [r7, #31]
 80021e2:	466b      	mov	r3, sp
 80021e4:	4698      	mov	r8, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	3b01      	subs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	b2c1      	uxtb	r1, r0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f04f 0400 	mov.w	r4, #0
 80021fa:	00d4      	lsls	r4, r2, #3
 80021fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002200:	00cb      	lsls	r3, r1, #3
 8002202:	b2c1      	uxtb	r1, r0
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	f04f 0400 	mov.w	r4, #0
 8002210:	00d4      	lsls	r4, r2, #3
 8002212:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002216:	00cb      	lsls	r3, r1, #3
 8002218:	4603      	mov	r3, r0
 800221a:	3307      	adds	r3, #7
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	ebad 0d03 	sub.w	sp, sp, r3
 8002224:	466b      	mov	r3, sp
 8002226:	3300      	adds	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

	double_str[total_size-1] = '\r';
 800222a:	7ffb      	ldrb	r3, [r7, #31]
 800222c:	3b01      	subs	r3, #1
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	210d      	movs	r1, #13
 8002232:	54d1      	strb	r1, [r2, r3]
	double_str[total_size-2] = '\n';
 8002234:	7ffb      	ldrb	r3, [r7, #31]
 8002236:	3b02      	subs	r3, #2
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	210a      	movs	r1, #10
 800223c:	54d1      	strb	r1, [r2, r3]
	double_str[negativo+sizeof(p_entera_char)] = '.';
 800223e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002242:	462a      	mov	r2, r5
 8002244:	4413      	add	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	212e      	movs	r1, #46	; 0x2e
 800224a:	54d1      	strb	r1, [r2, r3]

	for(int8_t i= (total_size-3); i>=0; i--){
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	3b03      	subs	r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002256:	e030      	b.n	80022ba <tx_UART_double+0x2f2>
		if (i > (negativo+sizeof(p_entera_char))) {
 8002258:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800225c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002260:	4629      	mov	r1, r5
 8002262:	440b      	add	r3, r1
 8002264:	429a      	cmp	r2, r3
 8002266:	d90e      	bls.n	8002286 <tx_UART_double+0x2be>
			double_str[i] = (uint8_t) p_decimal_char[i-(negativo+sizeof(p_entera_char)+1)];
 8002268:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800226c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002270:	4629      	mov	r1, r5
 8002272:	440b      	add	r3, r1
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	1e5a      	subs	r2, r3, #1
 8002278:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	5c89      	ldrb	r1, [r1, r2]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	54d1      	strb	r1, [r2, r3]
 8002284:	e012      	b.n	80022ac <tx_UART_double+0x2e4>
		} else if (i < negativo+sizeof(p_entera_char)) {
 8002286:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800228a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800228e:	4629      	mov	r1, r5
 8002290:	440b      	add	r3, r1
 8002292:	429a      	cmp	r2, r3
 8002294:	d20a      	bcs.n	80022ac <tx_UART_double+0x2e4>
			double_str[i] = (uint8_t) p_entera_char[i-negativo];
 8002296:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800229a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80022a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a6:	5c89      	ldrb	r1, [r1, r2]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	54d1      	strb	r1, [r2, r3]
	for(int8_t i= (total_size-3); i>=0; i--){
 80022ac:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80022ba:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80022be:	2b00      	cmp	r3, #0
 80022c0:	daca      	bge.n	8002258 <tx_UART_double+0x290>
		}
	}

	if (negativo == 1) {
 80022c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d102      	bne.n	80022d0 <tx_UART_double+0x308>
		double_str[0] = '-';
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	222d      	movs	r2, #45	; 0x2d
 80022ce:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(huart, double_str, sizeof(double_str), 10);
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	b282      	uxth	r2, r0
 80022d4:	230a      	movs	r3, #10
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff fb01 	bl	80018de <HAL_UART_Transmit>
 80022dc:	46c5      	mov	sp, r8
 80022de:	46b5      	mov	sp, r6
}
 80022e0:	bf00      	nop
 80022e2:	375c      	adds	r7, #92	; 0x5c
 80022e4:	46bd      	mov	sp, r7
 80022e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ea:	bf00      	nop
 80022ec:	40240000 	.word	0x40240000
 80022f0:	08004604 	.word	0x08004604

080022f4 <tx_UART_byte>:

void tx_UART_byte(UART_HandleTypeDef *huart, uint8_t data, uint32_t Timeout){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	460b      	mov	r3, r1
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	72fb      	strb	r3, [r7, #11]
	uint8_t byte_str[10];
	for(uint8_t i=0;i<8;i++){
 8002302:	2300      	movs	r3, #0
 8002304:	77fb      	strb	r3, [r7, #31]
 8002306:	e024      	b.n	8002352 <tx_UART_byte+0x5e>
		if((data>>(7-i) & 0x01)==1){
 8002308:	7afa      	ldrb	r2, [r7, #11]
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	f1c3 0307 	rsb	r3, r3, #7
 8002310:	fa42 f303 	asr.w	r3, r2, r3
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <tx_UART_byte+0x36>
			byte_str[i]=0x31;
 800231c:	7ffb      	ldrb	r3, [r7, #31]
 800231e:	f107 0220 	add.w	r2, r7, #32
 8002322:	4413      	add	r3, r2
 8002324:	2231      	movs	r2, #49	; 0x31
 8002326:	f803 2c0c 	strb.w	r2, [r3, #-12]
		}
		if((data>>(7-i) & 0x01)==0){
 800232a:	7afa      	ldrb	r2, [r7, #11]
 800232c:	7ffb      	ldrb	r3, [r7, #31]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	fa42 f303 	asr.w	r3, r2, r3
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <tx_UART_byte+0x58>
			byte_str[i]=0x30;
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	f107 0220 	add.w	r2, r7, #32
 8002344:	4413      	add	r3, r2
 8002346:	2230      	movs	r2, #48	; 0x30
 8002348:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++){
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	3301      	adds	r3, #1
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	7ffb      	ldrb	r3, [r7, #31]
 8002354:	2b07      	cmp	r3, #7
 8002356:	d9d7      	bls.n	8002308 <tx_UART_byte+0x14>
		}
	}
	byte_str[8] = '\r';
 8002358:	230d      	movs	r3, #13
 800235a:	773b      	strb	r3, [r7, #28]
	byte_str[9] = '\n';
 800235c:	230a      	movs	r3, #10
 800235e:	777b      	strb	r3, [r7, #29]
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
 8002360:	f107 0114 	add.w	r1, r7, #20
 8002364:	230a      	movs	r3, #10
 8002366:	220a      	movs	r2, #10
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff fab8 	bl	80018de <HAL_UART_Transmit>
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <size_int>:

uint8_t size_int(int data){
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <size_int+0x14>
		size = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e01b      	b.n	80023c4 <size_int+0x4c>
	}
	else {
		size = floor(log10(data))+1;
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe f831 	bl	80003f4 <__aeabi_i2d>
 8002392:	4603      	mov	r3, r0
 8002394:	460c      	mov	r4, r1
 8002396:	4618      	mov	r0, r3
 8002398:	4621      	mov	r1, r4
 800239a:	f000 fe41 	bl	8003020 <log10>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	4618      	mov	r0, r3
 80023a4:	4621      	mov	r1, r4
 80023a6:	f000 fd87 	bl	8002eb8 <floor>
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <size_int+0x58>)
 80023b0:	f7fd fed4 	bl	800015c <__adddf3>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	4618      	mov	r0, r3
 80023ba:	4621      	mov	r1, r4
 80023bc:	f7fe fb5c 	bl	8000a78 <__aeabi_d2uiz>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	3ff00000 	.word	0x3ff00000

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_MspInit+0x5c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_MspInit+0x5c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x5c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x5c>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_MspInit+0x60>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_MspInit+0x60>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_UART_MspInit+0x8c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d131      	bne.n	80024bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_UART_MspInit+0x90>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_UART_MspInit+0x90>)
 800245e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_UART_MspInit+0x90>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_UART_MspInit+0x90>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_UART_MspInit+0x90>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_UART_MspInit+0x90>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4619      	mov	r1, r3
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <HAL_UART_MspInit+0x94>)
 800249e:	f7fe fc51 	bl	8000d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_UART_MspInit+0x94>)
 80024b8:	f7fe fc44 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010800 	.word	0x40010800

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <HardFault_Handler+0x4>

080024e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <MemManage_Handler+0x4>

080024e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <BusFault_Handler+0x4>

080024ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <UsageFault_Handler+0x4>

080024f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f7fe fb12 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <_sbrk+0x50>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x16>
		heap_end = &end;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <_sbrk+0x50>)
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <_sbrk+0x54>)
 8002538:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <_sbrk+0x50>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <_sbrk+0x50>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	466a      	mov	r2, sp
 800254a:	4293      	cmp	r3, r2
 800254c:	d907      	bls.n	800255e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800254e:	f000 f86f 	bl	8002630 <__errno>
 8002552:	4602      	mov	r2, r0
 8002554:	230c      	movs	r3, #12
 8002556:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	e006      	b.n	800256c <_sbrk+0x48>
	}

	heap_end += incr;
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_sbrk+0x50>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <_sbrk+0x50>)
 8002568:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000090 	.word	0x20000090
 8002578:	200000e8 	.word	0x200000e8

0800257c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <SystemInit+0x5c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <SystemInit+0x5c>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <SystemInit+0x5c>)
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4911      	ldr	r1, [pc, #68]	; (80025d8 <SystemInit+0x5c>)
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <SystemInit+0x60>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <SystemInit+0x5c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <SystemInit+0x5c>)
 800259e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <SystemInit+0x5c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SystemInit+0x5c>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <SystemInit+0x5c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <SystemInit+0x5c>)
 80025ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SystemInit+0x5c>)
 80025c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <SystemInit+0x64>)
 80025ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000
 80025dc:	f8ff0000 	.word	0xf8ff0000
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025e6:	e003      	b.n	80025f0 <LoopCopyDataInit>

080025e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025ee:	3104      	adds	r1, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025f0:	480a      	ldr	r0, [pc, #40]	; (800261c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025f8:	d3f6      	bcc.n	80025e8 <CopyDataInit>
  ldr r2, =_sbss
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025fc:	e002      	b.n	8002604 <LoopFillZerobss>

080025fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002600:	f842 3b04 	str.w	r3, [r2], #4

08002604 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002608:	d3f9      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800260a:	f7ff ffb7 	bl	800257c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f000 f815 	bl	800263c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002612:	f7ff fb61 	bl	8001cd8 <main>
  bx lr
 8002616:	4770      	bx	lr
  ldr r3, =_sidata
 8002618:	080046a8 	.word	0x080046a8
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002620:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002624:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002628:	200000e4 	.word	0x200000e4

0800262c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC1_2_IRQHandler>
	...

08002630 <__errno>:
 8002630:	4b01      	ldr	r3, [pc, #4]	; (8002638 <__errno+0x8>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	2000000c 	.word	0x2000000c

0800263c <__libc_init_array>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	2500      	movs	r5, #0
 8002640:	4e0c      	ldr	r6, [pc, #48]	; (8002674 <__libc_init_array+0x38>)
 8002642:	4c0d      	ldr	r4, [pc, #52]	; (8002678 <__libc_init_array+0x3c>)
 8002644:	1ba4      	subs	r4, r4, r6
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	42a5      	cmp	r5, r4
 800264a:	d109      	bne.n	8002660 <__libc_init_array+0x24>
 800264c:	f001 ffc4 	bl	80045d8 <_init>
 8002650:	2500      	movs	r5, #0
 8002652:	4e0a      	ldr	r6, [pc, #40]	; (800267c <__libc_init_array+0x40>)
 8002654:	4c0a      	ldr	r4, [pc, #40]	; (8002680 <__libc_init_array+0x44>)
 8002656:	1ba4      	subs	r4, r4, r6
 8002658:	10a4      	asrs	r4, r4, #2
 800265a:	42a5      	cmp	r5, r4
 800265c:	d105      	bne.n	800266a <__libc_init_array+0x2e>
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002664:	4798      	blx	r3
 8002666:	3501      	adds	r5, #1
 8002668:	e7ee      	b.n	8002648 <__libc_init_array+0xc>
 800266a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266e:	4798      	blx	r3
 8002670:	3501      	adds	r5, #1
 8002672:	e7f2      	b.n	800265a <__libc_init_array+0x1e>
 8002674:	080046a0 	.word	0x080046a0
 8002678:	080046a0 	.word	0x080046a0
 800267c:	080046a0 	.word	0x080046a0
 8002680:	080046a4 	.word	0x080046a4

08002684 <memset>:
 8002684:	4603      	mov	r3, r0
 8002686:	4402      	add	r2, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <siprintf>:
 8002694:	b40e      	push	{r1, r2, r3}
 8002696:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800269a:	b500      	push	{lr}
 800269c:	b09c      	sub	sp, #112	; 0x70
 800269e:	ab1d      	add	r3, sp, #116	; 0x74
 80026a0:	9002      	str	r0, [sp, #8]
 80026a2:	9006      	str	r0, [sp, #24]
 80026a4:	9107      	str	r1, [sp, #28]
 80026a6:	9104      	str	r1, [sp, #16]
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <siprintf+0x38>)
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <siprintf+0x3c>)
 80026ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b0:	9105      	str	r1, [sp, #20]
 80026b2:	6800      	ldr	r0, [r0, #0]
 80026b4:	a902      	add	r1, sp, #8
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	f000 f866 	bl	8002788 <_svfiprintf_r>
 80026bc:	2200      	movs	r2, #0
 80026be:	9b02      	ldr	r3, [sp, #8]
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	b01c      	add	sp, #112	; 0x70
 80026c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026c8:	b003      	add	sp, #12
 80026ca:	4770      	bx	lr
 80026cc:	2000000c 	.word	0x2000000c
 80026d0:	ffff0208 	.word	0xffff0208

080026d4 <__ssputs_r>:
 80026d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	688e      	ldr	r6, [r1, #8]
 80026da:	4682      	mov	sl, r0
 80026dc:	429e      	cmp	r6, r3
 80026de:	460c      	mov	r4, r1
 80026e0:	4690      	mov	r8, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	d837      	bhi.n	8002756 <__ssputs_r+0x82>
 80026e6:	898a      	ldrh	r2, [r1, #12]
 80026e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026ec:	d031      	beq.n	8002752 <__ssputs_r+0x7e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	6825      	ldr	r5, [r4, #0]
 80026f2:	6909      	ldr	r1, [r1, #16]
 80026f4:	1a6f      	subs	r7, r5, r1
 80026f6:	6965      	ldr	r5, [r4, #20]
 80026f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8002700:	f109 0301 	add.w	r3, r9, #1
 8002704:	443b      	add	r3, r7
 8002706:	429d      	cmp	r5, r3
 8002708:	bf38      	it	cc
 800270a:	461d      	movcc	r5, r3
 800270c:	0553      	lsls	r3, r2, #21
 800270e:	d530      	bpl.n	8002772 <__ssputs_r+0x9e>
 8002710:	4629      	mov	r1, r5
 8002712:	f000 fb37 	bl	8002d84 <_malloc_r>
 8002716:	4606      	mov	r6, r0
 8002718:	b950      	cbnz	r0, 8002730 <__ssputs_r+0x5c>
 800271a:	230c      	movs	r3, #12
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f8ca 3000 	str.w	r3, [sl]
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272a:	81a3      	strh	r3, [r4, #12]
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	463a      	mov	r2, r7
 8002732:	6921      	ldr	r1, [r4, #16]
 8002734:	f000 fab6 	bl	8002ca4 <memcpy>
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002742:	81a3      	strh	r3, [r4, #12]
 8002744:	6126      	str	r6, [r4, #16]
 8002746:	443e      	add	r6, r7
 8002748:	6026      	str	r6, [r4, #0]
 800274a:	464e      	mov	r6, r9
 800274c:	6165      	str	r5, [r4, #20]
 800274e:	1bed      	subs	r5, r5, r7
 8002750:	60a5      	str	r5, [r4, #8]
 8002752:	454e      	cmp	r6, r9
 8002754:	d900      	bls.n	8002758 <__ssputs_r+0x84>
 8002756:	464e      	mov	r6, r9
 8002758:	4632      	mov	r2, r6
 800275a:	4641      	mov	r1, r8
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	f000 faac 	bl	8002cba <memmove>
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	2000      	movs	r0, #0
 8002766:	1b9b      	subs	r3, r3, r6
 8002768:	60a3      	str	r3, [r4, #8]
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	441e      	add	r6, r3
 800276e:	6026      	str	r6, [r4, #0]
 8002770:	e7dc      	b.n	800272c <__ssputs_r+0x58>
 8002772:	462a      	mov	r2, r5
 8002774:	f000 fb60 	bl	8002e38 <_realloc_r>
 8002778:	4606      	mov	r6, r0
 800277a:	2800      	cmp	r0, #0
 800277c:	d1e2      	bne.n	8002744 <__ssputs_r+0x70>
 800277e:	6921      	ldr	r1, [r4, #16]
 8002780:	4650      	mov	r0, sl
 8002782:	f000 fab3 	bl	8002cec <_free_r>
 8002786:	e7c8      	b.n	800271a <__ssputs_r+0x46>

08002788 <_svfiprintf_r>:
 8002788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278c:	461d      	mov	r5, r3
 800278e:	898b      	ldrh	r3, [r1, #12]
 8002790:	b09d      	sub	sp, #116	; 0x74
 8002792:	061f      	lsls	r7, r3, #24
 8002794:	4680      	mov	r8, r0
 8002796:	460c      	mov	r4, r1
 8002798:	4616      	mov	r6, r2
 800279a:	d50f      	bpl.n	80027bc <_svfiprintf_r+0x34>
 800279c:	690b      	ldr	r3, [r1, #16]
 800279e:	b96b      	cbnz	r3, 80027bc <_svfiprintf_r+0x34>
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	f000 faef 	bl	8002d84 <_malloc_r>
 80027a6:	6020      	str	r0, [r4, #0]
 80027a8:	6120      	str	r0, [r4, #16]
 80027aa:	b928      	cbnz	r0, 80027b8 <_svfiprintf_r+0x30>
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8c8 3000 	str.w	r3, [r8]
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295
 80027b6:	e0c8      	b.n	800294a <_svfiprintf_r+0x1c2>
 80027b8:	2340      	movs	r3, #64	; 0x40
 80027ba:	6163      	str	r3, [r4, #20]
 80027bc:	2300      	movs	r3, #0
 80027be:	9309      	str	r3, [sp, #36]	; 0x24
 80027c0:	2320      	movs	r3, #32
 80027c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027c6:	2330      	movs	r3, #48	; 0x30
 80027c8:	f04f 0b01 	mov.w	fp, #1
 80027cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027d0:	9503      	str	r5, [sp, #12]
 80027d2:	4637      	mov	r7, r6
 80027d4:	463d      	mov	r5, r7
 80027d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027da:	b10b      	cbz	r3, 80027e0 <_svfiprintf_r+0x58>
 80027dc:	2b25      	cmp	r3, #37	; 0x25
 80027de:	d13e      	bne.n	800285e <_svfiprintf_r+0xd6>
 80027e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80027e4:	d00b      	beq.n	80027fe <_svfiprintf_r+0x76>
 80027e6:	4653      	mov	r3, sl
 80027e8:	4632      	mov	r2, r6
 80027ea:	4621      	mov	r1, r4
 80027ec:	4640      	mov	r0, r8
 80027ee:	f7ff ff71 	bl	80026d4 <__ssputs_r>
 80027f2:	3001      	adds	r0, #1
 80027f4:	f000 80a4 	beq.w	8002940 <_svfiprintf_r+0x1b8>
 80027f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027fa:	4453      	add	r3, sl
 80027fc:	9309      	str	r3, [sp, #36]	; 0x24
 80027fe:	783b      	ldrb	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 809d 	beq.w	8002940 <_svfiprintf_r+0x1b8>
 8002806:	2300      	movs	r3, #0
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002810:	9304      	str	r3, [sp, #16]
 8002812:	9307      	str	r3, [sp, #28]
 8002814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002818:	931a      	str	r3, [sp, #104]	; 0x68
 800281a:	462f      	mov	r7, r5
 800281c:	2205      	movs	r2, #5
 800281e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002822:	4850      	ldr	r0, [pc, #320]	; (8002964 <_svfiprintf_r+0x1dc>)
 8002824:	f000 fa30 	bl	8002c88 <memchr>
 8002828:	9b04      	ldr	r3, [sp, #16]
 800282a:	b9d0      	cbnz	r0, 8002862 <_svfiprintf_r+0xda>
 800282c:	06d9      	lsls	r1, r3, #27
 800282e:	bf44      	itt	mi
 8002830:	2220      	movmi	r2, #32
 8002832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002836:	071a      	lsls	r2, r3, #28
 8002838:	bf44      	itt	mi
 800283a:	222b      	movmi	r2, #43	; 0x2b
 800283c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002840:	782a      	ldrb	r2, [r5, #0]
 8002842:	2a2a      	cmp	r2, #42	; 0x2a
 8002844:	d015      	beq.n	8002872 <_svfiprintf_r+0xea>
 8002846:	462f      	mov	r7, r5
 8002848:	2000      	movs	r0, #0
 800284a:	250a      	movs	r5, #10
 800284c:	9a07      	ldr	r2, [sp, #28]
 800284e:	4639      	mov	r1, r7
 8002850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002854:	3b30      	subs	r3, #48	; 0x30
 8002856:	2b09      	cmp	r3, #9
 8002858:	d94d      	bls.n	80028f6 <_svfiprintf_r+0x16e>
 800285a:	b1b8      	cbz	r0, 800288c <_svfiprintf_r+0x104>
 800285c:	e00f      	b.n	800287e <_svfiprintf_r+0xf6>
 800285e:	462f      	mov	r7, r5
 8002860:	e7b8      	b.n	80027d4 <_svfiprintf_r+0x4c>
 8002862:	4a40      	ldr	r2, [pc, #256]	; (8002964 <_svfiprintf_r+0x1dc>)
 8002864:	463d      	mov	r5, r7
 8002866:	1a80      	subs	r0, r0, r2
 8002868:	fa0b f000 	lsl.w	r0, fp, r0
 800286c:	4318      	orrs	r0, r3
 800286e:	9004      	str	r0, [sp, #16]
 8002870:	e7d3      	b.n	800281a <_svfiprintf_r+0x92>
 8002872:	9a03      	ldr	r2, [sp, #12]
 8002874:	1d11      	adds	r1, r2, #4
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	9103      	str	r1, [sp, #12]
 800287a:	2a00      	cmp	r2, #0
 800287c:	db01      	blt.n	8002882 <_svfiprintf_r+0xfa>
 800287e:	9207      	str	r2, [sp, #28]
 8002880:	e004      	b.n	800288c <_svfiprintf_r+0x104>
 8002882:	4252      	negs	r2, r2
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	9207      	str	r2, [sp, #28]
 800288a:	9304      	str	r3, [sp, #16]
 800288c:	783b      	ldrb	r3, [r7, #0]
 800288e:	2b2e      	cmp	r3, #46	; 0x2e
 8002890:	d10c      	bne.n	80028ac <_svfiprintf_r+0x124>
 8002892:	787b      	ldrb	r3, [r7, #1]
 8002894:	2b2a      	cmp	r3, #42	; 0x2a
 8002896:	d133      	bne.n	8002900 <_svfiprintf_r+0x178>
 8002898:	9b03      	ldr	r3, [sp, #12]
 800289a:	3702      	adds	r7, #2
 800289c:	1d1a      	adds	r2, r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	9203      	str	r2, [sp, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bfb8      	it	lt
 80028a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028aa:	9305      	str	r3, [sp, #20]
 80028ac:	4d2e      	ldr	r5, [pc, #184]	; (8002968 <_svfiprintf_r+0x1e0>)
 80028ae:	2203      	movs	r2, #3
 80028b0:	7839      	ldrb	r1, [r7, #0]
 80028b2:	4628      	mov	r0, r5
 80028b4:	f000 f9e8 	bl	8002c88 <memchr>
 80028b8:	b138      	cbz	r0, 80028ca <_svfiprintf_r+0x142>
 80028ba:	2340      	movs	r3, #64	; 0x40
 80028bc:	1b40      	subs	r0, r0, r5
 80028be:	fa03 f000 	lsl.w	r0, r3, r0
 80028c2:	9b04      	ldr	r3, [sp, #16]
 80028c4:	3701      	adds	r7, #1
 80028c6:	4303      	orrs	r3, r0
 80028c8:	9304      	str	r3, [sp, #16]
 80028ca:	7839      	ldrb	r1, [r7, #0]
 80028cc:	2206      	movs	r2, #6
 80028ce:	4827      	ldr	r0, [pc, #156]	; (800296c <_svfiprintf_r+0x1e4>)
 80028d0:	1c7e      	adds	r6, r7, #1
 80028d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028d6:	f000 f9d7 	bl	8002c88 <memchr>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d038      	beq.n	8002950 <_svfiprintf_r+0x1c8>
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <_svfiprintf_r+0x1e8>)
 80028e0:	bb13      	cbnz	r3, 8002928 <_svfiprintf_r+0x1a0>
 80028e2:	9b03      	ldr	r3, [sp, #12]
 80028e4:	3307      	adds	r3, #7
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	3308      	adds	r3, #8
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f0:	444b      	add	r3, r9
 80028f2:	9309      	str	r3, [sp, #36]	; 0x24
 80028f4:	e76d      	b.n	80027d2 <_svfiprintf_r+0x4a>
 80028f6:	fb05 3202 	mla	r2, r5, r2, r3
 80028fa:	2001      	movs	r0, #1
 80028fc:	460f      	mov	r7, r1
 80028fe:	e7a6      	b.n	800284e <_svfiprintf_r+0xc6>
 8002900:	2300      	movs	r3, #0
 8002902:	250a      	movs	r5, #10
 8002904:	4619      	mov	r1, r3
 8002906:	3701      	adds	r7, #1
 8002908:	9305      	str	r3, [sp, #20]
 800290a:	4638      	mov	r0, r7
 800290c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002910:	3a30      	subs	r2, #48	; 0x30
 8002912:	2a09      	cmp	r2, #9
 8002914:	d903      	bls.n	800291e <_svfiprintf_r+0x196>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0c8      	beq.n	80028ac <_svfiprintf_r+0x124>
 800291a:	9105      	str	r1, [sp, #20]
 800291c:	e7c6      	b.n	80028ac <_svfiprintf_r+0x124>
 800291e:	fb05 2101 	mla	r1, r5, r1, r2
 8002922:	2301      	movs	r3, #1
 8002924:	4607      	mov	r7, r0
 8002926:	e7f0      	b.n	800290a <_svfiprintf_r+0x182>
 8002928:	ab03      	add	r3, sp, #12
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4622      	mov	r2, r4
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_svfiprintf_r+0x1ec>)
 8002930:	a904      	add	r1, sp, #16
 8002932:	4640      	mov	r0, r8
 8002934:	f3af 8000 	nop.w
 8002938:	f1b0 3fff 	cmp.w	r0, #4294967295
 800293c:	4681      	mov	r9, r0
 800293e:	d1d6      	bne.n	80028ee <_svfiprintf_r+0x166>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	065b      	lsls	r3, r3, #25
 8002944:	f53f af35 	bmi.w	80027b2 <_svfiprintf_r+0x2a>
 8002948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800294a:	b01d      	add	sp, #116	; 0x74
 800294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002950:	ab03      	add	r3, sp, #12
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4622      	mov	r2, r4
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_svfiprintf_r+0x1ec>)
 8002958:	a904      	add	r1, sp, #16
 800295a:	4640      	mov	r0, r8
 800295c:	f000 f882 	bl	8002a64 <_printf_i>
 8002960:	e7ea      	b.n	8002938 <_svfiprintf_r+0x1b0>
 8002962:	bf00      	nop
 8002964:	08004620 	.word	0x08004620
 8002968:	08004626 	.word	0x08004626
 800296c:	0800462a 	.word	0x0800462a
 8002970:	00000000 	.word	0x00000000
 8002974:	080026d5 	.word	0x080026d5

08002978 <_printf_common>:
 8002978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800297c:	4691      	mov	r9, r2
 800297e:	461f      	mov	r7, r3
 8002980:	688a      	ldr	r2, [r1, #8]
 8002982:	690b      	ldr	r3, [r1, #16]
 8002984:	4606      	mov	r6, r0
 8002986:	4293      	cmp	r3, r2
 8002988:	bfb8      	it	lt
 800298a:	4613      	movlt	r3, r2
 800298c:	f8c9 3000 	str.w	r3, [r9]
 8002990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002994:	460c      	mov	r4, r1
 8002996:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800299a:	b112      	cbz	r2, 80029a2 <_printf_common+0x2a>
 800299c:	3301      	adds	r3, #1
 800299e:	f8c9 3000 	str.w	r3, [r9]
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	0699      	lsls	r1, r3, #26
 80029a6:	bf42      	ittt	mi
 80029a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029ac:	3302      	addmi	r3, #2
 80029ae:	f8c9 3000 	strmi.w	r3, [r9]
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	f015 0506 	ands.w	r5, r5, #6
 80029b8:	d107      	bne.n	80029ca <_printf_common+0x52>
 80029ba:	f104 0a19 	add.w	sl, r4, #25
 80029be:	68e3      	ldr	r3, [r4, #12]
 80029c0:	f8d9 2000 	ldr.w	r2, [r9]
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	42ab      	cmp	r3, r5
 80029c8:	dc29      	bgt.n	8002a1e <_printf_common+0xa6>
 80029ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	3300      	adds	r3, #0
 80029d2:	bf18      	it	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	0692      	lsls	r2, r2, #26
 80029d8:	d42e      	bmi.n	8002a38 <_printf_common+0xc0>
 80029da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029de:	4639      	mov	r1, r7
 80029e0:	4630      	mov	r0, r6
 80029e2:	47c0      	blx	r8
 80029e4:	3001      	adds	r0, #1
 80029e6:	d021      	beq.n	8002a2c <_printf_common+0xb4>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	68e5      	ldr	r5, [r4, #12]
 80029ec:	f003 0306 	and.w	r3, r3, #6
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	bf18      	it	ne
 80029f4:	2500      	movne	r5, #0
 80029f6:	f8d9 2000 	ldr.w	r2, [r9]
 80029fa:	f04f 0900 	mov.w	r9, #0
 80029fe:	bf08      	it	eq
 8002a00:	1aad      	subeq	r5, r5, r2
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	6922      	ldr	r2, [r4, #16]
 8002a06:	bf08      	it	eq
 8002a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bfc4      	itt	gt
 8002a10:	1a9b      	subgt	r3, r3, r2
 8002a12:	18ed      	addgt	r5, r5, r3
 8002a14:	341a      	adds	r4, #26
 8002a16:	454d      	cmp	r5, r9
 8002a18:	d11a      	bne.n	8002a50 <_printf_common+0xd8>
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	e008      	b.n	8002a30 <_printf_common+0xb8>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	4652      	mov	r2, sl
 8002a22:	4639      	mov	r1, r7
 8002a24:	4630      	mov	r0, r6
 8002a26:	47c0      	blx	r8
 8002a28:	3001      	adds	r0, #1
 8002a2a:	d103      	bne.n	8002a34 <_printf_common+0xbc>
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a34:	3501      	adds	r5, #1
 8002a36:	e7c2      	b.n	80029be <_printf_common+0x46>
 8002a38:	2030      	movs	r0, #48	; 0x30
 8002a3a:	18e1      	adds	r1, r4, r3
 8002a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a46:	4422      	add	r2, r4
 8002a48:	3302      	adds	r3, #2
 8002a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a4e:	e7c4      	b.n	80029da <_printf_common+0x62>
 8002a50:	2301      	movs	r3, #1
 8002a52:	4622      	mov	r2, r4
 8002a54:	4639      	mov	r1, r7
 8002a56:	4630      	mov	r0, r6
 8002a58:	47c0      	blx	r8
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	d0e6      	beq.n	8002a2c <_printf_common+0xb4>
 8002a5e:	f109 0901 	add.w	r9, r9, #1
 8002a62:	e7d8      	b.n	8002a16 <_printf_common+0x9e>

08002a64 <_printf_i>:
 8002a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	7e09      	ldrb	r1, [r1, #24]
 8002a70:	b085      	sub	sp, #20
 8002a72:	296e      	cmp	r1, #110	; 0x6e
 8002a74:	4617      	mov	r7, r2
 8002a76:	4606      	mov	r6, r0
 8002a78:	4698      	mov	r8, r3
 8002a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a7c:	f000 80b3 	beq.w	8002be6 <_printf_i+0x182>
 8002a80:	d822      	bhi.n	8002ac8 <_printf_i+0x64>
 8002a82:	2963      	cmp	r1, #99	; 0x63
 8002a84:	d036      	beq.n	8002af4 <_printf_i+0x90>
 8002a86:	d80a      	bhi.n	8002a9e <_printf_i+0x3a>
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	f000 80b9 	beq.w	8002c00 <_printf_i+0x19c>
 8002a8e:	2958      	cmp	r1, #88	; 0x58
 8002a90:	f000 8083 	beq.w	8002b9a <_printf_i+0x136>
 8002a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a9c:	e032      	b.n	8002b04 <_printf_i+0xa0>
 8002a9e:	2964      	cmp	r1, #100	; 0x64
 8002aa0:	d001      	beq.n	8002aa6 <_printf_i+0x42>
 8002aa2:	2969      	cmp	r1, #105	; 0x69
 8002aa4:	d1f6      	bne.n	8002a94 <_printf_i+0x30>
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	0605      	lsls	r5, r0, #24
 8002aac:	f103 0104 	add.w	r1, r3, #4
 8002ab0:	d52a      	bpl.n	8002b08 <_printf_i+0xa4>
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da03      	bge.n	8002ac2 <_printf_i+0x5e>
 8002aba:	222d      	movs	r2, #45	; 0x2d
 8002abc:	425b      	negs	r3, r3
 8002abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ac2:	486f      	ldr	r0, [pc, #444]	; (8002c80 <_printf_i+0x21c>)
 8002ac4:	220a      	movs	r2, #10
 8002ac6:	e039      	b.n	8002b3c <_printf_i+0xd8>
 8002ac8:	2973      	cmp	r1, #115	; 0x73
 8002aca:	f000 809d 	beq.w	8002c08 <_printf_i+0x1a4>
 8002ace:	d808      	bhi.n	8002ae2 <_printf_i+0x7e>
 8002ad0:	296f      	cmp	r1, #111	; 0x6f
 8002ad2:	d020      	beq.n	8002b16 <_printf_i+0xb2>
 8002ad4:	2970      	cmp	r1, #112	; 0x70
 8002ad6:	d1dd      	bne.n	8002a94 <_printf_i+0x30>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	6023      	str	r3, [r4, #0]
 8002ae0:	e003      	b.n	8002aea <_printf_i+0x86>
 8002ae2:	2975      	cmp	r1, #117	; 0x75
 8002ae4:	d017      	beq.n	8002b16 <_printf_i+0xb2>
 8002ae6:	2978      	cmp	r1, #120	; 0x78
 8002ae8:	d1d4      	bne.n	8002a94 <_printf_i+0x30>
 8002aea:	2378      	movs	r3, #120	; 0x78
 8002aec:	4865      	ldr	r0, [pc, #404]	; (8002c84 <_printf_i+0x220>)
 8002aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002af2:	e055      	b.n	8002ba0 <_printf_i+0x13c>
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002afa:	1d19      	adds	r1, r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6011      	str	r1, [r2, #0]
 8002b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b04:	2301      	movs	r3, #1
 8002b06:	e08c      	b.n	8002c22 <_printf_i+0x1be>
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b0e:	6011      	str	r1, [r2, #0]
 8002b10:	bf18      	it	ne
 8002b12:	b21b      	sxthne	r3, r3
 8002b14:	e7cf      	b.n	8002ab6 <_printf_i+0x52>
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	6825      	ldr	r5, [r4, #0]
 8002b1a:	1d18      	adds	r0, r3, #4
 8002b1c:	6010      	str	r0, [r2, #0]
 8002b1e:	0628      	lsls	r0, r5, #24
 8002b20:	d501      	bpl.n	8002b26 <_printf_i+0xc2>
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	e002      	b.n	8002b2c <_printf_i+0xc8>
 8002b26:	0668      	lsls	r0, r5, #25
 8002b28:	d5fb      	bpl.n	8002b22 <_printf_i+0xbe>
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	296f      	cmp	r1, #111	; 0x6f
 8002b2e:	bf14      	ite	ne
 8002b30:	220a      	movne	r2, #10
 8002b32:	2208      	moveq	r2, #8
 8002b34:	4852      	ldr	r0, [pc, #328]	; (8002c80 <_printf_i+0x21c>)
 8002b36:	2100      	movs	r1, #0
 8002b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b3c:	6865      	ldr	r5, [r4, #4]
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	60a5      	str	r5, [r4, #8]
 8002b42:	f2c0 8095 	blt.w	8002c70 <_printf_i+0x20c>
 8002b46:	6821      	ldr	r1, [r4, #0]
 8002b48:	f021 0104 	bic.w	r1, r1, #4
 8002b4c:	6021      	str	r1, [r4, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d13d      	bne.n	8002bce <_printf_i+0x16a>
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	f040 808e 	bne.w	8002c74 <_printf_i+0x210>
 8002b58:	4665      	mov	r5, ip
 8002b5a:	2a08      	cmp	r2, #8
 8002b5c:	d10b      	bne.n	8002b76 <_printf_i+0x112>
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	07db      	lsls	r3, r3, #31
 8002b62:	d508      	bpl.n	8002b76 <_printf_i+0x112>
 8002b64:	6923      	ldr	r3, [r4, #16]
 8002b66:	6862      	ldr	r2, [r4, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	bfde      	ittt	le
 8002b6c:	2330      	movle	r3, #48	; 0x30
 8002b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b76:	ebac 0305 	sub.w	r3, ip, r5
 8002b7a:	6123      	str	r3, [r4, #16]
 8002b7c:	f8cd 8000 	str.w	r8, [sp]
 8002b80:	463b      	mov	r3, r7
 8002b82:	aa03      	add	r2, sp, #12
 8002b84:	4621      	mov	r1, r4
 8002b86:	4630      	mov	r0, r6
 8002b88:	f7ff fef6 	bl	8002978 <_printf_common>
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	d14d      	bne.n	8002c2c <_printf_i+0x1c8>
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	b005      	add	sp, #20
 8002b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b9a:	4839      	ldr	r0, [pc, #228]	; (8002c80 <_printf_i+0x21c>)
 8002b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	6821      	ldr	r1, [r4, #0]
 8002ba4:	1d1d      	adds	r5, r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6015      	str	r5, [r2, #0]
 8002baa:	060a      	lsls	r2, r1, #24
 8002bac:	d50b      	bpl.n	8002bc6 <_printf_i+0x162>
 8002bae:	07ca      	lsls	r2, r1, #31
 8002bb0:	bf44      	itt	mi
 8002bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8002bb6:	6021      	strmi	r1, [r4, #0]
 8002bb8:	b91b      	cbnz	r3, 8002bc2 <_printf_i+0x15e>
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	f022 0220 	bic.w	r2, r2, #32
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	e7b7      	b.n	8002b36 <_printf_i+0xd2>
 8002bc6:	064d      	lsls	r5, r1, #25
 8002bc8:	bf48      	it	mi
 8002bca:	b29b      	uxthmi	r3, r3
 8002bcc:	e7ef      	b.n	8002bae <_printf_i+0x14a>
 8002bce:	4665      	mov	r5, ip
 8002bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8002bd8:	5cc3      	ldrb	r3, [r0, r3]
 8002bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bde:	460b      	mov	r3, r1
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d1f5      	bne.n	8002bd0 <_printf_i+0x16c>
 8002be4:	e7b9      	b.n	8002b5a <_printf_i+0xf6>
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	6825      	ldr	r5, [r4, #0]
 8002bea:	1d18      	adds	r0, r3, #4
 8002bec:	6961      	ldr	r1, [r4, #20]
 8002bee:	6010      	str	r0, [r2, #0]
 8002bf0:	0628      	lsls	r0, r5, #24
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	d501      	bpl.n	8002bfa <_printf_i+0x196>
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	e002      	b.n	8002c00 <_printf_i+0x19c>
 8002bfa:	066a      	lsls	r2, r5, #25
 8002bfc:	d5fb      	bpl.n	8002bf6 <_printf_i+0x192>
 8002bfe:	8019      	strh	r1, [r3, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	4665      	mov	r5, ip
 8002c04:	6123      	str	r3, [r4, #16]
 8002c06:	e7b9      	b.n	8002b7c <_printf_i+0x118>
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	1d19      	adds	r1, r3, #4
 8002c0c:	6011      	str	r1, [r2, #0]
 8002c0e:	681d      	ldr	r5, [r3, #0]
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	2100      	movs	r1, #0
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 f837 	bl	8002c88 <memchr>
 8002c1a:	b108      	cbz	r0, 8002c20 <_printf_i+0x1bc>
 8002c1c:	1b40      	subs	r0, r0, r5
 8002c1e:	6060      	str	r0, [r4, #4]
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	6123      	str	r3, [r4, #16]
 8002c24:	2300      	movs	r3, #0
 8002c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c2a:	e7a7      	b.n	8002b7c <_printf_i+0x118>
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	462a      	mov	r2, r5
 8002c30:	4639      	mov	r1, r7
 8002c32:	4630      	mov	r0, r6
 8002c34:	47c0      	blx	r8
 8002c36:	3001      	adds	r0, #1
 8002c38:	d0aa      	beq.n	8002b90 <_printf_i+0x12c>
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	079b      	lsls	r3, r3, #30
 8002c3e:	d413      	bmi.n	8002c68 <_printf_i+0x204>
 8002c40:	68e0      	ldr	r0, [r4, #12]
 8002c42:	9b03      	ldr	r3, [sp, #12]
 8002c44:	4298      	cmp	r0, r3
 8002c46:	bfb8      	it	lt
 8002c48:	4618      	movlt	r0, r3
 8002c4a:	e7a3      	b.n	8002b94 <_printf_i+0x130>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	464a      	mov	r2, r9
 8002c50:	4639      	mov	r1, r7
 8002c52:	4630      	mov	r0, r6
 8002c54:	47c0      	blx	r8
 8002c56:	3001      	adds	r0, #1
 8002c58:	d09a      	beq.n	8002b90 <_printf_i+0x12c>
 8002c5a:	3501      	adds	r5, #1
 8002c5c:	68e3      	ldr	r3, [r4, #12]
 8002c5e:	9a03      	ldr	r2, [sp, #12]
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	42ab      	cmp	r3, r5
 8002c64:	dcf2      	bgt.n	8002c4c <_printf_i+0x1e8>
 8002c66:	e7eb      	b.n	8002c40 <_printf_i+0x1dc>
 8002c68:	2500      	movs	r5, #0
 8002c6a:	f104 0919 	add.w	r9, r4, #25
 8002c6e:	e7f5      	b.n	8002c5c <_printf_i+0x1f8>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ac      	bne.n	8002bce <_printf_i+0x16a>
 8002c74:	7803      	ldrb	r3, [r0, #0]
 8002c76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c7e:	e76c      	b.n	8002b5a <_printf_i+0xf6>
 8002c80:	08004631 	.word	0x08004631
 8002c84:	08004642 	.word	0x08004642

08002c88 <memchr>:
 8002c88:	b510      	push	{r4, lr}
 8002c8a:	b2c9      	uxtb	r1, r1
 8002c8c:	4402      	add	r2, r0
 8002c8e:	4290      	cmp	r0, r2
 8002c90:	4603      	mov	r3, r0
 8002c92:	d101      	bne.n	8002c98 <memchr+0x10>
 8002c94:	2300      	movs	r3, #0
 8002c96:	e003      	b.n	8002ca0 <memchr+0x18>
 8002c98:	781c      	ldrb	r4, [r3, #0]
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	428c      	cmp	r4, r1
 8002c9e:	d1f6      	bne.n	8002c8e <memchr+0x6>
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <memcpy>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	1e43      	subs	r3, r0, #1
 8002ca8:	440a      	add	r2, r1
 8002caa:	4291      	cmp	r1, r2
 8002cac:	d100      	bne.n	8002cb0 <memcpy+0xc>
 8002cae:	bd10      	pop	{r4, pc}
 8002cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cb8:	e7f7      	b.n	8002caa <memcpy+0x6>

08002cba <memmove>:
 8002cba:	4288      	cmp	r0, r1
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	eb01 0302 	add.w	r3, r1, r2
 8002cc2:	d807      	bhi.n	8002cd4 <memmove+0x1a>
 8002cc4:	1e42      	subs	r2, r0, #1
 8002cc6:	4299      	cmp	r1, r3
 8002cc8:	d00a      	beq.n	8002ce0 <memmove+0x26>
 8002cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002cd2:	e7f8      	b.n	8002cc6 <memmove+0xc>
 8002cd4:	4283      	cmp	r3, r0
 8002cd6:	d9f5      	bls.n	8002cc4 <memmove+0xa>
 8002cd8:	1881      	adds	r1, r0, r2
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	42d3      	cmn	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memmove+0x28>
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ce6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cea:	e7f7      	b.n	8002cdc <memmove+0x22>

08002cec <_free_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	4605      	mov	r5, r0
 8002cf0:	2900      	cmp	r1, #0
 8002cf2:	d043      	beq.n	8002d7c <_free_r+0x90>
 8002cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf8:	1f0c      	subs	r4, r1, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	18e4      	addlt	r4, r4, r3
 8002d00:	f000 f8d0 	bl	8002ea4 <__malloc_lock>
 8002d04:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <_free_r+0x94>)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	b933      	cbnz	r3, 8002d1a <_free_r+0x2e>
 8002d0c:	6063      	str	r3, [r4, #4]
 8002d0e:	6014      	str	r4, [r2, #0]
 8002d10:	4628      	mov	r0, r5
 8002d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d16:	f000 b8c6 	b.w	8002ea6 <__malloc_unlock>
 8002d1a:	42a3      	cmp	r3, r4
 8002d1c:	d90b      	bls.n	8002d36 <_free_r+0x4a>
 8002d1e:	6821      	ldr	r1, [r4, #0]
 8002d20:	1862      	adds	r2, r4, r1
 8002d22:	4293      	cmp	r3, r2
 8002d24:	bf01      	itttt	eq
 8002d26:	681a      	ldreq	r2, [r3, #0]
 8002d28:	685b      	ldreq	r3, [r3, #4]
 8002d2a:	1852      	addeq	r2, r2, r1
 8002d2c:	6022      	streq	r2, [r4, #0]
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	6004      	str	r4, [r0, #0]
 8002d32:	e7ed      	b.n	8002d10 <_free_r+0x24>
 8002d34:	4613      	mov	r3, r2
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	b10a      	cbz	r2, 8002d3e <_free_r+0x52>
 8002d3a:	42a2      	cmp	r2, r4
 8002d3c:	d9fa      	bls.n	8002d34 <_free_r+0x48>
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	1858      	adds	r0, r3, r1
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	d10b      	bne.n	8002d5e <_free_r+0x72>
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	4401      	add	r1, r0
 8002d4a:	1858      	adds	r0, r3, r1
 8002d4c:	4282      	cmp	r2, r0
 8002d4e:	6019      	str	r1, [r3, #0]
 8002d50:	d1de      	bne.n	8002d10 <_free_r+0x24>
 8002d52:	6810      	ldr	r0, [r2, #0]
 8002d54:	6852      	ldr	r2, [r2, #4]
 8002d56:	4401      	add	r1, r0
 8002d58:	6019      	str	r1, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	e7d8      	b.n	8002d10 <_free_r+0x24>
 8002d5e:	d902      	bls.n	8002d66 <_free_r+0x7a>
 8002d60:	230c      	movs	r3, #12
 8002d62:	602b      	str	r3, [r5, #0]
 8002d64:	e7d4      	b.n	8002d10 <_free_r+0x24>
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	1821      	adds	r1, r4, r0
 8002d6a:	428a      	cmp	r2, r1
 8002d6c:	bf01      	itttt	eq
 8002d6e:	6811      	ldreq	r1, [r2, #0]
 8002d70:	6852      	ldreq	r2, [r2, #4]
 8002d72:	1809      	addeq	r1, r1, r0
 8002d74:	6021      	streq	r1, [r4, #0]
 8002d76:	6062      	str	r2, [r4, #4]
 8002d78:	605c      	str	r4, [r3, #4]
 8002d7a:	e7c9      	b.n	8002d10 <_free_r+0x24>
 8002d7c:	bd38      	pop	{r3, r4, r5, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000094 	.word	0x20000094

08002d84 <_malloc_r>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	1ccd      	adds	r5, r1, #3
 8002d88:	f025 0503 	bic.w	r5, r5, #3
 8002d8c:	3508      	adds	r5, #8
 8002d8e:	2d0c      	cmp	r5, #12
 8002d90:	bf38      	it	cc
 8002d92:	250c      	movcc	r5, #12
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	4606      	mov	r6, r0
 8002d98:	db01      	blt.n	8002d9e <_malloc_r+0x1a>
 8002d9a:	42a9      	cmp	r1, r5
 8002d9c:	d903      	bls.n	8002da6 <_malloc_r+0x22>
 8002d9e:	230c      	movs	r3, #12
 8002da0:	6033      	str	r3, [r6, #0]
 8002da2:	2000      	movs	r0, #0
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	f000 f87d 	bl	8002ea4 <__malloc_lock>
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <_malloc_r+0xac>)
 8002dac:	6814      	ldr	r4, [r2, #0]
 8002dae:	4621      	mov	r1, r4
 8002db0:	b991      	cbnz	r1, 8002dd8 <_malloc_r+0x54>
 8002db2:	4c20      	ldr	r4, [pc, #128]	; (8002e34 <_malloc_r+0xb0>)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	b91b      	cbnz	r3, 8002dc0 <_malloc_r+0x3c>
 8002db8:	4630      	mov	r0, r6
 8002dba:	f000 f863 	bl	8002e84 <_sbrk_r>
 8002dbe:	6020      	str	r0, [r4, #0]
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f000 f85e 	bl	8002e84 <_sbrk_r>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d124      	bne.n	8002e16 <_malloc_r+0x92>
 8002dcc:	230c      	movs	r3, #12
 8002dce:	4630      	mov	r0, r6
 8002dd0:	6033      	str	r3, [r6, #0]
 8002dd2:	f000 f868 	bl	8002ea6 <__malloc_unlock>
 8002dd6:	e7e4      	b.n	8002da2 <_malloc_r+0x1e>
 8002dd8:	680b      	ldr	r3, [r1, #0]
 8002dda:	1b5b      	subs	r3, r3, r5
 8002ddc:	d418      	bmi.n	8002e10 <_malloc_r+0x8c>
 8002dde:	2b0b      	cmp	r3, #11
 8002de0:	d90f      	bls.n	8002e02 <_malloc_r+0x7e>
 8002de2:	600b      	str	r3, [r1, #0]
 8002de4:	18cc      	adds	r4, r1, r3
 8002de6:	50cd      	str	r5, [r1, r3]
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 f85c 	bl	8002ea6 <__malloc_unlock>
 8002dee:	f104 000b 	add.w	r0, r4, #11
 8002df2:	1d23      	adds	r3, r4, #4
 8002df4:	f020 0007 	bic.w	r0, r0, #7
 8002df8:	1ac3      	subs	r3, r0, r3
 8002dfa:	d0d3      	beq.n	8002da4 <_malloc_r+0x20>
 8002dfc:	425a      	negs	r2, r3
 8002dfe:	50e2      	str	r2, [r4, r3]
 8002e00:	e7d0      	b.n	8002da4 <_malloc_r+0x20>
 8002e02:	684b      	ldr	r3, [r1, #4]
 8002e04:	428c      	cmp	r4, r1
 8002e06:	bf16      	itet	ne
 8002e08:	6063      	strne	r3, [r4, #4]
 8002e0a:	6013      	streq	r3, [r2, #0]
 8002e0c:	460c      	movne	r4, r1
 8002e0e:	e7eb      	b.n	8002de8 <_malloc_r+0x64>
 8002e10:	460c      	mov	r4, r1
 8002e12:	6849      	ldr	r1, [r1, #4]
 8002e14:	e7cc      	b.n	8002db0 <_malloc_r+0x2c>
 8002e16:	1cc4      	adds	r4, r0, #3
 8002e18:	f024 0403 	bic.w	r4, r4, #3
 8002e1c:	42a0      	cmp	r0, r4
 8002e1e:	d005      	beq.n	8002e2c <_malloc_r+0xa8>
 8002e20:	1a21      	subs	r1, r4, r0
 8002e22:	4630      	mov	r0, r6
 8002e24:	f000 f82e 	bl	8002e84 <_sbrk_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d0cf      	beq.n	8002dcc <_malloc_r+0x48>
 8002e2c:	6025      	str	r5, [r4, #0]
 8002e2e:	e7db      	b.n	8002de8 <_malloc_r+0x64>
 8002e30:	20000094 	.word	0x20000094
 8002e34:	20000098 	.word	0x20000098

08002e38 <_realloc_r>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	4607      	mov	r7, r0
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	460e      	mov	r6, r1
 8002e40:	b921      	cbnz	r1, 8002e4c <_realloc_r+0x14>
 8002e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e46:	4611      	mov	r1, r2
 8002e48:	f7ff bf9c 	b.w	8002d84 <_malloc_r>
 8002e4c:	b922      	cbnz	r2, 8002e58 <_realloc_r+0x20>
 8002e4e:	f7ff ff4d 	bl	8002cec <_free_r>
 8002e52:	4625      	mov	r5, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e58:	f000 f826 	bl	8002ea8 <_malloc_usable_size_r>
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d20f      	bcs.n	8002e80 <_realloc_r+0x48>
 8002e60:	4621      	mov	r1, r4
 8002e62:	4638      	mov	r0, r7
 8002e64:	f7ff ff8e 	bl	8002d84 <_malloc_r>
 8002e68:	4605      	mov	r5, r0
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d0f2      	beq.n	8002e54 <_realloc_r+0x1c>
 8002e6e:	4631      	mov	r1, r6
 8002e70:	4622      	mov	r2, r4
 8002e72:	f7ff ff17 	bl	8002ca4 <memcpy>
 8002e76:	4631      	mov	r1, r6
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f7ff ff37 	bl	8002cec <_free_r>
 8002e7e:	e7e9      	b.n	8002e54 <_realloc_r+0x1c>
 8002e80:	4635      	mov	r5, r6
 8002e82:	e7e7      	b.n	8002e54 <_realloc_r+0x1c>

08002e84 <_sbrk_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	2300      	movs	r3, #0
 8002e88:	4c05      	ldr	r4, [pc, #20]	; (8002ea0 <_sbrk_r+0x1c>)
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	f7ff fb48 	bl	8002524 <_sbrk>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <_sbrk_r+0x1a>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	b103      	cbz	r3, 8002e9e <_sbrk_r+0x1a>
 8002e9c:	602b      	str	r3, [r5, #0]
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	200000e0 	.word	0x200000e0

08002ea4 <__malloc_lock>:
 8002ea4:	4770      	bx	lr

08002ea6 <__malloc_unlock>:
 8002ea6:	4770      	bx	lr

08002ea8 <_malloc_usable_size_r>:
 8002ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eac:	1f18      	subs	r0, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bfbc      	itt	lt
 8002eb2:	580b      	ldrlt	r3, [r1, r0]
 8002eb4:	18c0      	addlt	r0, r0, r3
 8002eb6:	4770      	bx	lr

08002eb8 <floor>:
 8002eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ebc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8002ec0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8002ec4:	2e13      	cmp	r6, #19
 8002ec6:	4607      	mov	r7, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	460c      	mov	r4, r1
 8002ecc:	4605      	mov	r5, r0
 8002ece:	dc35      	bgt.n	8002f3c <floor+0x84>
 8002ed0:	2e00      	cmp	r6, #0
 8002ed2:	da16      	bge.n	8002f02 <floor+0x4a>
 8002ed4:	a336      	add	r3, pc, #216	; (adr r3, 8002fb0 <floor+0xf8>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd f93f 	bl	800015c <__adddf3>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f7fd fd81 	bl	80009e8 <__aeabi_dcmpgt>
 8002ee6:	b148      	cbz	r0, 8002efc <floor+0x44>
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	da5b      	bge.n	8002fa4 <floor+0xec>
 8002eec:	2500      	movs	r5, #0
 8002eee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002ef2:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <floor+0x100>)
 8002ef4:	433b      	orrs	r3, r7
 8002ef6:	42ab      	cmp	r3, r5
 8002ef8:	bf18      	it	ne
 8002efa:	4614      	movne	r4, r2
 8002efc:	4623      	mov	r3, r4
 8002efe:	462f      	mov	r7, r5
 8002f00:	e026      	b.n	8002f50 <floor+0x98>
 8002f02:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <floor+0x104>)
 8002f04:	fa42 f806 	asr.w	r8, r2, r6
 8002f08:	ea01 0208 	and.w	r2, r1, r8
 8002f0c:	4302      	orrs	r2, r0
 8002f0e:	d01f      	beq.n	8002f50 <floor+0x98>
 8002f10:	a327      	add	r3, pc, #156	; (adr r3, 8002fb0 <floor+0xf8>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd f921 	bl	800015c <__adddf3>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f7fd fd63 	bl	80009e8 <__aeabi_dcmpgt>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d0ea      	beq.n	8002efc <floor+0x44>
 8002f26:	2c00      	cmp	r4, #0
 8002f28:	bfbe      	ittt	lt
 8002f2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8002f2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8002f32:	19a4      	addlt	r4, r4, r6
 8002f34:	ea24 0408 	bic.w	r4, r4, r8
 8002f38:	2500      	movs	r5, #0
 8002f3a:	e7df      	b.n	8002efc <floor+0x44>
 8002f3c:	2e33      	cmp	r6, #51	; 0x33
 8002f3e:	dd0b      	ble.n	8002f58 <floor+0xa0>
 8002f40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002f44:	d104      	bne.n	8002f50 <floor+0x98>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f7fd f908 	bl	800015c <__adddf3>
 8002f4c:	4607      	mov	r7, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4638      	mov	r0, r7
 8002f52:	4619      	mov	r1, r3
 8002f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8002f60:	fa22 f808 	lsr.w	r8, r2, r8
 8002f64:	ea18 0f00 	tst.w	r8, r0
 8002f68:	d0f2      	beq.n	8002f50 <floor+0x98>
 8002f6a:	a311      	add	r3, pc, #68	; (adr r3, 8002fb0 <floor+0xf8>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd f8f4 	bl	800015c <__adddf3>
 8002f74:	2200      	movs	r2, #0
 8002f76:	2300      	movs	r3, #0
 8002f78:	f7fd fd36 	bl	80009e8 <__aeabi_dcmpgt>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d0bd      	beq.n	8002efc <floor+0x44>
 8002f80:	2c00      	cmp	r4, #0
 8002f82:	da02      	bge.n	8002f8a <floor+0xd2>
 8002f84:	2e14      	cmp	r6, #20
 8002f86:	d103      	bne.n	8002f90 <floor+0xd8>
 8002f88:	3401      	adds	r4, #1
 8002f8a:	ea25 0508 	bic.w	r5, r5, r8
 8002f8e:	e7b5      	b.n	8002efc <floor+0x44>
 8002f90:	2301      	movs	r3, #1
 8002f92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002f96:	fa03 f606 	lsl.w	r6, r3, r6
 8002f9a:	4435      	add	r5, r6
 8002f9c:	42bd      	cmp	r5, r7
 8002f9e:	bf38      	it	cc
 8002fa0:	18e4      	addcc	r4, r4, r3
 8002fa2:	e7f2      	b.n	8002f8a <floor+0xd2>
 8002fa4:	2500      	movs	r5, #0
 8002fa6:	462c      	mov	r4, r5
 8002fa8:	e7a8      	b.n	8002efc <floor+0x44>
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w
 8002fb0:	8800759c 	.word	0x8800759c
 8002fb4:	7e37e43c 	.word	0x7e37e43c
 8002fb8:	bff00000 	.word	0xbff00000
 8002fbc:	000fffff 	.word	0x000fffff

08002fc0 <trunc>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8002fc6:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8002fca:	2a13      	cmp	r2, #19
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	dc10      	bgt.n	8002ff4 <trunc+0x34>
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	bfb3      	iteet	lt
 8002fd6:	2000      	movlt	r0, #0
 8002fd8:	2000      	movge	r0, #0
 8002fda:	4b10      	ldrge	r3, [pc, #64]	; (800301c <trunc+0x5c>)
 8002fdc:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8002fe0:	bfa4      	itt	ge
 8002fe2:	fa43 f202 	asrge.w	r2, r3, r2
 8002fe6:	ea24 0102 	bicge.w	r1, r4, r2
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff4:	2a33      	cmp	r2, #51	; 0x33
 8002ff6:	dd07      	ble.n	8003008 <trunc+0x48>
 8002ff8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ffc:	d1f7      	bne.n	8002fee <trunc+0x2e>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	f7fd f8ab 	bl	800015c <__adddf3>
 8003006:	e7f0      	b.n	8002fea <trunc+0x2a>
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8003010:	fa22 f505 	lsr.w	r5, r2, r5
 8003014:	ea20 0005 	bic.w	r0, r0, r5
 8003018:	e7e7      	b.n	8002fea <trunc+0x2a>
 800301a:	bf00      	nop
 800301c:	000fffff 	.word	0x000fffff

08003020 <log10>:
 8003020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003024:	b08b      	sub	sp, #44	; 0x2c
 8003026:	4604      	mov	r4, r0
 8003028:	460d      	mov	r5, r1
 800302a:	f000 f9d1 	bl	80033d0 <__ieee754_log10>
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <log10+0xe0>)
 8003030:	4680      	mov	r8, r0
 8003032:	f993 6000 	ldrsb.w	r6, [r3]
 8003036:	4689      	mov	r9, r1
 8003038:	1c73      	adds	r3, r6, #1
 800303a:	d05c      	beq.n	80030f6 <log10+0xd6>
 800303c:	4622      	mov	r2, r4
 800303e:	462b      	mov	r3, r5
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd fcda 	bl	80009fc <__aeabi_dcmpun>
 8003048:	4607      	mov	r7, r0
 800304a:	2800      	cmp	r0, #0
 800304c:	d153      	bne.n	80030f6 <log10+0xd6>
 800304e:	2200      	movs	r2, #0
 8003050:	2300      	movs	r3, #0
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f7fd fcb3 	bl	80009c0 <__aeabi_dcmple>
 800305a:	2800      	cmp	r0, #0
 800305c:	d04b      	beq.n	80030f6 <log10+0xd6>
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <log10+0xe4>)
 8003060:	9708      	str	r7, [sp, #32]
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003068:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800306c:	b9a6      	cbnz	r6, 8003098 <log10+0x78>
 800306e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <log10+0xe8>)
 8003074:	4620      	mov	r0, r4
 8003076:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800307a:	4629      	mov	r1, r5
 800307c:	2200      	movs	r2, #0
 800307e:	2300      	movs	r3, #0
 8003080:	f7fd fc8a 	bl	8000998 <__aeabi_dcmpeq>
 8003084:	bb40      	cbnz	r0, 80030d8 <log10+0xb8>
 8003086:	2301      	movs	r3, #1
 8003088:	2e02      	cmp	r6, #2
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	d119      	bne.n	80030c2 <log10+0xa2>
 800308e:	f7ff facf 	bl	8002630 <__errno>
 8003092:	2321      	movs	r3, #33	; 0x21
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	e019      	b.n	80030cc <log10+0xac>
 8003098:	2200      	movs	r2, #0
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <log10+0xec>)
 800309c:	4620      	mov	r0, r4
 800309e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80030a2:	4629      	mov	r1, r5
 80030a4:	2200      	movs	r2, #0
 80030a6:	2300      	movs	r3, #0
 80030a8:	f7fd fc76 	bl	8000998 <__aeabi_dcmpeq>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0ea      	beq.n	8003086 <log10+0x66>
 80030b0:	2302      	movs	r3, #2
 80030b2:	429e      	cmp	r6, r3
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	d111      	bne.n	80030dc <log10+0xbc>
 80030b8:	f7ff faba 	bl	8002630 <__errno>
 80030bc:	2322      	movs	r3, #34	; 0x22
 80030be:	6003      	str	r3, [r0, #0]
 80030c0:	e011      	b.n	80030e6 <log10+0xc6>
 80030c2:	4668      	mov	r0, sp
 80030c4:	f000 ffc8 	bl	8004058 <matherr>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d0e0      	beq.n	800308e <log10+0x6e>
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <log10+0xf0>)
 80030ce:	f000 ffc5 	bl	800405c <nan>
 80030d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80030d6:	e006      	b.n	80030e6 <log10+0xc6>
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4668      	mov	r0, sp
 80030de:	f000 ffbb 	bl	8004058 <matherr>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d0e8      	beq.n	80030b8 <log10+0x98>
 80030e6:	9b08      	ldr	r3, [sp, #32]
 80030e8:	b11b      	cbz	r3, 80030f2 <log10+0xd2>
 80030ea:	f7ff faa1 	bl	8002630 <__errno>
 80030ee:	9b08      	ldr	r3, [sp, #32]
 80030f0:	6003      	str	r3, [r0, #0]
 80030f2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80030f6:	4640      	mov	r0, r8
 80030f8:	4649      	mov	r1, r9
 80030fa:	b00b      	add	sp, #44	; 0x2c
 80030fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003100:	20000070 	.word	0x20000070
 8003104:	08004653 	.word	0x08004653
 8003108:	c7efffff 	.word	0xc7efffff
 800310c:	fff00000 	.word	0xfff00000
 8003110:	08004625 	.word	0x08004625

08003114 <pow>:
 8003114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003118:	b08f      	sub	sp, #60	; 0x3c
 800311a:	461d      	mov	r5, r3
 800311c:	4680      	mov	r8, r0
 800311e:	4689      	mov	r9, r1
 8003120:	4614      	mov	r4, r2
 8003122:	f000 f9d9 	bl	80034d8 <__ieee754_pow>
 8003126:	4fa1      	ldr	r7, [pc, #644]	; (80033ac <pow+0x298>)
 8003128:	e9cd 0100 	strd	r0, r1, [sp]
 800312c:	f997 3000 	ldrsb.w	r3, [r7]
 8003130:	463e      	mov	r6, r7
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	d05f      	beq.n	80031f8 <pow+0xe4>
 8003138:	4622      	mov	r2, r4
 800313a:	462b      	mov	r3, r5
 800313c:	4620      	mov	r0, r4
 800313e:	4629      	mov	r1, r5
 8003140:	f7fd fc5c 	bl	80009fc <__aeabi_dcmpun>
 8003144:	4682      	mov	sl, r0
 8003146:	2800      	cmp	r0, #0
 8003148:	d156      	bne.n	80031f8 <pow+0xe4>
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd fc53 	bl	80009fc <__aeabi_dcmpun>
 8003156:	9003      	str	r0, [sp, #12]
 8003158:	b1e8      	cbz	r0, 8003196 <pow+0x82>
 800315a:	2200      	movs	r2, #0
 800315c:	2300      	movs	r3, #0
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f7fd fc19 	bl	8000998 <__aeabi_dcmpeq>
 8003166:	2800      	cmp	r0, #0
 8003168:	d046      	beq.n	80031f8 <pow+0xe4>
 800316a:	2301      	movs	r3, #1
 800316c:	2200      	movs	r2, #0
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	4b8f      	ldr	r3, [pc, #572]	; (80033b0 <pow+0x29c>)
 8003172:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003176:	9305      	str	r3, [sp, #20]
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <pow+0x2a0>)
 800317a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800317e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003182:	9b02      	ldr	r3, [sp, #8]
 8003184:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d031      	beq.n	80031f0 <pow+0xdc>
 800318c:	a804      	add	r0, sp, #16
 800318e:	f000 ff63 	bl	8004058 <matherr>
 8003192:	bb38      	cbnz	r0, 80031e4 <pow+0xd0>
 8003194:	e058      	b.n	8003248 <pow+0x134>
 8003196:	f04f 0a00 	mov.w	sl, #0
 800319a:	f04f 0b00 	mov.w	fp, #0
 800319e:	4652      	mov	r2, sl
 80031a0:	465b      	mov	r3, fp
 80031a2:	4640      	mov	r0, r8
 80031a4:	4649      	mov	r1, r9
 80031a6:	f7fd fbf7 	bl	8000998 <__aeabi_dcmpeq>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d051      	beq.n	8003252 <pow+0x13e>
 80031ae:	4652      	mov	r2, sl
 80031b0:	465b      	mov	r3, fp
 80031b2:	4620      	mov	r0, r4
 80031b4:	4629      	mov	r1, r5
 80031b6:	f7fd fbef 	bl	8000998 <__aeabi_dcmpeq>
 80031ba:	4606      	mov	r6, r0
 80031bc:	b308      	cbz	r0, 8003202 <pow+0xee>
 80031be:	2301      	movs	r3, #1
 80031c0:	9304      	str	r3, [sp, #16]
 80031c2:	4b7b      	ldr	r3, [pc, #492]	; (80033b0 <pow+0x29c>)
 80031c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80031d0:	930c      	str	r3, [sp, #48]	; 0x30
 80031d2:	9b02      	ldr	r3, [sp, #8]
 80031d4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0d7      	beq.n	800318c <pow+0x78>
 80031dc:	2200      	movs	r2, #0
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <pow+0x2a0>)
 80031e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031e6:	b11b      	cbz	r3, 80031f0 <pow+0xdc>
 80031e8:	f7ff fa22 	bl	8002630 <__errno>
 80031ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ee:	6003      	str	r3, [r0, #0]
 80031f0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80031f4:	e9cd 3400 	strd	r3, r4, [sp]
 80031f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031fc:	b00f      	add	sp, #60	; 0x3c
 80031fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f000 ff21 	bl	800404c <finite>
 800320a:	2800      	cmp	r0, #0
 800320c:	d0f4      	beq.n	80031f8 <pow+0xe4>
 800320e:	4652      	mov	r2, sl
 8003210:	465b      	mov	r3, fp
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd fbc9 	bl	80009ac <__aeabi_dcmplt>
 800321a:	2800      	cmp	r0, #0
 800321c:	d0ec      	beq.n	80031f8 <pow+0xe4>
 800321e:	2301      	movs	r3, #1
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <pow+0x29c>)
 8003224:	960c      	str	r6, [sp, #48]	; 0x30
 8003226:	9305      	str	r3, [sp, #20]
 8003228:	f997 3000 	ldrsb.w	r3, [r7]
 800322c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003230:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003234:	b913      	cbnz	r3, 800323c <pow+0x128>
 8003236:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800323a:	e7a7      	b.n	800318c <pow+0x78>
 800323c:	2000      	movs	r0, #0
 800323e:	495e      	ldr	r1, [pc, #376]	; (80033b8 <pow+0x2a4>)
 8003240:	2b02      	cmp	r3, #2
 8003242:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003246:	d1a1      	bne.n	800318c <pow+0x78>
 8003248:	f7ff f9f2 	bl	8002630 <__errno>
 800324c:	2321      	movs	r3, #33	; 0x21
 800324e:	6003      	str	r3, [r0, #0]
 8003250:	e7c8      	b.n	80031e4 <pow+0xd0>
 8003252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003256:	f000 fef9 	bl	800404c <finite>
 800325a:	9002      	str	r0, [sp, #8]
 800325c:	2800      	cmp	r0, #0
 800325e:	d177      	bne.n	8003350 <pow+0x23c>
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f000 fef2 	bl	800404c <finite>
 8003268:	2800      	cmp	r0, #0
 800326a:	d071      	beq.n	8003350 <pow+0x23c>
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f000 feec 	bl	800404c <finite>
 8003274:	2800      	cmp	r0, #0
 8003276:	d06b      	beq.n	8003350 <pow+0x23c>
 8003278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7fd fbbc 	bl	80009fc <__aeabi_dcmpun>
 8003284:	f997 7000 	ldrsb.w	r7, [r7]
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <pow+0x29c>)
 800328a:	b1a0      	cbz	r0, 80032b6 <pow+0x1a2>
 800328c:	2201      	movs	r2, #1
 800328e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003292:	9b02      	ldr	r3, [sp, #8]
 8003294:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003298:	930c      	str	r3, [sp, #48]	; 0x30
 800329a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800329e:	2f00      	cmp	r7, #0
 80032a0:	d0c9      	beq.n	8003236 <pow+0x122>
 80032a2:	4652      	mov	r2, sl
 80032a4:	465b      	mov	r3, fp
 80032a6:	4650      	mov	r0, sl
 80032a8:	4659      	mov	r1, fp
 80032aa:	f7fd fa37 	bl	800071c <__aeabi_ddiv>
 80032ae:	2f02      	cmp	r7, #2
 80032b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032b4:	e7c7      	b.n	8003246 <pow+0x132>
 80032b6:	2203      	movs	r2, #3
 80032b8:	900c      	str	r0, [sp, #48]	; 0x30
 80032ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032be:	4620      	mov	r0, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	2200      	movs	r2, #0
 80032c4:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <pow+0x2a8>)
 80032c6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80032ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80032ce:	f7fd f8fb 	bl	80004c8 <__aeabi_dmul>
 80032d2:	4604      	mov	r4, r0
 80032d4:	460d      	mov	r5, r1
 80032d6:	bb17      	cbnz	r7, 800331e <pow+0x20a>
 80032d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <pow+0x2ac>)
 80032de:	4640      	mov	r0, r8
 80032e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80032e4:	4649      	mov	r1, r9
 80032e6:	4652      	mov	r2, sl
 80032e8:	465b      	mov	r3, fp
 80032ea:	f7fd fb5f 	bl	80009ac <__aeabi_dcmplt>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d054      	beq.n	800339c <pow+0x288>
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f000 feb7 	bl	8004068 <rint>
 80032fa:	4622      	mov	r2, r4
 80032fc:	462b      	mov	r3, r5
 80032fe:	f7fd fb4b 	bl	8000998 <__aeabi_dcmpeq>
 8003302:	b920      	cbnz	r0, 800330e <pow+0x1fa>
 8003304:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <pow+0x2b0>)
 800330a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800330e:	f996 3000 	ldrsb.w	r3, [r6]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d142      	bne.n	800339c <pow+0x288>
 8003316:	f7ff f98b 	bl	8002630 <__errno>
 800331a:	2322      	movs	r3, #34	; 0x22
 800331c:	e797      	b.n	800324e <pow+0x13a>
 800331e:	2200      	movs	r2, #0
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <pow+0x2b4>)
 8003322:	4640      	mov	r0, r8
 8003324:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003328:	4649      	mov	r1, r9
 800332a:	4652      	mov	r2, sl
 800332c:	465b      	mov	r3, fp
 800332e:	f7fd fb3d 	bl	80009ac <__aeabi_dcmplt>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0eb      	beq.n	800330e <pow+0x1fa>
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f000 fe95 	bl	8004068 <rint>
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	f7fd fb29 	bl	8000998 <__aeabi_dcmpeq>
 8003346:	2800      	cmp	r0, #0
 8003348:	d1e1      	bne.n	800330e <pow+0x1fa>
 800334a:	2200      	movs	r2, #0
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <pow+0x2a4>)
 800334e:	e7dc      	b.n	800330a <pow+0x1f6>
 8003350:	2200      	movs	r2, #0
 8003352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003356:	2300      	movs	r3, #0
 8003358:	f7fd fb1e 	bl	8000998 <__aeabi_dcmpeq>
 800335c:	2800      	cmp	r0, #0
 800335e:	f43f af4b 	beq.w	80031f8 <pow+0xe4>
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f000 fe71 	bl	800404c <finite>
 800336a:	2800      	cmp	r0, #0
 800336c:	f43f af44 	beq.w	80031f8 <pow+0xe4>
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f000 fe6a 	bl	800404c <finite>
 8003378:	2800      	cmp	r0, #0
 800337a:	f43f af3d 	beq.w	80031f8 <pow+0xe4>
 800337e:	2304      	movs	r3, #4
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <pow+0x29c>)
 8003384:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003388:	9305      	str	r3, [sp, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	2400      	movs	r4, #0
 800338e:	930c      	str	r3, [sp, #48]	; 0x30
 8003390:	2300      	movs	r3, #0
 8003392:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003396:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800339a:	e7b8      	b.n	800330e <pow+0x1fa>
 800339c:	a804      	add	r0, sp, #16
 800339e:	f000 fe5b 	bl	8004058 <matherr>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	f47f af1e 	bne.w	80031e4 <pow+0xd0>
 80033a8:	e7b5      	b.n	8003316 <pow+0x202>
 80033aa:	bf00      	nop
 80033ac:	20000070 	.word	0x20000070
 80033b0:	08004659 	.word	0x08004659
 80033b4:	3ff00000 	.word	0x3ff00000
 80033b8:	fff00000 	.word	0xfff00000
 80033bc:	3fe00000 	.word	0x3fe00000
 80033c0:	47efffff 	.word	0x47efffff
 80033c4:	c7efffff 	.word	0xc7efffff
 80033c8:	7ff00000 	.word	0x7ff00000
 80033cc:	00000000 	.word	0x00000000

080033d0 <__ieee754_log10>:
 80033d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80033d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	460b      	mov	r3, r1
 80033de:	da26      	bge.n	800342e <__ieee754_log10+0x5e>
 80033e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80033e4:	4302      	orrs	r2, r0
 80033e6:	d107      	bne.n	80033f8 <__ieee754_log10+0x28>
 80033e8:	2200      	movs	r2, #0
 80033ea:	2300      	movs	r3, #0
 80033ec:	2000      	movs	r0, #0
 80033ee:	4936      	ldr	r1, [pc, #216]	; (80034c8 <__ieee754_log10+0xf8>)
 80033f0:	f7fd f994 	bl	800071c <__aeabi_ddiv>
 80033f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f8:	2900      	cmp	r1, #0
 80033fa:	da05      	bge.n	8003408 <__ieee754_log10+0x38>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f7fc feab 	bl	8000158 <__aeabi_dsub>
 8003402:	2200      	movs	r2, #0
 8003404:	2300      	movs	r3, #0
 8003406:	e7f3      	b.n	80033f0 <__ieee754_log10+0x20>
 8003408:	2200      	movs	r2, #0
 800340a:	4b30      	ldr	r3, [pc, #192]	; (80034cc <__ieee754_log10+0xfc>)
 800340c:	f7fd f85c 	bl	80004c8 <__aeabi_dmul>
 8003410:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8003414:	4604      	mov	r4, r0
 8003416:	460d      	mov	r5, r1
 8003418:	460b      	mov	r3, r1
 800341a:	492d      	ldr	r1, [pc, #180]	; (80034d0 <__ieee754_log10+0x100>)
 800341c:	428b      	cmp	r3, r1
 800341e:	dd08      	ble.n	8003432 <__ieee754_log10+0x62>
 8003420:	4622      	mov	r2, r4
 8003422:	462b      	mov	r3, r5
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fc fe98 	bl	800015c <__adddf3>
 800342c:	e7e2      	b.n	80033f4 <__ieee754_log10+0x24>
 800342e:	2200      	movs	r2, #0
 8003430:	e7f3      	b.n	800341a <__ieee754_log10+0x4a>
 8003432:	1518      	asrs	r0, r3, #20
 8003434:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003438:	4410      	add	r0, r2
 800343a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800343e:	4448      	add	r0, r9
 8003440:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8003444:	f7fc ffd6 	bl	80003f4 <__aeabi_i2d>
 8003448:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800344c:	3303      	adds	r3, #3
 800344e:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8003452:	4606      	mov	r6, r0
 8003454:	460f      	mov	r7, r1
 8003456:	4620      	mov	r0, r4
 8003458:	4629      	mov	r1, r5
 800345a:	f000 ff01 	bl	8004260 <__ieee754_log>
 800345e:	a314      	add	r3, pc, #80	; (adr r3, 80034b0 <__ieee754_log10+0xe0>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	4680      	mov	r8, r0
 8003466:	4689      	mov	r9, r1
 8003468:	4630      	mov	r0, r6
 800346a:	4639      	mov	r1, r7
 800346c:	f7fd f82c 	bl	80004c8 <__aeabi_dmul>
 8003470:	a311      	add	r3, pc, #68	; (adr r3, 80034b8 <__ieee754_log10+0xe8>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	4604      	mov	r4, r0
 8003478:	460d      	mov	r5, r1
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f7fd f823 	bl	80004c8 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fc fe67 	bl	800015c <__adddf3>
 800348e:	a30c      	add	r3, pc, #48	; (adr r3, 80034c0 <__ieee754_log10+0xf0>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	4604      	mov	r4, r0
 8003496:	460d      	mov	r5, r1
 8003498:	4630      	mov	r0, r6
 800349a:	4639      	mov	r1, r7
 800349c:	f7fd f814 	bl	80004c8 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	e7be      	b.n	8003428 <__ieee754_log10+0x58>
 80034aa:	bf00      	nop
 80034ac:	f3af 8000 	nop.w
 80034b0:	11f12b36 	.word	0x11f12b36
 80034b4:	3d59fef3 	.word	0x3d59fef3
 80034b8:	1526e50e 	.word	0x1526e50e
 80034bc:	3fdbcb7b 	.word	0x3fdbcb7b
 80034c0:	509f6000 	.word	0x509f6000
 80034c4:	3fd34413 	.word	0x3fd34413
 80034c8:	c3500000 	.word	0xc3500000
 80034cc:	43500000 	.word	0x43500000
 80034d0:	7fefffff 	.word	0x7fefffff
 80034d4:	00000000 	.word	0x00000000

080034d8 <__ieee754_pow>:
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	b091      	sub	sp, #68	; 0x44
 80034de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034e2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80034e6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80034ea:	ea55 0302 	orrs.w	r3, r5, r2
 80034ee:	4607      	mov	r7, r0
 80034f0:	4688      	mov	r8, r1
 80034f2:	f000 84b7 	beq.w	8003e64 <__ieee754_pow+0x98c>
 80034f6:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <__ieee754_pow+0x220>)
 80034f8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80034fc:	429c      	cmp	r4, r3
 80034fe:	4689      	mov	r9, r1
 8003500:	4682      	mov	sl, r0
 8003502:	dc09      	bgt.n	8003518 <__ieee754_pow+0x40>
 8003504:	d103      	bne.n	800350e <__ieee754_pow+0x36>
 8003506:	b938      	cbnz	r0, 8003518 <__ieee754_pow+0x40>
 8003508:	42a5      	cmp	r5, r4
 800350a:	dc0d      	bgt.n	8003528 <__ieee754_pow+0x50>
 800350c:	e001      	b.n	8003512 <__ieee754_pow+0x3a>
 800350e:	429d      	cmp	r5, r3
 8003510:	dc02      	bgt.n	8003518 <__ieee754_pow+0x40>
 8003512:	429d      	cmp	r5, r3
 8003514:	d10e      	bne.n	8003534 <__ieee754_pow+0x5c>
 8003516:	b16a      	cbz	r2, 8003534 <__ieee754_pow+0x5c>
 8003518:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800351c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003520:	ea54 030a 	orrs.w	r3, r4, sl
 8003524:	f000 849e 	beq.w	8003e64 <__ieee754_pow+0x98c>
 8003528:	4874      	ldr	r0, [pc, #464]	; (80036fc <__ieee754_pow+0x224>)
 800352a:	b011      	add	sp, #68	; 0x44
 800352c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	f000 bd94 	b.w	800405c <nan>
 8003534:	f1b9 0f00 	cmp.w	r9, #0
 8003538:	da53      	bge.n	80035e2 <__ieee754_pow+0x10a>
 800353a:	4b71      	ldr	r3, [pc, #452]	; (8003700 <__ieee754_pow+0x228>)
 800353c:	429d      	cmp	r5, r3
 800353e:	dc4e      	bgt.n	80035de <__ieee754_pow+0x106>
 8003540:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003544:	429d      	cmp	r5, r3
 8003546:	dd4c      	ble.n	80035e2 <__ieee754_pow+0x10a>
 8003548:	152b      	asrs	r3, r5, #20
 800354a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800354e:	2b14      	cmp	r3, #20
 8003550:	dd28      	ble.n	80035a4 <__ieee754_pow+0xcc>
 8003552:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003556:	fa22 f103 	lsr.w	r1, r2, r3
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	4293      	cmp	r3, r2
 8003560:	d13f      	bne.n	80035e2 <__ieee754_pow+0x10a>
 8003562:	f001 0101 	and.w	r1, r1, #1
 8003566:	f1c1 0302 	rsb	r3, r1, #2
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2a00      	cmp	r2, #0
 800356e:	d15c      	bne.n	800362a <__ieee754_pow+0x152>
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <__ieee754_pow+0x220>)
 8003572:	429d      	cmp	r5, r3
 8003574:	d126      	bne.n	80035c4 <__ieee754_pow+0xec>
 8003576:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800357a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800357e:	ea53 030a 	orrs.w	r3, r3, sl
 8003582:	f000 846f 	beq.w	8003e64 <__ieee754_pow+0x98c>
 8003586:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <__ieee754_pow+0x22c>)
 8003588:	429c      	cmp	r4, r3
 800358a:	dd2c      	ble.n	80035e6 <__ieee754_pow+0x10e>
 800358c:	2e00      	cmp	r6, #0
 800358e:	f280 846f 	bge.w	8003e70 <__ieee754_pow+0x998>
 8003592:	f04f 0b00 	mov.w	fp, #0
 8003596:	f04f 0c00 	mov.w	ip, #0
 800359a:	4658      	mov	r0, fp
 800359c:	4661      	mov	r1, ip
 800359e:	b011      	add	sp, #68	; 0x44
 80035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d13e      	bne.n	8003626 <__ieee754_pow+0x14e>
 80035a8:	f1c3 0314 	rsb	r3, r3, #20
 80035ac:	fa45 f103 	asr.w	r1, r5, r3
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	f040 8463 	bne.w	8003e80 <__ieee754_pow+0x9a8>
 80035ba:	f001 0101 	and.w	r1, r1, #1
 80035be:	f1c1 0302 	rsb	r3, r1, #2
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <__ieee754_pow+0x230>)
 80035c6:	429d      	cmp	r5, r3
 80035c8:	d114      	bne.n	80035f4 <__ieee754_pow+0x11c>
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	f280 8454 	bge.w	8003e78 <__ieee754_pow+0x9a0>
 80035d0:	463a      	mov	r2, r7
 80035d2:	4643      	mov	r3, r8
 80035d4:	2000      	movs	r0, #0
 80035d6:	494c      	ldr	r1, [pc, #304]	; (8003708 <__ieee754_pow+0x230>)
 80035d8:	f7fd f8a0 	bl	800071c <__aeabi_ddiv>
 80035dc:	e013      	b.n	8003606 <__ieee754_pow+0x12e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e7c3      	b.n	800356a <__ieee754_pow+0x92>
 80035e2:	2300      	movs	r3, #0
 80035e4:	e7c1      	b.n	800356a <__ieee754_pow+0x92>
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	dad3      	bge.n	8003592 <__ieee754_pow+0xba>
 80035ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80035ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80035f2:	e7d2      	b.n	800359a <__ieee754_pow+0xc2>
 80035f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80035f8:	d108      	bne.n	800360c <__ieee754_pow+0x134>
 80035fa:	463a      	mov	r2, r7
 80035fc:	4643      	mov	r3, r8
 80035fe:	4638      	mov	r0, r7
 8003600:	4641      	mov	r1, r8
 8003602:	f7fc ff61 	bl	80004c8 <__aeabi_dmul>
 8003606:	4683      	mov	fp, r0
 8003608:	468c      	mov	ip, r1
 800360a:	e7c6      	b.n	800359a <__ieee754_pow+0xc2>
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <__ieee754_pow+0x234>)
 800360e:	429e      	cmp	r6, r3
 8003610:	d10b      	bne.n	800362a <__ieee754_pow+0x152>
 8003612:	f1b9 0f00 	cmp.w	r9, #0
 8003616:	db08      	blt.n	800362a <__ieee754_pow+0x152>
 8003618:	4638      	mov	r0, r7
 800361a:	4641      	mov	r1, r8
 800361c:	b011      	add	sp, #68	; 0x44
 800361e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003622:	f000 bc63 	b.w	8003eec <__ieee754_sqrt>
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4638      	mov	r0, r7
 800362c:	4641      	mov	r1, r8
 800362e:	f000 fd09 	bl	8004044 <fabs>
 8003632:	4683      	mov	fp, r0
 8003634:	468c      	mov	ip, r1
 8003636:	f1ba 0f00 	cmp.w	sl, #0
 800363a:	d12b      	bne.n	8003694 <__ieee754_pow+0x1bc>
 800363c:	b124      	cbz	r4, 8003648 <__ieee754_pow+0x170>
 800363e:	4b32      	ldr	r3, [pc, #200]	; (8003708 <__ieee754_pow+0x230>)
 8003640:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003644:	429a      	cmp	r2, r3
 8003646:	d125      	bne.n	8003694 <__ieee754_pow+0x1bc>
 8003648:	2e00      	cmp	r6, #0
 800364a:	da07      	bge.n	800365c <__ieee754_pow+0x184>
 800364c:	465a      	mov	r2, fp
 800364e:	4663      	mov	r3, ip
 8003650:	2000      	movs	r0, #0
 8003652:	492d      	ldr	r1, [pc, #180]	; (8003708 <__ieee754_pow+0x230>)
 8003654:	f7fd f862 	bl	800071c <__aeabi_ddiv>
 8003658:	4683      	mov	fp, r0
 800365a:	468c      	mov	ip, r1
 800365c:	f1b9 0f00 	cmp.w	r9, #0
 8003660:	da9b      	bge.n	800359a <__ieee754_pow+0xc2>
 8003662:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003666:	9b00      	ldr	r3, [sp, #0]
 8003668:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800366c:	4323      	orrs	r3, r4
 800366e:	d108      	bne.n	8003682 <__ieee754_pow+0x1aa>
 8003670:	465a      	mov	r2, fp
 8003672:	4663      	mov	r3, ip
 8003674:	4658      	mov	r0, fp
 8003676:	4661      	mov	r1, ip
 8003678:	f7fc fd6e 	bl	8000158 <__aeabi_dsub>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	e7aa      	b.n	80035d8 <__ieee754_pow+0x100>
 8003682:	9b00      	ldr	r3, [sp, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d188      	bne.n	800359a <__ieee754_pow+0xc2>
 8003688:	4658      	mov	r0, fp
 800368a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800368e:	4683      	mov	fp, r0
 8003690:	469c      	mov	ip, r3
 8003692:	e782      	b.n	800359a <__ieee754_pow+0xc2>
 8003694:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003698:	f109 33ff 	add.w	r3, r9, #4294967295
 800369c:	930d      	str	r3, [sp, #52]	; 0x34
 800369e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036a0:	9b00      	ldr	r3, [sp, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d104      	bne.n	80036b0 <__ieee754_pow+0x1d8>
 80036a6:	463a      	mov	r2, r7
 80036a8:	4643      	mov	r3, r8
 80036aa:	4638      	mov	r0, r7
 80036ac:	4641      	mov	r1, r8
 80036ae:	e7e3      	b.n	8003678 <__ieee754_pow+0x1a0>
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <__ieee754_pow+0x238>)
 80036b2:	429d      	cmp	r5, r3
 80036b4:	f340 80fe 	ble.w	80038b4 <__ieee754_pow+0x3dc>
 80036b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80036bc:	429d      	cmp	r5, r3
 80036be:	dd0b      	ble.n	80036d8 <__ieee754_pow+0x200>
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <__ieee754_pow+0x22c>)
 80036c2:	429c      	cmp	r4, r3
 80036c4:	dc0e      	bgt.n	80036e4 <__ieee754_pow+0x20c>
 80036c6:	2e00      	cmp	r6, #0
 80036c8:	f6bf af63 	bge.w	8003592 <__ieee754_pow+0xba>
 80036cc:	a308      	add	r3, pc, #32	; (adr r3, 80036f0 <__ieee754_pow+0x218>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	e794      	b.n	8003602 <__ieee754_pow+0x12a>
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <__ieee754_pow+0x23c>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	ddf3      	ble.n	80036c6 <__ieee754_pow+0x1ee>
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <__ieee754_pow+0x230>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	dd19      	ble.n	8003718 <__ieee754_pow+0x240>
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	dcf1      	bgt.n	80036cc <__ieee754_pow+0x1f4>
 80036e8:	e753      	b.n	8003592 <__ieee754_pow+0xba>
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	8800759c 	.word	0x8800759c
 80036f4:	7e37e43c 	.word	0x7e37e43c
 80036f8:	7ff00000 	.word	0x7ff00000
 80036fc:	08004625 	.word	0x08004625
 8003700:	433fffff 	.word	0x433fffff
 8003704:	3fefffff 	.word	0x3fefffff
 8003708:	3ff00000 	.word	0x3ff00000
 800370c:	3fe00000 	.word	0x3fe00000
 8003710:	41e00000 	.word	0x41e00000
 8003714:	3feffffe 	.word	0x3feffffe
 8003718:	4661      	mov	r1, ip
 800371a:	2200      	movs	r2, #0
 800371c:	4b60      	ldr	r3, [pc, #384]	; (80038a0 <__ieee754_pow+0x3c8>)
 800371e:	4658      	mov	r0, fp
 8003720:	f7fc fd1a 	bl	8000158 <__aeabi_dsub>
 8003724:	a354      	add	r3, pc, #336	; (adr r3, 8003878 <__ieee754_pow+0x3a0>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	4604      	mov	r4, r0
 800372c:	460d      	mov	r5, r1
 800372e:	f7fc fecb 	bl	80004c8 <__aeabi_dmul>
 8003732:	a353      	add	r3, pc, #332	; (adr r3, 8003880 <__ieee754_pow+0x3a8>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	4606      	mov	r6, r0
 800373a:	460f      	mov	r7, r1
 800373c:	4620      	mov	r0, r4
 800373e:	4629      	mov	r1, r5
 8003740:	f7fc fec2 	bl	80004c8 <__aeabi_dmul>
 8003744:	2200      	movs	r2, #0
 8003746:	4682      	mov	sl, r0
 8003748:	468b      	mov	fp, r1
 800374a:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <__ieee754_pow+0x3cc>)
 800374c:	4620      	mov	r0, r4
 800374e:	4629      	mov	r1, r5
 8003750:	f7fc feba 	bl	80004c8 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	a14b      	add	r1, pc, #300	; (adr r1, 8003888 <__ieee754_pow+0x3b0>)
 800375a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800375e:	f7fc fcfb 	bl	8000158 <__aeabi_dsub>
 8003762:	4622      	mov	r2, r4
 8003764:	462b      	mov	r3, r5
 8003766:	f7fc feaf 	bl	80004c8 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	2000      	movs	r0, #0
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <__ieee754_pow+0x3d0>)
 8003772:	f7fc fcf1 	bl	8000158 <__aeabi_dsub>
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	4680      	mov	r8, r0
 800377c:	4689      	mov	r9, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fea1 	bl	80004c8 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4640      	mov	r0, r8
 800378c:	4649      	mov	r1, r9
 800378e:	f7fc fe9b 	bl	80004c8 <__aeabi_dmul>
 8003792:	a33f      	add	r3, pc, #252	; (adr r3, 8003890 <__ieee754_pow+0x3b8>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fc fe96 	bl	80004c8 <__aeabi_dmul>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4650      	mov	r0, sl
 80037a2:	4659      	mov	r1, fp
 80037a4:	f7fc fcd8 	bl	8000158 <__aeabi_dsub>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4604      	mov	r4, r0
 80037ae:	460d      	mov	r5, r1
 80037b0:	4630      	mov	r0, r6
 80037b2:	4639      	mov	r1, r7
 80037b4:	f7fc fcd2 	bl	800015c <__adddf3>
 80037b8:	2000      	movs	r0, #0
 80037ba:	468b      	mov	fp, r1
 80037bc:	4682      	mov	sl, r0
 80037be:	4632      	mov	r2, r6
 80037c0:	463b      	mov	r3, r7
 80037c2:	f7fc fcc9 	bl	8000158 <__aeabi_dsub>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7fc fcc3 	bl	8000158 <__aeabi_dsub>
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037d6:	3b01      	subs	r3, #1
 80037d8:	4313      	orrs	r3, r2
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	4c32      	ldreq	r4, [pc, #200]	; (80038ac <__ieee754_pow+0x3d4>)
 80037e2:	4c2f      	ldrne	r4, [pc, #188]	; (80038a0 <__ieee754_pow+0x3c8>)
 80037e4:	4606      	mov	r6, r0
 80037e6:	e9cd 3400 	strd	r3, r4, [sp]
 80037ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80037ee:	2400      	movs	r4, #0
 80037f0:	460f      	mov	r7, r1
 80037f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f7fc fcad 	bl	8000158 <__aeabi_dsub>
 80037fe:	4652      	mov	r2, sl
 8003800:	465b      	mov	r3, fp
 8003802:	f7fc fe61 	bl	80004c8 <__aeabi_dmul>
 8003806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800380a:	4680      	mov	r8, r0
 800380c:	4689      	mov	r9, r1
 800380e:	4630      	mov	r0, r6
 8003810:	4639      	mov	r1, r7
 8003812:	f7fc fe59 	bl	80004c8 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4640      	mov	r0, r8
 800381c:	4649      	mov	r1, r9
 800381e:	f7fc fc9d 	bl	800015c <__adddf3>
 8003822:	4622      	mov	r2, r4
 8003824:	462b      	mov	r3, r5
 8003826:	4680      	mov	r8, r0
 8003828:	4689      	mov	r9, r1
 800382a:	4650      	mov	r0, sl
 800382c:	4659      	mov	r1, fp
 800382e:	f7fc fe4b 	bl	80004c8 <__aeabi_dmul>
 8003832:	4604      	mov	r4, r0
 8003834:	460d      	mov	r5, r1
 8003836:	460b      	mov	r3, r1
 8003838:	4602      	mov	r2, r0
 800383a:	4649      	mov	r1, r9
 800383c:	4640      	mov	r0, r8
 800383e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003842:	f7fc fc8b 	bl	800015c <__adddf3>
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <__ieee754_pow+0x3d8>)
 8003848:	4682      	mov	sl, r0
 800384a:	4299      	cmp	r1, r3
 800384c:	460f      	mov	r7, r1
 800384e:	460e      	mov	r6, r1
 8003850:	f340 82e1 	ble.w	8003e16 <__ieee754_pow+0x93e>
 8003854:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003858:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800385c:	4303      	orrs	r3, r0
 800385e:	f000 81db 	beq.w	8003c18 <__ieee754_pow+0x740>
 8003862:	a30d      	add	r3, pc, #52	; (adr r3, 8003898 <__ieee754_pow+0x3c0>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800386c:	f7fc fe2c 	bl	80004c8 <__aeabi_dmul>
 8003870:	a309      	add	r3, pc, #36	; (adr r3, 8003898 <__ieee754_pow+0x3c0>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	e6c4      	b.n	8003602 <__ieee754_pow+0x12a>
 8003878:	60000000 	.word	0x60000000
 800387c:	3ff71547 	.word	0x3ff71547
 8003880:	f85ddf44 	.word	0xf85ddf44
 8003884:	3e54ae0b 	.word	0x3e54ae0b
 8003888:	55555555 	.word	0x55555555
 800388c:	3fd55555 	.word	0x3fd55555
 8003890:	652b82fe 	.word	0x652b82fe
 8003894:	3ff71547 	.word	0x3ff71547
 8003898:	8800759c 	.word	0x8800759c
 800389c:	7e37e43c 	.word	0x7e37e43c
 80038a0:	3ff00000 	.word	0x3ff00000
 80038a4:	3fd00000 	.word	0x3fd00000
 80038a8:	3fe00000 	.word	0x3fe00000
 80038ac:	bff00000 	.word	0xbff00000
 80038b0:	408fffff 	.word	0x408fffff
 80038b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	da08      	bge.n	80038d0 <__ieee754_pow+0x3f8>
 80038be:	4658      	mov	r0, fp
 80038c0:	4bcd      	ldr	r3, [pc, #820]	; (8003bf8 <__ieee754_pow+0x720>)
 80038c2:	4661      	mov	r1, ip
 80038c4:	f7fc fe00 	bl	80004c8 <__aeabi_dmul>
 80038c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80038cc:	4683      	mov	fp, r0
 80038ce:	460c      	mov	r4, r1
 80038d0:	1523      	asrs	r3, r4, #20
 80038d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80038d6:	4413      	add	r3, r2
 80038d8:	930c      	str	r3, [sp, #48]	; 0x30
 80038da:	4bc8      	ldr	r3, [pc, #800]	; (8003bfc <__ieee754_pow+0x724>)
 80038dc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80038e0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80038e4:	429c      	cmp	r4, r3
 80038e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80038ea:	dd08      	ble.n	80038fe <__ieee754_pow+0x426>
 80038ec:	4bc4      	ldr	r3, [pc, #784]	; (8003c00 <__ieee754_pow+0x728>)
 80038ee:	429c      	cmp	r4, r3
 80038f0:	f340 815b 	ble.w	8003baa <__ieee754_pow+0x6d2>
 80038f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80038fa:	3301      	adds	r3, #1
 80038fc:	930c      	str	r3, [sp, #48]	; 0x30
 80038fe:	f04f 0800 	mov.w	r8, #0
 8003902:	4658      	mov	r0, fp
 8003904:	4629      	mov	r1, r5
 8003906:	4bbf      	ldr	r3, [pc, #764]	; (8003c04 <__ieee754_pow+0x72c>)
 8003908:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800390c:	444b      	add	r3, r9
 800390e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003912:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003916:	461a      	mov	r2, r3
 8003918:	4623      	mov	r3, r4
 800391a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800391e:	f7fc fc1b 	bl	8000158 <__aeabi_dsub>
 8003922:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003926:	4606      	mov	r6, r0
 8003928:	460f      	mov	r7, r1
 800392a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800392e:	f7fc fc15 	bl	800015c <__adddf3>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	2000      	movs	r0, #0
 8003938:	49b3      	ldr	r1, [pc, #716]	; (8003c08 <__ieee754_pow+0x730>)
 800393a:	f7fc feef 	bl	800071c <__aeabi_ddiv>
 800393e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4630      	mov	r0, r6
 8003948:	4639      	mov	r1, r7
 800394a:	f7fc fdbd 	bl	80004c8 <__aeabi_dmul>
 800394e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003952:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003956:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800395a:	2300      	movs	r3, #0
 800395c:	2200      	movs	r2, #0
 800395e:	106d      	asrs	r5, r5, #1
 8003960:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003964:	9304      	str	r3, [sp, #16]
 8003966:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800396a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800396e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8003972:	4650      	mov	r0, sl
 8003974:	4659      	mov	r1, fp
 8003976:	4614      	mov	r4, r2
 8003978:	461d      	mov	r5, r3
 800397a:	f7fc fda5 	bl	80004c8 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4630      	mov	r0, r6
 8003984:	4639      	mov	r1, r7
 8003986:	f7fc fbe7 	bl	8000158 <__aeabi_dsub>
 800398a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800398e:	4606      	mov	r6, r0
 8003990:	460f      	mov	r7, r1
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f7fc fbdf 	bl	8000158 <__aeabi_dsub>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039a2:	f7fc fbd9 	bl	8000158 <__aeabi_dsub>
 80039a6:	4652      	mov	r2, sl
 80039a8:	465b      	mov	r3, fp
 80039aa:	f7fc fd8d 	bl	80004c8 <__aeabi_dmul>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4630      	mov	r0, r6
 80039b4:	4639      	mov	r1, r7
 80039b6:	f7fc fbcf 	bl	8000158 <__aeabi_dsub>
 80039ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80039be:	f7fc fd83 	bl	80004c8 <__aeabi_dmul>
 80039c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fc fd7b 	bl	80004c8 <__aeabi_dmul>
 80039d2:	a377      	add	r3, pc, #476	; (adr r3, 8003bb0 <__ieee754_pow+0x6d8>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	4604      	mov	r4, r0
 80039da:	460d      	mov	r5, r1
 80039dc:	f7fc fd74 	bl	80004c8 <__aeabi_dmul>
 80039e0:	a375      	add	r3, pc, #468	; (adr r3, 8003bb8 <__ieee754_pow+0x6e0>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fbb9 	bl	800015c <__adddf3>
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	f7fc fd6b 	bl	80004c8 <__aeabi_dmul>
 80039f2:	a373      	add	r3, pc, #460	; (adr r3, 8003bc0 <__ieee754_pow+0x6e8>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc fbb0 	bl	800015c <__adddf3>
 80039fc:	4622      	mov	r2, r4
 80039fe:	462b      	mov	r3, r5
 8003a00:	f7fc fd62 	bl	80004c8 <__aeabi_dmul>
 8003a04:	a370      	add	r3, pc, #448	; (adr r3, 8003bc8 <__ieee754_pow+0x6f0>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fba7 	bl	800015c <__adddf3>
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	f7fc fd59 	bl	80004c8 <__aeabi_dmul>
 8003a16:	a36e      	add	r3, pc, #440	; (adr r3, 8003bd0 <__ieee754_pow+0x6f8>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fb9e 	bl	800015c <__adddf3>
 8003a20:	4622      	mov	r2, r4
 8003a22:	462b      	mov	r3, r5
 8003a24:	f7fc fd50 	bl	80004c8 <__aeabi_dmul>
 8003a28:	a36b      	add	r3, pc, #428	; (adr r3, 8003bd8 <__ieee754_pow+0x700>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fb95 	bl	800015c <__adddf3>
 8003a32:	4622      	mov	r2, r4
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
 8003a38:	462b      	mov	r3, r5
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fd43 	bl	80004c8 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4630      	mov	r0, r6
 8003a48:	4639      	mov	r1, r7
 8003a4a:	f7fc fd3d 	bl	80004c8 <__aeabi_dmul>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	460d      	mov	r5, r1
 8003a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a56:	4652      	mov	r2, sl
 8003a58:	465b      	mov	r3, fp
 8003a5a:	f7fc fb7f 	bl	800015c <__adddf3>
 8003a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a62:	f7fc fd31 	bl	80004c8 <__aeabi_dmul>
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f7fc fb77 	bl	800015c <__adddf3>
 8003a6e:	4652      	mov	r2, sl
 8003a70:	4606      	mov	r6, r0
 8003a72:	460f      	mov	r7, r1
 8003a74:	465b      	mov	r3, fp
 8003a76:	4650      	mov	r0, sl
 8003a78:	4659      	mov	r1, fp
 8003a7a:	f7fc fd25 	bl	80004c8 <__aeabi_dmul>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <__ieee754_pow+0x734>)
 8003a82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a86:	f7fc fb69 	bl	800015c <__adddf3>
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	f7fc fb65 	bl	800015c <__adddf3>
 8003a92:	9804      	ldr	r0, [sp, #16]
 8003a94:	460d      	mov	r5, r1
 8003a96:	4604      	mov	r4, r0
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	f7fc fd12 	bl	80004c8 <__aeabi_dmul>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4682      	mov	sl, r0
 8003aa8:	468b      	mov	fp, r1
 8003aaa:	4b58      	ldr	r3, [pc, #352]	; (8003c0c <__ieee754_pow+0x734>)
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fb52 	bl	8000158 <__aeabi_dsub>
 8003ab4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ab8:	f7fc fb4e 	bl	8000158 <__aeabi_dsub>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fc fb48 	bl	8000158 <__aeabi_dsub>
 8003ac8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003acc:	f7fc fcfc 	bl	80004c8 <__aeabi_dmul>
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4606      	mov	r6, r0
 8003ad4:	460f      	mov	r7, r1
 8003ad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ada:	462b      	mov	r3, r5
 8003adc:	f7fc fcf4 	bl	80004c8 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	4639      	mov	r1, r7
 8003ae8:	f7fc fb38 	bl	800015c <__adddf3>
 8003aec:	4606      	mov	r6, r0
 8003aee:	460f      	mov	r7, r1
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4650      	mov	r0, sl
 8003af6:	4659      	mov	r1, fp
 8003af8:	f7fc fb30 	bl	800015c <__adddf3>
 8003afc:	a338      	add	r3, pc, #224	; (adr r3, 8003be0 <__ieee754_pow+0x708>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	9804      	ldr	r0, [sp, #16]
 8003b04:	460d      	mov	r5, r1
 8003b06:	4604      	mov	r4, r0
 8003b08:	f7fc fcde 	bl	80004c8 <__aeabi_dmul>
 8003b0c:	4652      	mov	r2, sl
 8003b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b12:	465b      	mov	r3, fp
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	f7fc fb1e 	bl	8000158 <__aeabi_dsub>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc fb18 	bl	8000158 <__aeabi_dsub>
 8003b28:	a32f      	add	r3, pc, #188	; (adr r3, 8003be8 <__ieee754_pow+0x710>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fccb 	bl	80004c8 <__aeabi_dmul>
 8003b32:	a32f      	add	r3, pc, #188	; (adr r3, 8003bf0 <__ieee754_pow+0x718>)
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	4606      	mov	r6, r0
 8003b3a:	460f      	mov	r7, r1
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	f7fc fcc2 	bl	80004c8 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4630      	mov	r0, r6
 8003b4a:	4639      	mov	r1, r7
 8003b4c:	f7fc fb06 	bl	800015c <__adddf3>
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <__ieee754_pow+0x738>)
 8003b52:	444b      	add	r3, r9
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fb00 	bl	800015c <__adddf3>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b60:	460d      	mov	r5, r1
 8003b62:	f7fc fc47 	bl	80003f4 <__aeabi_i2d>
 8003b66:	4606      	mov	r6, r0
 8003b68:	460f      	mov	r7, r1
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <__ieee754_pow+0x73c>)
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	444b      	add	r3, r9
 8003b70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b74:	462b      	mov	r3, r5
 8003b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b7a:	f7fc faef 	bl	800015c <__adddf3>
 8003b7e:	4642      	mov	r2, r8
 8003b80:	464b      	mov	r3, r9
 8003b82:	f7fc faeb 	bl	800015c <__adddf3>
 8003b86:	4632      	mov	r2, r6
 8003b88:	463b      	mov	r3, r7
 8003b8a:	f7fc fae7 	bl	800015c <__adddf3>
 8003b8e:	9804      	ldr	r0, [sp, #16]
 8003b90:	4632      	mov	r2, r6
 8003b92:	463b      	mov	r3, r7
 8003b94:	4682      	mov	sl, r0
 8003b96:	468b      	mov	fp, r1
 8003b98:	f7fc fade 	bl	8000158 <__aeabi_dsub>
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	f7fc fada 	bl	8000158 <__aeabi_dsub>
 8003ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ba8:	e60b      	b.n	80037c2 <__ieee754_pow+0x2ea>
 8003baa:	f04f 0801 	mov.w	r8, #1
 8003bae:	e6a8      	b.n	8003902 <__ieee754_pow+0x42a>
 8003bb0:	4a454eef 	.word	0x4a454eef
 8003bb4:	3fca7e28 	.word	0x3fca7e28
 8003bb8:	93c9db65 	.word	0x93c9db65
 8003bbc:	3fcd864a 	.word	0x3fcd864a
 8003bc0:	a91d4101 	.word	0xa91d4101
 8003bc4:	3fd17460 	.word	0x3fd17460
 8003bc8:	518f264d 	.word	0x518f264d
 8003bcc:	3fd55555 	.word	0x3fd55555
 8003bd0:	db6fabff 	.word	0xdb6fabff
 8003bd4:	3fdb6db6 	.word	0x3fdb6db6
 8003bd8:	33333303 	.word	0x33333303
 8003bdc:	3fe33333 	.word	0x3fe33333
 8003be0:	e0000000 	.word	0xe0000000
 8003be4:	3feec709 	.word	0x3feec709
 8003be8:	dc3a03fd 	.word	0xdc3a03fd
 8003bec:	3feec709 	.word	0x3feec709
 8003bf0:	145b01f5 	.word	0x145b01f5
 8003bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8003bf8:	43400000 	.word	0x43400000
 8003bfc:	0003988e 	.word	0x0003988e
 8003c00:	000bb679 	.word	0x000bb679
 8003c04:	08004660 	.word	0x08004660
 8003c08:	3ff00000 	.word	0x3ff00000
 8003c0c:	40080000 	.word	0x40080000
 8003c10:	08004680 	.word	0x08004680
 8003c14:	08004670 	.word	0x08004670
 8003c18:	a39b      	add	r3, pc, #620	; (adr r3, 8003e88 <__ieee754_pow+0x9b0>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	4640      	mov	r0, r8
 8003c20:	4649      	mov	r1, r9
 8003c22:	f7fc fa9b 	bl	800015c <__adddf3>
 8003c26:	4622      	mov	r2, r4
 8003c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	4650      	mov	r0, sl
 8003c30:	4639      	mov	r1, r7
 8003c32:	f7fc fa91 	bl	8000158 <__aeabi_dsub>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c3e:	f7fc fed3 	bl	80009e8 <__aeabi_dcmpgt>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	f47f ae0d 	bne.w	8003862 <__ieee754_pow+0x38a>
 8003c48:	4aa3      	ldr	r2, [pc, #652]	; (8003ed8 <__ieee754_pow+0xa00>)
 8003c4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f340 8103 	ble.w	8003e5a <__ieee754_pow+0x982>
 8003c54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003c58:	2000      	movs	r0, #0
 8003c5a:	151b      	asrs	r3, r3, #20
 8003c5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003c60:	fa4a f303 	asr.w	r3, sl, r3
 8003c64:	4433      	add	r3, r6
 8003c66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003c6a:	4f9c      	ldr	r7, [pc, #624]	; (8003edc <__ieee754_pow+0xa04>)
 8003c6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003c70:	4117      	asrs	r7, r2
 8003c72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003c76:	ea23 0107 	bic.w	r1, r3, r7
 8003c7a:	f1c2 0214 	rsb	r2, r2, #20
 8003c7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003c82:	fa4a fa02 	asr.w	sl, sl, r2
 8003c86:	2e00      	cmp	r6, #0
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	bfb8      	it	lt
 8003c92:	f1ca 0a00 	rsblt	sl, sl, #0
 8003c96:	f7fc fa5f 	bl	8000158 <__aeabi_dsub>
 8003c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	f7fc fa59 	bl	800015c <__adddf3>
 8003caa:	a379      	add	r3, pc, #484	; (adr r3, 8003e90 <__ieee754_pow+0x9b8>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	f7fc fc07 	bl	80004c8 <__aeabi_dmul>
 8003cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	460f      	mov	r7, r1
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc fa47 	bl	8000158 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4640      	mov	r0, r8
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	f7fc fa41 	bl	8000158 <__aeabi_dsub>
 8003cd6:	a370      	add	r3, pc, #448	; (adr r3, 8003e98 <__ieee754_pow+0x9c0>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fbf4 	bl	80004c8 <__aeabi_dmul>
 8003ce0:	a36f      	add	r3, pc, #444	; (adr r3, 8003ea0 <__ieee754_pow+0x9c8>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	4680      	mov	r8, r0
 8003ce8:	4689      	mov	r9, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fbeb 	bl	80004c8 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	f7fc fa2f 	bl	800015c <__adddf3>
 8003cfe:	4604      	mov	r4, r0
 8003d00:	460d      	mov	r5, r1
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fa27 	bl	800015c <__adddf3>
 8003d0e:	4632      	mov	r2, r6
 8003d10:	463b      	mov	r3, r7
 8003d12:	4680      	mov	r8, r0
 8003d14:	4689      	mov	r9, r1
 8003d16:	f7fc fa1f 	bl	8000158 <__aeabi_dsub>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fa19 	bl	8000158 <__aeabi_dsub>
 8003d26:	4642      	mov	r2, r8
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	f7fc fbc9 	bl	80004c8 <__aeabi_dmul>
 8003d36:	a35c      	add	r3, pc, #368	; (adr r3, 8003ea8 <__ieee754_pow+0x9d0>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	460d      	mov	r5, r1
 8003d40:	f7fc fbc2 	bl	80004c8 <__aeabi_dmul>
 8003d44:	a35a      	add	r3, pc, #360	; (adr r3, 8003eb0 <__ieee754_pow+0x9d8>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f7fc fa05 	bl	8000158 <__aeabi_dsub>
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	f7fc fbb9 	bl	80004c8 <__aeabi_dmul>
 8003d56:	a358      	add	r3, pc, #352	; (adr r3, 8003eb8 <__ieee754_pow+0x9e0>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc f9fe 	bl	800015c <__adddf3>
 8003d60:	4622      	mov	r2, r4
 8003d62:	462b      	mov	r3, r5
 8003d64:	f7fc fbb0 	bl	80004c8 <__aeabi_dmul>
 8003d68:	a355      	add	r3, pc, #340	; (adr r3, 8003ec0 <__ieee754_pow+0x9e8>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc f9f3 	bl	8000158 <__aeabi_dsub>
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f7fc fba7 	bl	80004c8 <__aeabi_dmul>
 8003d7a:	a353      	add	r3, pc, #332	; (adr r3, 8003ec8 <__ieee754_pow+0x9f0>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f7fc f9ec 	bl	800015c <__adddf3>
 8003d84:	4622      	mov	r2, r4
 8003d86:	462b      	mov	r3, r5
 8003d88:	f7fc fb9e 	bl	80004c8 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4640      	mov	r0, r8
 8003d92:	4649      	mov	r1, r9
 8003d94:	f7fc f9e0 	bl	8000158 <__aeabi_dsub>
 8003d98:	4604      	mov	r4, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4640      	mov	r0, r8
 8003da2:	4649      	mov	r1, r9
 8003da4:	f7fc fb90 	bl	80004c8 <__aeabi_dmul>
 8003da8:	2200      	movs	r2, #0
 8003daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc f9cf 	bl	8000158 <__aeabi_dsub>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dc2:	f7fc fcab 	bl	800071c <__aeabi_ddiv>
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	463b      	mov	r3, r7
 8003dce:	4640      	mov	r0, r8
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	f7fc fb79 	bl	80004c8 <__aeabi_dmul>
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	463b      	mov	r3, r7
 8003dda:	f7fc f9bf 	bl	800015c <__adddf3>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc f9b7 	bl	8000158 <__aeabi_dsub>
 8003dea:	4642      	mov	r2, r8
 8003dec:	464b      	mov	r3, r9
 8003dee:	f7fc f9b3 	bl	8000158 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	2000      	movs	r0, #0
 8003df8:	4939      	ldr	r1, [pc, #228]	; (8003ee0 <__ieee754_pow+0xa08>)
 8003dfa:	f7fc f9ad 	bl	8000158 <__aeabi_dsub>
 8003dfe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003e02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003e06:	da2b      	bge.n	8003e60 <__ieee754_pow+0x988>
 8003e08:	4652      	mov	r2, sl
 8003e0a:	f000 f9b9 	bl	8004180 <scalbn>
 8003e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e12:	f7ff bbf6 	b.w	8003602 <__ieee754_pow+0x12a>
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <__ieee754_pow+0xa0c>)
 8003e18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003e1c:	429f      	cmp	r7, r3
 8003e1e:	f77f af13 	ble.w	8003c48 <__ieee754_pow+0x770>
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <__ieee754_pow+0xa10>)
 8003e24:	440b      	add	r3, r1
 8003e26:	4303      	orrs	r3, r0
 8003e28:	d00b      	beq.n	8003e42 <__ieee754_pow+0x96a>
 8003e2a:	a329      	add	r3, pc, #164	; (adr r3, 8003ed0 <__ieee754_pow+0x9f8>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e34:	f7fc fb48 	bl	80004c8 <__aeabi_dmul>
 8003e38:	a325      	add	r3, pc, #148	; (adr r3, 8003ed0 <__ieee754_pow+0x9f8>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7ff bbe0 	b.w	8003602 <__ieee754_pow+0x12a>
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	f7fc f987 	bl	8000158 <__aeabi_dsub>
 8003e4a:	4642      	mov	r2, r8
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	f7fc fdc1 	bl	80009d4 <__aeabi_dcmpge>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f43f aef8 	beq.w	8003c48 <__ieee754_pow+0x770>
 8003e58:	e7e7      	b.n	8003e2a <__ieee754_pow+0x952>
 8003e5a:	f04f 0a00 	mov.w	sl, #0
 8003e5e:	e71e      	b.n	8003c9e <__ieee754_pow+0x7c6>
 8003e60:	4621      	mov	r1, r4
 8003e62:	e7d4      	b.n	8003e0e <__ieee754_pow+0x936>
 8003e64:	f04f 0b00 	mov.w	fp, #0
 8003e68:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003ee0 <__ieee754_pow+0xa08>
 8003e6c:	f7ff bb95 	b.w	800359a <__ieee754_pow+0xc2>
 8003e70:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003e74:	f7ff bb91 	b.w	800359a <__ieee754_pow+0xc2>
 8003e78:	4638      	mov	r0, r7
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	f7ff bbc3 	b.w	8003606 <__ieee754_pow+0x12e>
 8003e80:	9200      	str	r2, [sp, #0]
 8003e82:	f7ff bb9f 	b.w	80035c4 <__ieee754_pow+0xec>
 8003e86:	bf00      	nop
 8003e88:	652b82fe 	.word	0x652b82fe
 8003e8c:	3c971547 	.word	0x3c971547
 8003e90:	00000000 	.word	0x00000000
 8003e94:	3fe62e43 	.word	0x3fe62e43
 8003e98:	fefa39ef 	.word	0xfefa39ef
 8003e9c:	3fe62e42 	.word	0x3fe62e42
 8003ea0:	0ca86c39 	.word	0x0ca86c39
 8003ea4:	be205c61 	.word	0xbe205c61
 8003ea8:	72bea4d0 	.word	0x72bea4d0
 8003eac:	3e663769 	.word	0x3e663769
 8003eb0:	c5d26bf1 	.word	0xc5d26bf1
 8003eb4:	3ebbbd41 	.word	0x3ebbbd41
 8003eb8:	af25de2c 	.word	0xaf25de2c
 8003ebc:	3f11566a 	.word	0x3f11566a
 8003ec0:	16bebd93 	.word	0x16bebd93
 8003ec4:	3f66c16c 	.word	0x3f66c16c
 8003ec8:	5555553e 	.word	0x5555553e
 8003ecc:	3fc55555 	.word	0x3fc55555
 8003ed0:	c2f8f359 	.word	0xc2f8f359
 8003ed4:	01a56e1f 	.word	0x01a56e1f
 8003ed8:	3fe00000 	.word	0x3fe00000
 8003edc:	000fffff 	.word	0x000fffff
 8003ee0:	3ff00000 	.word	0x3ff00000
 8003ee4:	4090cbff 	.word	0x4090cbff
 8003ee8:	3f6f3400 	.word	0x3f6f3400

08003eec <__ieee754_sqrt>:
 8003eec:	4b54      	ldr	r3, [pc, #336]	; (8004040 <__ieee754_sqrt+0x154>)
 8003eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef2:	438b      	bics	r3, r1
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	460a      	mov	r2, r1
 8003efa:	460c      	mov	r4, r1
 8003efc:	d10f      	bne.n	8003f1e <__ieee754_sqrt+0x32>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	f7fc fae1 	bl	80004c8 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f7fc f925 	bl	800015c <__adddf3>
 8003f12:	4606      	mov	r6, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	4630      	mov	r0, r6
 8003f18:	4629      	mov	r1, r5
 8003f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	4607      	mov	r7, r0
 8003f22:	4603      	mov	r3, r0
 8003f24:	dc0e      	bgt.n	8003f44 <__ieee754_sqrt+0x58>
 8003f26:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003f2a:	ea5c 0707 	orrs.w	r7, ip, r7
 8003f2e:	d0f2      	beq.n	8003f16 <__ieee754_sqrt+0x2a>
 8003f30:	b141      	cbz	r1, 8003f44 <__ieee754_sqrt+0x58>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	f7fc f90f 	bl	8000158 <__aeabi_dsub>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	f7fc fbed 	bl	800071c <__aeabi_ddiv>
 8003f42:	e7e6      	b.n	8003f12 <__ieee754_sqrt+0x26>
 8003f44:	1512      	asrs	r2, r2, #20
 8003f46:	d074      	beq.n	8004032 <__ieee754_sqrt+0x146>
 8003f48:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003f4c:	07d5      	lsls	r5, r2, #31
 8003f4e:	f04f 0500 	mov.w	r5, #0
 8003f52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003f56:	bf48      	it	mi
 8003f58:	0fd9      	lsrmi	r1, r3, #31
 8003f5a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003f5e:	bf44      	itt	mi
 8003f60:	005b      	lslmi	r3, r3, #1
 8003f62:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8003f66:	1051      	asrs	r1, r2, #1
 8003f68:	0fda      	lsrs	r2, r3, #31
 8003f6a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003f6e:	4628      	mov	r0, r5
 8003f70:	2216      	movs	r2, #22
 8003f72:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	1987      	adds	r7, r0, r6
 8003f7a:	42a7      	cmp	r7, r4
 8003f7c:	bfde      	ittt	le
 8003f7e:	19b8      	addle	r0, r7, r6
 8003f80:	1be4      	suble	r4, r4, r7
 8003f82:	19ad      	addle	r5, r5, r6
 8003f84:	0fdf      	lsrs	r7, r3, #31
 8003f86:	3a01      	subs	r2, #1
 8003f88:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8003f8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003f94:	d1f0      	bne.n	8003f78 <__ieee754_sqrt+0x8c>
 8003f96:	f04f 0c20 	mov.w	ip, #32
 8003f9a:	4696      	mov	lr, r2
 8003f9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003fa0:	4284      	cmp	r4, r0
 8003fa2:	eb06 070e 	add.w	r7, r6, lr
 8003fa6:	dc02      	bgt.n	8003fae <__ieee754_sqrt+0xc2>
 8003fa8:	d112      	bne.n	8003fd0 <__ieee754_sqrt+0xe4>
 8003faa:	429f      	cmp	r7, r3
 8003fac:	d810      	bhi.n	8003fd0 <__ieee754_sqrt+0xe4>
 8003fae:	2f00      	cmp	r7, #0
 8003fb0:	eb07 0e06 	add.w	lr, r7, r6
 8003fb4:	da42      	bge.n	800403c <__ieee754_sqrt+0x150>
 8003fb6:	f1be 0f00 	cmp.w	lr, #0
 8003fba:	db3f      	blt.n	800403c <__ieee754_sqrt+0x150>
 8003fbc:	f100 0801 	add.w	r8, r0, #1
 8003fc0:	1a24      	subs	r4, r4, r0
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	429f      	cmp	r7, r3
 8003fc6:	bf88      	it	hi
 8003fc8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8003fcc:	1bdb      	subs	r3, r3, r7
 8003fce:	4432      	add	r2, r6
 8003fd0:	0064      	lsls	r4, r4, #1
 8003fd2:	f1bc 0c01 	subs.w	ip, ip, #1
 8003fd6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8003fda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003fde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fe2:	d1dd      	bne.n	8003fa0 <__ieee754_sqrt+0xb4>
 8003fe4:	4323      	orrs	r3, r4
 8003fe6:	d006      	beq.n	8003ff6 <__ieee754_sqrt+0x10a>
 8003fe8:	1c54      	adds	r4, r2, #1
 8003fea:	bf0b      	itete	eq
 8003fec:	4662      	moveq	r2, ip
 8003fee:	3201      	addne	r2, #1
 8003ff0:	3501      	addeq	r5, #1
 8003ff2:	f022 0201 	bicne.w	r2, r2, #1
 8003ff6:	106b      	asrs	r3, r5, #1
 8003ff8:	0852      	lsrs	r2, r2, #1
 8003ffa:	07e8      	lsls	r0, r5, #31
 8003ffc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004000:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004004:	bf48      	it	mi
 8004006:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800400a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800400e:	4616      	mov	r6, r2
 8004010:	e781      	b.n	8003f16 <__ieee754_sqrt+0x2a>
 8004012:	0adc      	lsrs	r4, r3, #11
 8004014:	3915      	subs	r1, #21
 8004016:	055b      	lsls	r3, r3, #21
 8004018:	2c00      	cmp	r4, #0
 800401a:	d0fa      	beq.n	8004012 <__ieee754_sqrt+0x126>
 800401c:	02e6      	lsls	r6, r4, #11
 800401e:	d50a      	bpl.n	8004036 <__ieee754_sqrt+0x14a>
 8004020:	f1c2 0020 	rsb	r0, r2, #32
 8004024:	fa23 f000 	lsr.w	r0, r3, r0
 8004028:	1e55      	subs	r5, r2, #1
 800402a:	4093      	lsls	r3, r2
 800402c:	4304      	orrs	r4, r0
 800402e:	1b4a      	subs	r2, r1, r5
 8004030:	e78a      	b.n	8003f48 <__ieee754_sqrt+0x5c>
 8004032:	4611      	mov	r1, r2
 8004034:	e7f0      	b.n	8004018 <__ieee754_sqrt+0x12c>
 8004036:	0064      	lsls	r4, r4, #1
 8004038:	3201      	adds	r2, #1
 800403a:	e7ef      	b.n	800401c <__ieee754_sqrt+0x130>
 800403c:	4680      	mov	r8, r0
 800403e:	e7bf      	b.n	8003fc0 <__ieee754_sqrt+0xd4>
 8004040:	7ff00000 	.word	0x7ff00000

08004044 <fabs>:
 8004044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004048:	4619      	mov	r1, r3
 800404a:	4770      	bx	lr

0800404c <finite>:
 800404c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004050:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004054:	0fc0      	lsrs	r0, r0, #31
 8004056:	4770      	bx	lr

08004058 <matherr>:
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr

0800405c <nan>:
 800405c:	2000      	movs	r0, #0
 800405e:	4901      	ldr	r1, [pc, #4]	; (8004064 <nan+0x8>)
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	7ff80000 	.word	0x7ff80000

08004068 <rint>:
 8004068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800406a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800406e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8004072:	f1bc 0f13 	cmp.w	ip, #19
 8004076:	4604      	mov	r4, r0
 8004078:	460d      	mov	r5, r1
 800407a:	460b      	mov	r3, r1
 800407c:	4606      	mov	r6, r0
 800407e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8004082:	dc5a      	bgt.n	800413a <rint+0xd2>
 8004084:	f1bc 0f00 	cmp.w	ip, #0
 8004088:	da2b      	bge.n	80040e2 <rint+0x7a>
 800408a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800408e:	4302      	orrs	r2, r0
 8004090:	d023      	beq.n	80040da <rint+0x72>
 8004092:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004096:	4302      	orrs	r2, r0
 8004098:	4256      	negs	r6, r2
 800409a:	4316      	orrs	r6, r2
 800409c:	0c4b      	lsrs	r3, r1, #17
 800409e:	0b36      	lsrs	r6, r6, #12
 80040a0:	4934      	ldr	r1, [pc, #208]	; (8004174 <rint+0x10c>)
 80040a2:	045b      	lsls	r3, r3, #17
 80040a4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80040a8:	ea46 0503 	orr.w	r5, r6, r3
 80040ac:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80040b0:	4602      	mov	r2, r0
 80040b2:	462b      	mov	r3, r5
 80040b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f7fc f84e 	bl	800015c <__adddf3>
 80040c0:	e9cd 0100 	strd	r0, r1, [sp]
 80040c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c8:	462b      	mov	r3, r5
 80040ca:	4622      	mov	r2, r4
 80040cc:	f7fc f844 	bl	8000158 <__aeabi_dsub>
 80040d0:	4604      	mov	r4, r0
 80040d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040d6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	b003      	add	sp, #12
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <rint+0x110>)
 80040e4:	fa42 f20c 	asr.w	r2, r2, ip
 80040e8:	4011      	ands	r1, r2
 80040ea:	4301      	orrs	r1, r0
 80040ec:	d0f5      	beq.n	80040da <rint+0x72>
 80040ee:	0852      	lsrs	r2, r2, #1
 80040f0:	ea05 0102 	and.w	r1, r5, r2
 80040f4:	ea50 0601 	orrs.w	r6, r0, r1
 80040f8:	d00c      	beq.n	8004114 <rint+0xac>
 80040fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040fe:	f1bc 0f13 	cmp.w	ip, #19
 8004102:	bf0c      	ite	eq
 8004104:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8004108:	2600      	movne	r6, #0
 800410a:	ea25 0202 	bic.w	r2, r5, r2
 800410e:	fa43 f30c 	asr.w	r3, r3, ip
 8004112:	4313      	orrs	r3, r2
 8004114:	4917      	ldr	r1, [pc, #92]	; (8004174 <rint+0x10c>)
 8004116:	4632      	mov	r2, r6
 8004118:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800411c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004120:	4620      	mov	r0, r4
 8004122:	4629      	mov	r1, r5
 8004124:	f7fc f81a 	bl	800015c <__adddf3>
 8004128:	e9cd 0100 	strd	r0, r1, [sp]
 800412c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f7fc f810 	bl	8000158 <__aeabi_dsub>
 8004138:	e008      	b.n	800414c <rint+0xe4>
 800413a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800413e:	dd08      	ble.n	8004152 <rint+0xea>
 8004140:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8004144:	d1c9      	bne.n	80040da <rint+0x72>
 8004146:	4602      	mov	r2, r0
 8004148:	f7fc f808 	bl	800015c <__adddf3>
 800414c:	4604      	mov	r4, r0
 800414e:	460d      	mov	r5, r1
 8004150:	e7c3      	b.n	80040da <rint+0x72>
 8004152:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	40ca      	lsrs	r2, r1
 800415c:	4210      	tst	r0, r2
 800415e:	d0bc      	beq.n	80040da <rint+0x72>
 8004160:	0852      	lsrs	r2, r2, #1
 8004162:	4210      	tst	r0, r2
 8004164:	bf1f      	itttt	ne
 8004166:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800416a:	ea20 0202 	bicne.w	r2, r0, r2
 800416e:	410e      	asrne	r6, r1
 8004170:	4316      	orrne	r6, r2
 8004172:	e7cf      	b.n	8004114 <rint+0xac>
 8004174:	08004690 	.word	0x08004690
 8004178:	000fffff 	.word	0x000fffff
 800417c:	00000000 	.word	0x00000000

08004180 <scalbn>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	4616      	mov	r6, r2
 8004184:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	460b      	mov	r3, r1
 800418e:	b982      	cbnz	r2, 80041b2 <scalbn+0x32>
 8004190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004194:	4303      	orrs	r3, r0
 8004196:	d034      	beq.n	8004202 <scalbn+0x82>
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <scalbn+0xd0>)
 800419a:	2200      	movs	r2, #0
 800419c:	f7fc f994 	bl	80004c8 <__aeabi_dmul>
 80041a0:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <scalbn+0xd4>)
 80041a2:	4604      	mov	r4, r0
 80041a4:	429e      	cmp	r6, r3
 80041a6:	460d      	mov	r5, r1
 80041a8:	da0d      	bge.n	80041c6 <scalbn+0x46>
 80041aa:	a325      	add	r3, pc, #148	; (adr r3, 8004240 <scalbn+0xc0>)
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	e01c      	b.n	80041ec <scalbn+0x6c>
 80041b2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80041b6:	42ba      	cmp	r2, r7
 80041b8:	d109      	bne.n	80041ce <scalbn+0x4e>
 80041ba:	4602      	mov	r2, r0
 80041bc:	f7fb ffce 	bl	800015c <__adddf3>
 80041c0:	4604      	mov	r4, r0
 80041c2:	460d      	mov	r5, r1
 80041c4:	e01d      	b.n	8004202 <scalbn+0x82>
 80041c6:	460b      	mov	r3, r1
 80041c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80041cc:	3a36      	subs	r2, #54	; 0x36
 80041ce:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80041d2:	4432      	add	r2, r6
 80041d4:	428a      	cmp	r2, r1
 80041d6:	dd0c      	ble.n	80041f2 <scalbn+0x72>
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	a11a      	add	r1, pc, #104	; (adr r1, 8004248 <scalbn+0xc8>)
 80041de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e2:	f000 f9ef 	bl	80045c4 <copysign>
 80041e6:	a318      	add	r3, pc, #96	; (adr r3, 8004248 <scalbn+0xc8>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f96c 	bl	80004c8 <__aeabi_dmul>
 80041f0:	e7e6      	b.n	80041c0 <scalbn+0x40>
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	dd08      	ble.n	8004208 <scalbn+0x88>
 80041f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004208:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800420c:	da0b      	bge.n	8004226 <scalbn+0xa6>
 800420e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004212:	429e      	cmp	r6, r3
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	dce0      	bgt.n	80041dc <scalbn+0x5c>
 800421a:	a109      	add	r1, pc, #36	; (adr r1, 8004240 <scalbn+0xc0>)
 800421c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004220:	f000 f9d0 	bl	80045c4 <copysign>
 8004224:	e7c1      	b.n	80041aa <scalbn+0x2a>
 8004226:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800422a:	3236      	adds	r2, #54	; 0x36
 800422c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004230:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004234:	4620      	mov	r0, r4
 8004236:	4629      	mov	r1, r5
 8004238:	2200      	movs	r2, #0
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <scalbn+0xd8>)
 800423c:	e7d6      	b.n	80041ec <scalbn+0x6c>
 800423e:	bf00      	nop
 8004240:	c2f8f359 	.word	0xc2f8f359
 8004244:	01a56e1f 	.word	0x01a56e1f
 8004248:	8800759c 	.word	0x8800759c
 800424c:	7e37e43c 	.word	0x7e37e43c
 8004250:	43500000 	.word	0x43500000
 8004254:	ffff3cb0 	.word	0xffff3cb0
 8004258:	3c900000 	.word	0x3c900000
 800425c:	00000000 	.word	0x00000000

08004260 <__ieee754_log>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004268:	b087      	sub	sp, #28
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	460d      	mov	r5, r1
 8004270:	da24      	bge.n	80042bc <__ieee754_log+0x5c>
 8004272:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004276:	4304      	orrs	r4, r0
 8004278:	d108      	bne.n	800428c <__ieee754_log+0x2c>
 800427a:	2200      	movs	r2, #0
 800427c:	2300      	movs	r3, #0
 800427e:	2000      	movs	r0, #0
 8004280:	49cb      	ldr	r1, [pc, #812]	; (80045b0 <__ieee754_log+0x350>)
 8004282:	f7fc fa4b 	bl	800071c <__aeabi_ddiv>
 8004286:	b007      	add	sp, #28
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	2900      	cmp	r1, #0
 800428e:	da04      	bge.n	800429a <__ieee754_log+0x3a>
 8004290:	f7fb ff62 	bl	8000158 <__aeabi_dsub>
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	e7f3      	b.n	8004282 <__ieee754_log+0x22>
 800429a:	2200      	movs	r2, #0
 800429c:	4bc5      	ldr	r3, [pc, #788]	; (80045b4 <__ieee754_log+0x354>)
 800429e:	f7fc f913 	bl	80004c8 <__aeabi_dmul>
 80042a2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	460d      	mov	r5, r1
 80042ac:	49c2      	ldr	r1, [pc, #776]	; (80045b8 <__ieee754_log+0x358>)
 80042ae:	428d      	cmp	r5, r1
 80042b0:	dd06      	ble.n	80042c0 <__ieee754_log+0x60>
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fb ff51 	bl	800015c <__adddf3>
 80042ba:	e7e4      	b.n	8004286 <__ieee754_log+0x26>
 80042bc:	2600      	movs	r6, #0
 80042be:	e7f5      	b.n	80042ac <__ieee754_log+0x4c>
 80042c0:	152c      	asrs	r4, r5, #20
 80042c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80042c6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80042ca:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80042ce:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80042d2:	4426      	add	r6, r4
 80042d4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80042d8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80042dc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80042e0:	ea41 0305 	orr.w	r3, r1, r5
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	4bb4      	ldr	r3, [pc, #720]	; (80045bc <__ieee754_log+0x35c>)
 80042ec:	f7fb ff34 	bl	8000158 <__aeabi_dsub>
 80042f0:	1cab      	adds	r3, r5, #2
 80042f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80042fc:	4682      	mov	sl, r0
 80042fe:	468b      	mov	fp, r1
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	dc53      	bgt.n	80043ae <__ieee754_log+0x14e>
 8004306:	2300      	movs	r3, #0
 8004308:	f7fc fb46 	bl	8000998 <__aeabi_dcmpeq>
 800430c:	b1d0      	cbz	r0, 8004344 <__ieee754_log+0xe4>
 800430e:	2c00      	cmp	r4, #0
 8004310:	f000 8120 	beq.w	8004554 <__ieee754_log+0x2f4>
 8004314:	4620      	mov	r0, r4
 8004316:	f7fc f86d 	bl	80003f4 <__aeabi_i2d>
 800431a:	a391      	add	r3, pc, #580	; (adr r3, 8004560 <__ieee754_log+0x300>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	4606      	mov	r6, r0
 8004322:	460f      	mov	r7, r1
 8004324:	f7fc f8d0 	bl	80004c8 <__aeabi_dmul>
 8004328:	a38f      	add	r3, pc, #572	; (adr r3, 8004568 <__ieee754_log+0x308>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	4630      	mov	r0, r6
 8004334:	4639      	mov	r1, r7
 8004336:	f7fc f8c7 	bl	80004c8 <__aeabi_dmul>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	e7b8      	b.n	80042b6 <__ieee754_log+0x56>
 8004344:	a38a      	add	r3, pc, #552	; (adr r3, 8004570 <__ieee754_log+0x310>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	4650      	mov	r0, sl
 800434c:	4659      	mov	r1, fp
 800434e:	f7fc f8bb 	bl	80004c8 <__aeabi_dmul>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	2000      	movs	r0, #0
 8004358:	4999      	ldr	r1, [pc, #612]	; (80045c0 <__ieee754_log+0x360>)
 800435a:	f7fb fefd 	bl	8000158 <__aeabi_dsub>
 800435e:	4652      	mov	r2, sl
 8004360:	4606      	mov	r6, r0
 8004362:	460f      	mov	r7, r1
 8004364:	465b      	mov	r3, fp
 8004366:	4650      	mov	r0, sl
 8004368:	4659      	mov	r1, fp
 800436a:	f7fc f8ad 	bl	80004c8 <__aeabi_dmul>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4630      	mov	r0, r6
 8004374:	4639      	mov	r1, r7
 8004376:	f7fc f8a7 	bl	80004c8 <__aeabi_dmul>
 800437a:	4606      	mov	r6, r0
 800437c:	460f      	mov	r7, r1
 800437e:	b914      	cbnz	r4, 8004386 <__ieee754_log+0x126>
 8004380:	4632      	mov	r2, r6
 8004382:	463b      	mov	r3, r7
 8004384:	e0a0      	b.n	80044c8 <__ieee754_log+0x268>
 8004386:	4620      	mov	r0, r4
 8004388:	f7fc f834 	bl	80003f4 <__aeabi_i2d>
 800438c:	a374      	add	r3, pc, #464	; (adr r3, 8004560 <__ieee754_log+0x300>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	4680      	mov	r8, r0
 8004394:	4689      	mov	r9, r1
 8004396:	f7fc f897 	bl	80004c8 <__aeabi_dmul>
 800439a:	a373      	add	r3, pc, #460	; (adr r3, 8004568 <__ieee754_log+0x308>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	4640      	mov	r0, r8
 80043a6:	4649      	mov	r1, r9
 80043a8:	f7fc f88e 	bl	80004c8 <__aeabi_dmul>
 80043ac:	e0a5      	b.n	80044fa <__ieee754_log+0x29a>
 80043ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b2:	f7fb fed3 	bl	800015c <__adddf3>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4650      	mov	r0, sl
 80043bc:	4659      	mov	r1, fp
 80043be:	f7fc f9ad 	bl	800071c <__aeabi_ddiv>
 80043c2:	e9cd 0100 	strd	r0, r1, [sp]
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7fc f814 	bl	80003f4 <__aeabi_i2d>
 80043cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fc f876 	bl	80004c8 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e4:	f7fc f870 	bl	80004c8 <__aeabi_dmul>
 80043e8:	a363      	add	r3, pc, #396	; (adr r3, 8004578 <__ieee754_log+0x318>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	4680      	mov	r8, r0
 80043f0:	4689      	mov	r9, r1
 80043f2:	f7fc f869 	bl	80004c8 <__aeabi_dmul>
 80043f6:	a362      	add	r3, pc, #392	; (adr r3, 8004580 <__ieee754_log+0x320>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fb feae 	bl	800015c <__adddf3>
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	f7fc f860 	bl	80004c8 <__aeabi_dmul>
 8004408:	a35f      	add	r3, pc, #380	; (adr r3, 8004588 <__ieee754_log+0x328>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f7fb fea5 	bl	800015c <__adddf3>
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	f7fc f857 	bl	80004c8 <__aeabi_dmul>
 800441a:	a35d      	add	r3, pc, #372	; (adr r3, 8004590 <__ieee754_log+0x330>)
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f7fb fe9c 	bl	800015c <__adddf3>
 8004424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004428:	f7fc f84e 	bl	80004c8 <__aeabi_dmul>
 800442c:	a35a      	add	r3, pc, #360	; (adr r3, 8004598 <__ieee754_log+0x338>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004436:	4640      	mov	r0, r8
 8004438:	4649      	mov	r1, r9
 800443a:	f7fc f845 	bl	80004c8 <__aeabi_dmul>
 800443e:	a358      	add	r3, pc, #352	; (adr r3, 80045a0 <__ieee754_log+0x340>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fb fe8a 	bl	800015c <__adddf3>
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	f7fc f83c 	bl	80004c8 <__aeabi_dmul>
 8004450:	a355      	add	r3, pc, #340	; (adr r3, 80045a8 <__ieee754_log+0x348>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fb fe81 	bl	800015c <__adddf3>
 800445a:	4642      	mov	r2, r8
 800445c:	464b      	mov	r3, r9
 800445e:	f7fc f833 	bl	80004c8 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800446a:	f7fb fe77 	bl	800015c <__adddf3>
 800446e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8004472:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004476:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800447a:	3551      	adds	r5, #81	; 0x51
 800447c:	4335      	orrs	r5, r6
 800447e:	2d00      	cmp	r5, #0
 8004480:	4680      	mov	r8, r0
 8004482:	4689      	mov	r9, r1
 8004484:	dd48      	ble.n	8004518 <__ieee754_log+0x2b8>
 8004486:	2200      	movs	r2, #0
 8004488:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <__ieee754_log+0x360>)
 800448a:	4650      	mov	r0, sl
 800448c:	4659      	mov	r1, fp
 800448e:	f7fc f81b 	bl	80004c8 <__aeabi_dmul>
 8004492:	4652      	mov	r2, sl
 8004494:	465b      	mov	r3, fp
 8004496:	f7fc f817 	bl	80004c8 <__aeabi_dmul>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	4640      	mov	r0, r8
 80044a4:	4649      	mov	r1, r9
 80044a6:	f7fb fe59 	bl	800015c <__adddf3>
 80044aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ae:	f7fc f80b 	bl	80004c8 <__aeabi_dmul>
 80044b2:	4680      	mov	r8, r0
 80044b4:	4689      	mov	r9, r1
 80044b6:	b964      	cbnz	r4, 80044d2 <__ieee754_log+0x272>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4630      	mov	r0, r6
 80044be:	4639      	mov	r1, r7
 80044c0:	f7fb fe4a 	bl	8000158 <__aeabi_dsub>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4650      	mov	r0, sl
 80044ca:	4659      	mov	r1, fp
 80044cc:	f7fb fe44 	bl	8000158 <__aeabi_dsub>
 80044d0:	e6d9      	b.n	8004286 <__ieee754_log+0x26>
 80044d2:	a323      	add	r3, pc, #140	; (adr r3, 8004560 <__ieee754_log+0x300>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044dc:	f7fb fff4 	bl	80004c8 <__aeabi_dmul>
 80044e0:	a321      	add	r3, pc, #132	; (adr r3, 8004568 <__ieee754_log+0x308>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	4604      	mov	r4, r0
 80044e8:	460d      	mov	r5, r1
 80044ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ee:	f7fb ffeb 	bl	80004c8 <__aeabi_dmul>
 80044f2:	4642      	mov	r2, r8
 80044f4:	464b      	mov	r3, r9
 80044f6:	f7fb fe31 	bl	800015c <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4630      	mov	r0, r6
 8004500:	4639      	mov	r1, r7
 8004502:	f7fb fe29 	bl	8000158 <__aeabi_dsub>
 8004506:	4652      	mov	r2, sl
 8004508:	465b      	mov	r3, fp
 800450a:	f7fb fe25 	bl	8000158 <__aeabi_dsub>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	e7d9      	b.n	80044cc <__ieee754_log+0x26c>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4650      	mov	r0, sl
 800451e:	4659      	mov	r1, fp
 8004520:	f7fb fe1a 	bl	8000158 <__aeabi_dsub>
 8004524:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004528:	f7fb ffce 	bl	80004c8 <__aeabi_dmul>
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	2c00      	cmp	r4, #0
 8004532:	f43f af25 	beq.w	8004380 <__ieee754_log+0x120>
 8004536:	a30a      	add	r3, pc, #40	; (adr r3, 8004560 <__ieee754_log+0x300>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004540:	f7fb ffc2 	bl	80004c8 <__aeabi_dmul>
 8004544:	a308      	add	r3, pc, #32	; (adr r3, 8004568 <__ieee754_log+0x308>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	4604      	mov	r4, r0
 800454c:	460d      	mov	r5, r1
 800454e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004552:	e729      	b.n	80043a8 <__ieee754_log+0x148>
 8004554:	2000      	movs	r0, #0
 8004556:	2100      	movs	r1, #0
 8004558:	e695      	b.n	8004286 <__ieee754_log+0x26>
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w
 8004560:	fee00000 	.word	0xfee00000
 8004564:	3fe62e42 	.word	0x3fe62e42
 8004568:	35793c76 	.word	0x35793c76
 800456c:	3dea39ef 	.word	0x3dea39ef
 8004570:	55555555 	.word	0x55555555
 8004574:	3fd55555 	.word	0x3fd55555
 8004578:	df3e5244 	.word	0xdf3e5244
 800457c:	3fc2f112 	.word	0x3fc2f112
 8004580:	96cb03de 	.word	0x96cb03de
 8004584:	3fc74664 	.word	0x3fc74664
 8004588:	94229359 	.word	0x94229359
 800458c:	3fd24924 	.word	0x3fd24924
 8004590:	55555593 	.word	0x55555593
 8004594:	3fe55555 	.word	0x3fe55555
 8004598:	d078c69f 	.word	0xd078c69f
 800459c:	3fc39a09 	.word	0x3fc39a09
 80045a0:	1d8e78af 	.word	0x1d8e78af
 80045a4:	3fcc71c5 	.word	0x3fcc71c5
 80045a8:	9997fa04 	.word	0x9997fa04
 80045ac:	3fd99999 	.word	0x3fd99999
 80045b0:	c3500000 	.word	0xc3500000
 80045b4:	43500000 	.word	0x43500000
 80045b8:	7fefffff 	.word	0x7fefffff
 80045bc:	3ff00000 	.word	0x3ff00000
 80045c0:	3fe00000 	.word	0x3fe00000

080045c4 <copysign>:
 80045c4:	b530      	push	{r4, r5, lr}
 80045c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80045ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ce:	ea42 0503 	orr.w	r5, r2, r3
 80045d2:	4629      	mov	r1, r5
 80045d4:	bd30      	pop	{r4, r5, pc}
	...

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
