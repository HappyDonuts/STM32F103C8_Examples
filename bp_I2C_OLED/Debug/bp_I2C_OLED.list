
bp_I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  08004f60  08004f60  00014f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080064f8  080064f8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064f8  080064f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000088  08006588  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08006588  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000966f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000190d  00000000  00000000  00029720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142ab  00000000  00000000  0002be58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074f6  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b6b5  00000000  00000000  000475f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000b2d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f48 	.word	0x08004f48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08004f48 	.word	0x08004f48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x28>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f907 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f002 f928 	bl	8002d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f911 	bl	8000d2a <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8e7 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000001c 	.word	0x2000001c
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000000 	.word	0x20000000

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000004 	.word	0x20000004
 8000b64:	200000bc 	.word	0x200000bc

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff90 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff49 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	e127      	b.n	8000fa8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8116 	bne.w	8000fa2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d034      	beq.n	8000de8 <HAL_GPIO_Init+0xa4>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d80d      	bhi.n	8000d9e <HAL_GPIO_Init+0x5a>
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d02b      	beq.n	8000dde <HAL_GPIO_Init+0x9a>
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d804      	bhi.n	8000d94 <HAL_GPIO_Init+0x50>
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d031      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d01c      	beq.n	8000dcc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e048      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d043      	beq.n	8000e20 <HAL_GPIO_Init+0xdc>
 8000d98:	2b11      	cmp	r3, #17
 8000d9a:	d01b      	beq.n	8000dd4 <HAL_GPIO_Init+0x90>
          break;
 8000d9c:	e043      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d9e:	4a89      	ldr	r2, [pc, #548]	; (8000fc4 <HAL_GPIO_Init+0x280>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d026      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
 8000da4:	4a87      	ldr	r2, [pc, #540]	; (8000fc4 <HAL_GPIO_Init+0x280>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d806      	bhi.n	8000db8 <HAL_GPIO_Init+0x74>
 8000daa:	4a87      	ldr	r2, [pc, #540]	; (8000fc8 <HAL_GPIO_Init+0x284>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d020      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
 8000db0:	4a86      	ldr	r2, [pc, #536]	; (8000fcc <HAL_GPIO_Init+0x288>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01d      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
          break;
 8000db6:	e036      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000db8:	4a85      	ldr	r2, [pc, #532]	; (8000fd0 <HAL_GPIO_Init+0x28c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
 8000dbe:	4a85      	ldr	r2, [pc, #532]	; (8000fd4 <HAL_GPIO_Init+0x290>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d016      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
 8000dc4:	4a84      	ldr	r2, [pc, #528]	; (8000fd8 <HAL_GPIO_Init+0x294>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0xae>
          break;
 8000dca:	e02c      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	623b      	str	r3, [r7, #32]
          break;
 8000dd2:	e028      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	623b      	str	r3, [r7, #32]
          break;
 8000ddc:	e023      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	3308      	adds	r3, #8
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e01e      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	330c      	adds	r3, #12
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e019      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e012      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	611a      	str	r2, [r3, #16]
          break;
 8000e12:	e008      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2308      	movs	r3, #8
 8000e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	615a      	str	r2, [r3, #20]
          break;
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2bff      	cmp	r3, #255	; 0xff
 8000e2a:	d801      	bhi.n	8000e30 <HAL_GPIO_Init+0xec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	e001      	b.n	8000e34 <HAL_GPIO_Init+0xf0>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3304      	adds	r3, #4
 8000e34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2bff      	cmp	r3, #255	; 0xff
 8000e3a:	d802      	bhi.n	8000e42 <HAL_GPIO_Init+0xfe>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x104>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3b08      	subs	r3, #8
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	210f      	movs	r1, #15
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	401a      	ands	r2, r3
 8000e5a:	6a39      	ldr	r1, [r7, #32]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	431a      	orrs	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 8096 	beq.w	8000fa2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HAL_GPIO_Init+0x298>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a58      	ldr	r2, [pc, #352]	; (8000fdc <HAL_GPIO_Init+0x298>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <HAL_GPIO_Init+0x298>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e8e:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_GPIO_Init+0x29c>)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0x19e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00d      	beq.n	8000ede <HAL_GPIO_Init+0x19a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a49      	ldr	r2, [pc, #292]	; (8000fec <HAL_GPIO_Init+0x2a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x196>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_GPIO_Init+0x192>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x1a0>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x1a0>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x1a0>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x1a0>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ef4:	493a      	ldr	r1, [pc, #232]	; (8000fe0 <HAL_GPIO_Init+0x29c>)
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4938      	ldr	r1, [pc, #224]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4933      	ldr	r1, [pc, #204]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	492e      	ldr	r1, [pc, #184]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	604b      	str	r3, [r1, #4]
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4924      	ldr	r1, [pc, #144]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	608b      	str	r3, [r1, #8]
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	491f      	ldr	r1, [pc, #124]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	491a      	ldr	r1, [pc, #104]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60cb      	str	r3, [r1, #12]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4915      	ldr	r1, [pc, #84]	; (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f aed0 	bne.w	8000d58 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	372c      	adds	r7, #44	; 0x2c
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	10210000 	.word	0x10210000
 8000fc8:	10110000 	.word	0x10110000
 8000fcc:	10120000 	.word	0x10120000
 8000fd0:	10310000 	.word	0x10310000
 8000fd4:	10320000 	.word	0x10320000
 8000fd8:	10220000 	.word	0x10220000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40011400 	.word	0x40011400
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e10f      	b.n	800122a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 feb4 	bl	8002d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2224      	movs	r2, #36	; 0x24
 8001028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800103c:	f001 f8f6 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a7b      	ldr	r2, [pc, #492]	; (8001234 <HAL_I2C_Init+0x23c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d807      	bhi.n	800105c <HAL_I2C_Init+0x64>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a7a      	ldr	r2, [pc, #488]	; (8001238 <HAL_I2C_Init+0x240>)
 8001050:	4293      	cmp	r3, r2
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	e006      	b.n	800106a <HAL_I2C_Init+0x72>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a77      	ldr	r2, [pc, #476]	; (800123c <HAL_I2C_Init+0x244>)
 8001060:	4293      	cmp	r3, r2
 8001062:	bf94      	ite	ls
 8001064:	2301      	movls	r3, #1
 8001066:	2300      	movhi	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0db      	b.n	800122a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a72      	ldr	r2, [pc, #456]	; (8001240 <HAL_I2C_Init+0x248>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a64      	ldr	r2, [pc, #400]	; (8001234 <HAL_I2C_Init+0x23c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d802      	bhi.n	80010ac <HAL_I2C_Init+0xb4>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	e009      	b.n	80010c0 <HAL_I2C_Init+0xc8>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_I2C_Init+0x24c>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	3301      	adds	r3, #1
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4956      	ldr	r1, [pc, #344]	; (8001234 <HAL_I2C_Init+0x23c>)
 80010dc:	428b      	cmp	r3, r1
 80010de:	d80d      	bhi.n	80010fc <HAL_I2C_Init+0x104>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e59      	subs	r1, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	bf38      	it	cc
 80010f8:	2304      	movcc	r3, #4
 80010fa:	e04f      	b.n	800119c <HAL_I2C_Init+0x1a4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d111      	bne.n	8001128 <HAL_I2C_Init+0x130>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e58      	subs	r0, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e012      	b.n	800114e <HAL_I2C_Init+0x156>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	0099      	lsls	r1, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	fbb0 f3f3 	udiv	r3, r0, r3
 800113e:	3301      	adds	r3, #1
 8001140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Init+0x15e>
 8001152:	2301      	movs	r3, #1
 8001154:	e022      	b.n	800119c <HAL_I2C_Init+0x1a4>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <HAL_I2C_Init+0x184>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1e58      	subs	r0, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6859      	ldr	r1, [r3, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	440b      	add	r3, r1
 800116c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001170:	3301      	adds	r3, #1
 8001172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	e00f      	b.n	800119c <HAL_I2C_Init+0x1a4>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	0099      	lsls	r1, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	6809      	ldr	r1, [r1, #0]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69da      	ldr	r2, [r3, #28]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6911      	ldr	r1, [r2, #16]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68d2      	ldr	r2, [r2, #12]
 80011d6:	4311      	orrs	r1, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	430b      	orrs	r3, r1
 80011de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	000186a0 	.word	0x000186a0
 8001238:	001e847f 	.word	0x001e847f
 800123c:	003d08ff 	.word	0x003d08ff
 8001240:	431bde83 	.word	0x431bde83
 8001244:	10624dd3 	.word	0x10624dd3

08001248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	461a      	mov	r2, r3
 8001254:	460b      	mov	r3, r1
 8001256:	817b      	strh	r3, [r7, #10]
 8001258:	4613      	mov	r3, r2
 800125a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fc84 	bl	8000b68 <HAL_GetTick>
 8001260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b20      	cmp	r3, #32
 800126c:	f040 80e0 	bne.w	8001430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2319      	movs	r3, #25
 8001276:	2201      	movs	r2, #1
 8001278:	4970      	ldr	r1, [pc, #448]	; (800143c <HAL_I2C_Master_Transmit+0x1f4>)
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fa7a 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001286:	2302      	movs	r3, #2
 8001288:	e0d3      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_I2C_Master_Transmit+0x50>
 8001294:	2302      	movs	r3, #2
 8001296:	e0cc      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d007      	beq.n	80012be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2221      	movs	r2, #33	; 0x21
 80012d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2210      	movs	r2, #16
 80012da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	893a      	ldrh	r2, [r7, #8]
 80012ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_I2C_Master_Transmit+0x1f8>)
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001300:	8979      	ldrh	r1, [r7, #10]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	6a3a      	ldr	r2, [r7, #32]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f9be 	bl	8001688 <I2C_MasterRequestWrite>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e08d      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800132c:	e066      	b.n	80013fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	6a39      	ldr	r1, [r7, #32]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 faf4 	bl	8001920 <I2C_WaitOnTXEFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00d      	beq.n	800135a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	2b04      	cmp	r3, #4
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e06b      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b01      	subs	r3, #1
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11b      	bne.n	80013d0 <HAL_I2C_Master_Transmit+0x188>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d017      	beq.n	80013d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	6a39      	ldr	r1, [r7, #32]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fae4 	bl	80019a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d107      	bne.n	80013f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e01a      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d194      	bne.n	800132e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2220      	movs	r2, #32
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001430:	2302      	movs	r3, #2
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	00100002 	.word	0x00100002
 8001440:	ffff0000 	.word	0xffff0000

08001444 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fb88 	bl	8000b68 <HAL_GetTick>
 8001458:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	f040 8105 	bne.w	8001676 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2319      	movs	r3, #25
 8001472:	2201      	movs	r2, #1
 8001474:	4982      	ldr	r1, [pc, #520]	; (8001680 <HAL_I2C_IsDeviceReady+0x23c>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f97c 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	e0f8      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_I2C_IsDeviceReady+0x50>
 8001490:	2302      	movs	r3, #2
 8001492:	e0f1      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d007      	beq.n	80014ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2224      	movs	r2, #36	; 0x24
 80014ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_I2C_IsDeviceReady+0x240>)
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f93a 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0b6      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800150a:	897b      	ldrh	r3, [r7, #10]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001518:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb25 	bl	8000b68 <HAL_GetTick>
 800151e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800154e:	e025      	b.n	800159c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001550:	f7ff fb0a 	bl	8000b68 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d302      	bcc.n	8001566 <HAL_I2C_IsDeviceReady+0x122>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	22a0      	movs	r2, #160	; 0xa0
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b02      	cmp	r3, #2
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2ba0      	cmp	r3, #160	; 0xa0
 80015a6:	d005      	beq.n	80015b4 <HAL_I2C_IsDeviceReady+0x170>
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_I2C_IsDeviceReady+0x170>
 80015ae:	7dbb      	ldrb	r3, [r7, #22]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0cd      	beq.n	8001550 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d129      	bne.n	800161e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2319      	movs	r3, #25
 80015f6:	2201      	movs	r2, #1
 80015f8:	4921      	ldr	r1, [pc, #132]	; (8001680 <HAL_I2C_IsDeviceReady+0x23c>)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f8ba 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e036      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e02c      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001636:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	490f      	ldr	r1, [pc, #60]	; (8001680 <HAL_I2C_IsDeviceReady+0x23c>)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f896 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e012      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	3301      	adds	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	f4ff af3e 	bcc.w	80014de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001676:	2302      	movs	r3, #2
  }
}
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	00100002 	.word	0x00100002
 8001684:	ffff0000 	.word	0xffff0000

08001688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d006      	beq.n	80016b2 <I2C_MasterRequestWrite+0x2a>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d003      	beq.n	80016b2 <I2C_MasterRequestWrite+0x2a>
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016b0:	d108      	bne.n	80016c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e00b      	b.n	80016dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d107      	bne.n	80016dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f843 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e035      	b.n	8001764 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001700:	d108      	bne.n	8001714 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	e01b      	b.n	800174c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	11db      	asrs	r3, r3, #7
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 0306 	and.w	r3, r3, #6
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f063 030f 	orn	r3, r3, #15
 8001724:	b2da      	uxtb	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <I2C_MasterRequestWrite+0xe4>)
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f875 	bl	8001822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e010      	b.n	8001764 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001742:	897b      	ldrh	r3, [r7, #10]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <I2C_MasterRequestWrite+0xe8>)
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f865 	bl	8001822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	00010008 	.word	0x00010008
 8001770:	00010002 	.word	0x00010002

08001774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001784:	e025      	b.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d021      	beq.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178e:	f7ff f9eb 	bl	8000b68 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d302      	bcc.n	80017a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d116      	bne.n	80017d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f043 0220 	orr.w	r2, r3, #32
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e023      	b.n	800181a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10d      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4013      	ands	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf0c      	ite	eq
 80017ee:	2301      	moveq	r3, #1
 80017f0:	2300      	movne	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	e00c      	b.n	8001812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4013      	ands	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	429a      	cmp	r2, r3
 8001816:	d0b6      	beq.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001830:	e051      	b.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001840:	d123      	bne.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800185a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f043 0204 	orr.w	r2, r3, #4
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e046      	b.n	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d021      	beq.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001892:	f7ff f969 	bl	8000b68 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d302      	bcc.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d116      	bne.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d10c      	bne.n	80018fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4013      	ands	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	e00b      	b.n	8001912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	43da      	mvns	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4013      	ands	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d18d      	bne.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800192c:	e02d      	b.n	800198a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f878 	bl	8001a24 <I2C_IsAcknowledgeFailed>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e02d      	b.n	800199a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d021      	beq.n	800198a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001946:	f7ff f90f 	bl	8000b68 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	429a      	cmp	r2, r3
 8001954:	d302      	bcc.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d116      	bne.n	800198a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f043 0220 	orr.w	r2, r3, #32
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d1ca      	bne.n	800192e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ae:	e02d      	b.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f837 	bl	8001a24 <I2C_IsAcknowledgeFailed>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e02d      	b.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d021      	beq.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c8:	f7ff f8ce 	bl	8000b68 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d302      	bcc.n	80019de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e007      	b.n	8001a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d1ca      	bne.n	80019b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d11b      	bne.n	8001a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e26c      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aac:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06c      	beq.n	8001bac <HAL_RCC_OscConfig+0x12c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d168      	bne.n	8001bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e246      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae8:	4b80      	ldr	r3, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a7f      	ldr	r2, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b78      	ldr	r3, [pc, #480]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a77      	ldr	r2, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xbc>
 8001b22:	4b72      	ldr	r3, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a71      	ldr	r2, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f804 	bl	8000b68 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff f800 	bl	8000b68 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1fa      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe4>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe fff0 	bl	8000b68 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7fe ffec 	bl	8000b68 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1e6      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x10c>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1ba      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ffa5 	bl	8000b68 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7fe ffa1 	bl	8000b68 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e19b      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ff84 	bl	8000b68 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7fe ff80 	bl	8000b68 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e17a      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03a      	beq.n	8001d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d019      	beq.n	8001cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ff64 	bl	8000b68 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7fe ff60 	bl	8000b68 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e15a      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fac6 	bl	8002254 <RCC_Delay>
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ff4a 	bl	8000b68 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff46 	bl	8000b68 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d908      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e140      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	42420000 	.word	0x42420000
 8001cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b9e      	ldr	r3, [pc, #632]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e9      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a6 	beq.w	8001e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b97      	ldr	r3, [pc, #604]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b94      	ldr	r3, [pc, #592]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a93      	ldr	r2, [pc, #588]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b91      	ldr	r3, [pc, #580]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a8a      	ldr	r2, [pc, #552]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff07 	bl	8000b68 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe ff03 	bl	8000b68 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0fd      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d84:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a7a      	ldr	r2, [pc, #488]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e02d      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a72      	ldr	r2, [pc, #456]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	e01c      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x356>
 8001dbc:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a6c      	ldr	r2, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a63      	ldr	r2, [pc, #396]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe feb7 	bl	8000b68 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe feb3 	bl	8000b68 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ab      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ee      	beq.n	8001dfe <HAL_RCC_OscConfig+0x37e>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fea1 	bl	8000b68 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fe9d 	bl	8000b68 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e095      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8081 	beq.w	8001f6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d061      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d146      	bne.n	8001f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fe71 	bl	8000b68 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fe6d 	bl	8000b68 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e067      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	492d      	ldr	r1, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	4927      	ldr	r1, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fe41 	bl	8000b68 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fe3d 	bl	8000b68 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e037      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
 8001f08:	e02f      	b.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe2a 	bl	8000b68 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe fe26 	bl	8000b68 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e020      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x498>
 8001f36:	e018      	b.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d0      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e073      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06b      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe fd7a 	bl	8000b68 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe fd76 	bl	8000b68 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e053      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4601      	mov	r1, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	fa21 f303 	lsr.w	r3, r1, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1cc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fcd8 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	08006460 	.word	0x08006460
 800214c:	2000001c 	.word	0x2000001c
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b490      	push	{r4, r7}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0xb0>)
 800215c:	1d3c      	adds	r4, r7, #4
 800215e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d002      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x40>
 800218e:	2b08      	cmp	r3, #8
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x46>
 8002192:	e02d      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002196:	623b      	str	r3, [r7, #32]
      break;
 8002198:	e02d      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	0c9b      	lsrs	r3, r3, #18
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021a6:	4413      	add	r3, r2
 80021a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	0c5b      	lsrs	r3, r3, #17
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021c6:	4413      	add	r3, r2
 80021c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d2:	fb02 f203 	mul.w	r2, r2, r3
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	e004      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	623b      	str	r3, [r7, #32]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f2:	623b      	str	r3, [r7, #32]
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	6a3b      	ldr	r3, [r7, #32]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc90      	pop	{r4, r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	08004f60 	.word	0x08004f60
 8002208:	08004f70 	.word	0x08004f70
 800220c:	40021000 	.word	0x40021000
 8002210:	007a1200 	.word	0x007a1200
 8002214:	003d0900 	.word	0x003d0900

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_GetHCLKFreq+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	2000001c 	.word	0x2000001c

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002234:	4601      	mov	r1, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08006470 	.word	0x08006470

08002254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <RCC_Delay+0x34>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <RCC_Delay+0x38>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002270:	bf00      	nop
  }
  while (Delay --);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <RCC_Delay+0x1c>
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000001c 	.word	0x2000001c
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002294:	f7fe fc10 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002298:	f000 f807 	bl	80022aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229c:	f000 f878 	bl	8002390 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022a0:	f000 f848 	bl	8002334 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  main_s();
 80022a4:	f000 f8a8 	bl	80023f8 <main_s>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <main+0x18>

080022aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b090      	sub	sp, #64	; 0x40
 80022ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	2228      	movs	r2, #40	; 0x28
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fe87 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022da:	2301      	movs	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022de:	2302      	movs	r3, #2
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fbc4 	bl	8001a80 <HAL_RCC_OscConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022fe:	f000 f875 	bl	80023ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002306:	2302      	movs	r3, #2
 8002308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2102      	movs	r1, #2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe2f 	bl	8001f80 <HAL_RCC_ClockConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002328:	f000 f860 	bl	80023ec <Error_Handler>
  }
}
 800232c:	bf00      	nop
 800232e:	3740      	adds	r7, #64	; 0x40
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_I2C1_Init+0x50>)
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <MX_I2C1_Init+0x54>)
 800233c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_I2C1_Init+0x50>)
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <MX_I2C1_Init+0x58>)
 8002342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_I2C1_Init+0x50>)
 8002352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <MX_I2C1_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_I2C1_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_I2C1_Init+0x50>)
 8002372:	f7fe fe41 	bl	8000ff8 <HAL_I2C_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800237c:	f000 f836 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200000c0 	.word	0x200000c0
 8002388:	40005400 	.word	0x40005400
 800238c:	00061a80 	.word	0x00061a80

08002390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_GPIO_Init+0x58>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <MX_GPIO_Init+0x58>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6193      	str	r3, [r2, #24]
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6193      	str	r3, [r2, #24]
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <MX_GPIO_Init+0x58>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]

}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <main_s>:

/**
  * @brief  The application entry point.
  * @retval none
  */
void main_s(void){
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af04      	add	r7, sp, #16
	/* MAIN CODE */
	ssd1306_1 = ssd1306_new(i2c, 0x78); // 0x79
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <main_s+0xb8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2178      	movs	r1, #120	; 0x78
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f85b 	bl	80024c0 <ssd1306_new>
 800240a:	4602      	mov	r2, r0
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <main_s+0xbc>)
 800240e:	601a      	str	r2, [r3, #0]
	
	double data = -30.12345678;
 8002410:	a425      	add	r4, pc, #148	; (adr r4, 80024a8 <main_s+0xb0>)
 8002412:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002416:	e9c7 3400 	strd	r3, r4, [r7]
	SSD1306_Putdouble(ssd1306_1, data, 4, NO, 1);
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <main_s+0xbc>)
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <main_s+0xc0>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2304      	movs	r3, #4
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242e:	4608      	mov	r0, r1
 8002430:	f000 fb42 	bl	8002ab8 <SSD1306_Putdouble>
	SSD1306_Putdouble(ssd1306_1, data, 4, MV, 2);
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <main_s+0xbc>)
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	2302      	movs	r3, #2
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <main_s+0xc4>)
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2304      	movs	r3, #4
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002448:	4608      	mov	r0, r1
 800244a:	f000 fb35 	bl	8002ab8 <SSD1306_Putdouble>
	SSD1306_Putdouble(ssd1306_1, data, 6, MV, 3);
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <main_s+0xbc>)
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	2303      	movs	r3, #3
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <main_s+0xc4>)
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2306      	movs	r3, #6
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002462:	4608      	mov	r0, r1
 8002464:	f000 fb28 	bl	8002ab8 <SSD1306_Putdouble>
	SSD1306_Putdouble(ssd1306_1, data, 1, NO, 4);
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <main_s+0xbc>)
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	2304      	movs	r3, #4
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <main_s+0xc0>)
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	2301      	movs	r3, #1
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800247c:	4608      	mov	r0, r1
 800247e:	f000 fb1b 	bl	8002ab8 <SSD1306_Putdouble>
	SSD1306_Putdouble(ssd1306_1, data, 4, NO, 5);
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <main_s+0xbc>)
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	2305      	movs	r3, #5
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <main_s+0xc0>)
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2304      	movs	r3, #4
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002496:	4608      	mov	r0, r1
 8002498:	f000 fb0e 	bl	8002ab8 <SSD1306_Putdouble>
	SSD1306_UpdateScreen(ssd1306_1);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <main_s+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f8e9 	bl	8002678 <SSD1306_UpdateScreen>
//	SSD1306_Putint(ssd1306_1, 12345678,  MV, 3);
//	SSD1306_Putint(ssd1306_1, 1234567, NO, 4);
//	SSD1306_Putint(ssd1306_1, -1234567, NO, 5);
//	SSD1306_UpdateScreen(ssd1306_1);

	while(1){
 80024a6:	e7fe      	b.n	80024a6 <main_s+0xae>
 80024a8:	dd1091c9 	.word	0xdd1091c9
 80024ac:	c03e1f9a 	.word	0xc03e1f9a
 80024b0:	20000018 	.word	0x20000018
 80024b4:	20000114 	.word	0x20000114
 80024b8:	08004f74 	.word	0x08004f74
 80024bc:	08004f78 	.word	0x08004f78

080024c0 <ssd1306_new>:
#include "ssd1306_basic.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 80024cc:	f44f 6086 	mov.w	r0, #1072	; 0x430
 80024d0:	f000 fd74 	bl	8002fbc <malloc>
 80024d4:	4603      	mov	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	461a      	mov	r2, r3
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f805 	bl	80024ee <SSD1306_Init>
	return ssd1306;
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6858      	ldr	r0, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b299      	uxth	r1, r3
 8002512:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002516:	2201      	movs	r2, #1
 8002518:	f7fe ff94 	bl	8001444 <HAL_I2C_IsDeviceReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 8002522:	2300      	movs	r3, #0
 8002524:	e0a4      	b.n	8002670 <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8002526:	22ae      	movs	r2, #174	; 0xae
 8002528:	2100      	movs	r1, #0
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fbdf 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 8002530:	22ae      	movs	r2, #174	; 0xae
 8002532:	2100      	movs	r1, #0
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fbda 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 800253a:	2220      	movs	r2, #32
 800253c:	2100      	movs	r1, #0
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fbd5 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002544:	2210      	movs	r2, #16
 8002546:	2100      	movs	r1, #0
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fbd0 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800254e:	22b0      	movs	r2, #176	; 0xb0
 8002550:	2100      	movs	r1, #0
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fbcb 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8002558:	22c8      	movs	r2, #200	; 0xc8
 800255a:	2100      	movs	r1, #0
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fbc6 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fbc1 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 800256c:	2210      	movs	r2, #16
 800256e:	2100      	movs	r1, #0
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fbbc 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8002576:	2240      	movs	r2, #64	; 0x40
 8002578:	2100      	movs	r1, #0
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fbb7 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 8002580:	2281      	movs	r2, #129	; 0x81
 8002582:	2100      	movs	r1, #0
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fbb2 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	2100      	movs	r1, #0
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fbad 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 8002594:	22a1      	movs	r2, #161	; 0xa1
 8002596:	2100      	movs	r1, #0
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fba8 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 800259e:	22a6      	movs	r2, #166	; 0xa6
 80025a0:	2100      	movs	r1, #0
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fba3 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 80025a8:	22a8      	movs	r2, #168	; 0xa8
 80025aa:	2100      	movs	r1, #0
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fb9e 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	2100      	movs	r1, #0
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb99 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025bc:	22a4      	movs	r2, #164	; 0xa4
 80025be:	2100      	movs	r1, #0
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fb94 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 80025c6:	22d3      	movs	r2, #211	; 0xd3
 80025c8:	2100      	movs	r1, #0
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fb8f 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fb8a 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 80025da:	22d5      	movs	r2, #213	; 0xd5
 80025dc:	2100      	movs	r1, #0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb85 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 80025e4:	22f0      	movs	r2, #240	; 0xf0
 80025e6:	2100      	movs	r1, #0
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fb80 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 80025ee:	22d9      	movs	r2, #217	; 0xd9
 80025f0:	2100      	movs	r1, #0
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fb7b 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 80025f8:	2222      	movs	r2, #34	; 0x22
 80025fa:	2100      	movs	r1, #0
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fb76 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 8002602:	22da      	movs	r2, #218	; 0xda
 8002604:	2100      	movs	r1, #0
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fb71 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 800260c:	2212      	movs	r2, #18
 800260e:	2100      	movs	r1, #0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fb6c 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8002616:	22db      	movs	r2, #219	; 0xdb
 8002618:	2100      	movs	r1, #0
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fb67 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 8002620:	2220      	movs	r2, #32
 8002622:	2100      	movs	r1, #0
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fb62 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 800262a:	228d      	movs	r2, #141	; 0x8d
 800262c:	2100      	movs	r1, #0
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fb5d 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 8002634:	2214      	movs	r2, #20
 8002636:	2100      	movs	r1, #0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fb58 	bl	8002cee <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 800263e:	22af      	movs	r2, #175	; 0xaf
 8002640:	2100      	movs	r1, #0
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fb53 	bl	8002cee <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8002648:	2100      	movs	r1, #0
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f845 	bl	80026da <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f811 	bl	8002678 <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e022      	b.n	80026cc <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	3b50      	subs	r3, #80	; 0x50
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fb2c 	bl	8002cee <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fb27 	bl	8002cee <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 80026a0:	2210      	movs	r2, #16
 80026a2:	2100      	movs	r1, #0
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fb22 	bl	8002cee <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	4613      	mov	r3, r2
 80026ae:	015b      	lsls	r3, r3, #5
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3308      	adds	r3, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	1d9a      	adds	r2, r3, #6
 80026bc:	2384      	movs	r3, #132	; 0x84
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fabc 	bl	8002c3e <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3301      	adds	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d9d9      	bls.n	8002686 <SSD1306_UpdateScreen+0xe>
	}
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f103 000e 	add.w	r0, r3, #14
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <SSD1306_Fill+0x1c>
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <SSD1306_Fill+0x1e>
 80026f6:	23ff      	movs	r3, #255	; 0xff
 80026f8:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80026fc:	4619      	mov	r1, r3
 80026fe:	f000 fc65 	bl	8002fcc <memset>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800270a:	b490      	push	{r4, r7}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	4603      	mov	r3, r0
 800271a:	817b      	strh	r3, [r7, #10]
 800271c:	460b      	mov	r3, r1
 800271e:	813b      	strh	r3, [r7, #8]
 8002720:	4613      	mov	r3, r2
 8002722:	71fb      	strb	r3, [r7, #7]
	if (
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	2b83      	cmp	r3, #131	; 0x83
 8002728:	d85a      	bhi.n	80027e0 <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 800272a:	893b      	ldrh	r3, [r7, #8]
 800272c:	2b3f      	cmp	r3, #63	; 0x3f
 800272e:	d857      	bhi.n	80027e0 <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	7b1b      	ldrb	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d123      	bne.n	8002794 <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800274c:	897a      	ldrh	r2, [r7, #10]
 800274e:	893b      	ldrh	r3, [r7, #8]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	b298      	uxth	r0, r3
 8002754:	4601      	mov	r1, r0
 8002756:	460b      	mov	r3, r1
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	440b      	add	r3, r1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	7b9b      	ldrb	r3, [r3, #14]
 8002766:	b25a      	sxtb	r2, r3
 8002768:	893b      	ldrh	r3, [r7, #8]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	b25b      	sxtb	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b25c      	sxtb	r4, r3
 800277a:	897a      	ldrh	r2, [r7, #10]
 800277c:	4601      	mov	r1, r0
 800277e:	460b      	mov	r3, r1
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	440b      	add	r3, r1
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	b2e1      	uxtb	r1, r4
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	460a      	mov	r2, r1
 8002790:	739a      	strb	r2, [r3, #14]
 8002792:	e026      	b.n	80027e2 <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002794:	897a      	ldrh	r2, [r7, #10]
 8002796:	893b      	ldrh	r3, [r7, #8]
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	b298      	uxth	r0, r3
 800279c:	4601      	mov	r1, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	015b      	lsls	r3, r3, #5
 80027a2:	440b      	add	r3, r1
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	7b9b      	ldrb	r3, [r3, #14]
 80027ae:	b25a      	sxtb	r2, r3
 80027b0:	893b      	ldrh	r3, [r7, #8]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	4013      	ands	r3, r2
 80027c4:	b25c      	sxtb	r4, r3
 80027c6:	897a      	ldrh	r2, [r7, #10]
 80027c8:	4601      	mov	r1, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	440b      	add	r3, r1
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	b2e1      	uxtb	r1, r4
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	460a      	mov	r2, r1
 80027dc:	739a      	strb	r2, [r3, #14]
 80027de:	e000      	b.n	80027e2 <SSD1306_DrawPixel+0xd8>
		return;
 80027e0:	bf00      	nop
	}
}
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc90      	pop	{r4, r7}
 80027e8:	4770      	bx	lr

080027ea <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]
 80027f6:	4613      	mov	r3, r2
 80027f8:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	883a      	ldrh	r2, [r7, #0]
 8002804:	815a      	strh	r2, [r3, #10]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	460b      	mov	r3, r1
 800281e:	72fb      	strb	r3, [r7, #11]
 8002820:	4613      	mov	r3, r2
 8002822:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	891b      	ldrh	r3, [r3, #8]
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
	if (
 8002830:	2b83      	cmp	r3, #131	; 0x83
 8002832:	dc07      	bgt.n	8002844 <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	895b      	ldrh	r3, [r3, #10]
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8002840:	2b3f      	cmp	r3, #63	; 0x3f
 8002842:	dd01      	ble.n	8002848 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8002844:	2300      	movs	r3, #0
 8002846:	e05e      	b.n	8002906 <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	e04b      	b.n	80028e6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	3b20      	subs	r3, #32
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	7849      	ldrb	r1, [r1, #1]
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4619      	mov	r1, r3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	440b      	add	r3, r1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	e030      	b.n	80028d4 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	891a      	ldrh	r2, [r3, #8]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b299      	uxth	r1, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	895a      	ldrh	r2, [r3, #10]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4413      	add	r3, r2
 8002898:	b29a      	uxth	r2, r3
 800289a:	7abb      	ldrb	r3, [r7, #10]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff ff34 	bl	800270a <SSD1306_DrawPixel>
 80028a2:	e014      	b.n	80028ce <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	891a      	ldrh	r2, [r3, #8]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	b299      	uxth	r1, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	895a      	ldrh	r2, [r3, #10]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	7abb      	ldrb	r3, [r7, #10]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff ff1e 	bl	800270a <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4293      	cmp	r3, r2
 80028de:	d3c8      	bcc.n	8002872 <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d3ad      	bcc.n	800284e <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	891a      	ldrh	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 8002904:	7afb      	ldrb	r3, [r7, #11]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <double_str>:
 * @param  number: double to be represented
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @retval Char array containing a char for each digit
 */
char* double_str(double number, uint8_t decimals, char* unit){
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	466b      	mov	r3, sp
 8002922:	461d      	mov	r5, r3

	uint8_t negative = ' ';
 8002924:	2320      	movs	r3, #32
 8002926:	77bb      	strb	r3, [r7, #30]
	if (number < 0) {
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002934:	f7fe f83a 	bl	80009ac <__aeabi_dcmplt>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <double_str+0x3e>
		number = -number;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002948:	60fb      	str	r3, [r7, #12]
		negative = '-';
 800294a:	232d      	movs	r3, #45	; 0x2d
 800294c:	77bb      	strb	r3, [r7, #30]
	}

	number = round(number*pow(10, decimals));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fd3f 	bl	80003d4 <__aeabi_ui2d>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	461a      	mov	r2, r3
 800295c:	4623      	mov	r3, r4
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	4951      	ldr	r1, [pc, #324]	; (8002aa8 <double_str+0x198>)
 8002964:	f001 f890 	bl	8003a88 <pow>
 8002968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800296c:	f7fd fdac 	bl	80004c8 <__aeabi_dmul>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4618      	mov	r0, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f000 ffc6 	bl	8003908 <round>
 800297c:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint8_t size = SSD1306_digits(number);
 8002980:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002984:	f7fe f850 	bl	8000a28 <__aeabi_d2iz>
 8002988:	4603      	mov	r3, r0
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f904 	bl	8002b98 <SSD1306_digits>
 8002990:	4603      	mov	r3, r0
 8002992:	777b      	strb	r3, [r7, #29]
	if (size > 6) {
 8002994:	7f7b      	ldrb	r3, [r7, #29]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d901      	bls.n	800299e <double_str+0x8e>
		return "OVERLOAD";
 800299a:	4b44      	ldr	r3, [pc, #272]	; (8002aac <double_str+0x19c>)
 800299c:	e07e      	b.n	8002a9c <double_str+0x18c>
	}
	char data_char[size];
 800299e:	7f78      	ldrb	r0, [r7, #29]
 80029a0:	4603      	mov	r3, r0
 80029a2:	3b01      	subs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	b2c1      	uxtb	r1, r0
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	00d4      	lsls	r4, r2, #3
 80029b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029ba:	00cb      	lsls	r3, r1, #3
 80029bc:	b2c1      	uxtb	r1, r0
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	00d4      	lsls	r4, r2, #3
 80029cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029d0:	00cb      	lsls	r3, r1, #3
 80029d2:	4603      	mov	r3, r0
 80029d4:	3307      	adds	r3, #7
 80029d6:	08db      	lsrs	r3, r3, #3
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	ebad 0d03 	sub.w	sp, sp, r3
 80029de:	466b      	mov	r3, sp
 80029e0:	3300      	adds	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
	sprintf(data_char,"%d", (int)number);
 80029e4:	697c      	ldr	r4, [r7, #20]
 80029e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ea:	f7fe f81d 	bl	8000a28 <__aeabi_d2iz>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	492f      	ldr	r1, [pc, #188]	; (8002ab0 <double_str+0x1a0>)
 80029f4:	4620      	mov	r0, r4
 80029f6:	f000 fba7 	bl	8003148 <siprintf>

	static char double_str[11];
	for(int8_t i=1; i<11; i++){
 80029fa:	2301      	movs	r3, #1
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e03b      	b.n	8002a78 <double_str+0x168>
		if (i < (size-decimals+1)){
 8002a00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002a04:	7f79      	ldrb	r1, [r7, #29]
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	1acb      	subs	r3, r1, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	da09      	bge.n	8002a24 <double_str+0x114>
			double_str[i] = data_char[i-1];
 8002a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a1a:	6979      	ldr	r1, [r7, #20]
 8002a1c:	5c89      	ldrb	r1, [r1, r2]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <double_str+0x1a4>)
 8002a20:	54d1      	strb	r1, [r2, r3]
 8002a22:	e023      	b.n	8002a6c <double_str+0x15c>
		} else if (i < size+2){
 8002a24:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002a28:	7f7b      	ldrb	r3, [r7, #29]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	da09      	bge.n	8002a44 <double_str+0x134>
			double_str[i] = data_char[i-2];
 8002a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a34:	1e9a      	subs	r2, r3, #2
 8002a36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a3a:	6979      	ldr	r1, [r7, #20]
 8002a3c:	5c89      	ldrb	r1, [r1, r2]
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <double_str+0x1a4>)
 8002a40:	54d1      	strb	r1, [r2, r3]
 8002a42:	e013      	b.n	8002a6c <double_str+0x15c>
		} else if (i < 11-2){
 8002a44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	dc05      	bgt.n	8002a58 <double_str+0x148>
			double_str[i] = ' ';
 8002a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <double_str+0x1a4>)
 8002a52:	2120      	movs	r1, #32
 8002a54:	54d1      	strb	r1, [r2, r3]
 8002a56:	e009      	b.n	8002a6c <double_str+0x15c>
		} else {
			double_str[i] = unit[i-9];
 8002a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a5c:	3b09      	subs	r3, #9
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	441a      	add	r2, r3
 8002a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a66:	7811      	ldrb	r1, [r2, #0]
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <double_str+0x1a4>)
 8002a6a:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=1; i<11; i++){
 8002a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a7c:	2b0a      	cmp	r3, #10
 8002a7e:	ddbf      	ble.n	8002a00 <double_str+0xf0>
		}
	}
	double_str[0] = negative;
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <double_str+0x1a4>)
 8002a82:	7fbb      	ldrb	r3, [r7, #30]
 8002a84:	7013      	strb	r3, [r2, #0]
	double_str[size-decimals+1] = '.';
 8002a86:	7f7a      	ldrb	r2, [r7, #29]
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <double_str+0x1a4>)
 8002a90:	212e      	movs	r1, #46	; 0x2e
 8002a92:	54d1      	strb	r1, [r2, r3]
	double_str[8] = ' ';
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <double_str+0x1a4>)
 8002a96:	2220      	movs	r2, #32
 8002a98:	721a      	strb	r2, [r3, #8]
	return double_str;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <double_str+0x1a4>)
 8002a9c:	46ad      	mov	sp, r5
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40240000 	.word	0x40240000
 8002aac:	08004f7c 	.word	0x08004f7c
 8002ab0:	08004f88 	.word	0x08004f88
 8002ab4:	200000a4 	.word	0x200000a4

08002ab8 <SSD1306_Putdouble>:
 * @param  data: double to be written
 * @param  decimals: number of decimals to be represented
 * @param  unit: unit of the value, 2 char array (NO, MV, V, MA, A, "uV", "ms", etc.)
 * @param  slot: slot to be used. 1, 2, and 3 are large slots. 4 and 5 are small slots
 */
void SSD1306_Putdouble(ssd1306_t* ssd1306, double data, uint8_t decimals, char* unit, uint8_t slot) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	e9c7 2300 	strd	r2, r3, [r7]
	char* float_str = double_str(data, decimals, unit);
 8002ac4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ace:	f7ff ff1f 	bl	8002910 <double_str>
 8002ad2:	61b8      	str	r0, [r7, #24]

	uint16_t x_slot = 1;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	83fb      	strh	r3, [r7, #30]
	uint16_t y_slot = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	83bb      	strh	r3, [r7, #28]
	FontDef_t font = Font_11x18;
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <SSD1306_Putdouble+0xd4>)
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae6:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (slot) {
 8002aea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aee:	3b01      	subs	r3, #1
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d82c      	bhi.n	8002b4e <SSD1306_Putdouble+0x96>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <SSD1306_Putdouble+0x44>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b17 	.word	0x08002b17
 8002b04:	08002b1d 	.word	0x08002b1d
 8002b08:	08002b23 	.word	0x08002b23
 8002b0c:	08002b37 	.word	0x08002b37
	case 1:
		y_slot = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	83bb      	strh	r3, [r7, #28]
		break;
 8002b14:	e01b      	b.n	8002b4e <SSD1306_Putdouble+0x96>
	case 2:
		y_slot = 17;
 8002b16:	2311      	movs	r3, #17
 8002b18:	83bb      	strh	r3, [r7, #28]
		break;
 8002b1a:	e018      	b.n	8002b4e <SSD1306_Putdouble+0x96>
	case 3:
		y_slot = 34;
 8002b1c:	2322      	movs	r3, #34	; 0x22
 8002b1e:	83bb      	strh	r3, [r7, #28]
		break;
 8002b20:	e015      	b.n	8002b4e <SSD1306_Putdouble+0x96>
	case 4:
		y_slot = 53;
 8002b22:	2335      	movs	r3, #53	; 0x35
 8002b24:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 8002b26:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <SSD1306_Putdouble+0xd8>)
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b30:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002b34:	e00b      	b.n	8002b4e <SSD1306_Putdouble+0x96>
	case 5:
		x_slot = 65;
 8002b36:	2341      	movs	r3, #65	; 0x41
 8002b38:	83fb      	strh	r3, [r7, #30]
		y_slot = 53;
 8002b3a:	2335      	movs	r3, #53	; 0x35
 8002b3c:	83bb      	strh	r3, [r7, #28]
		font = Font_7x10;
 8002b3e:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <SSD1306_Putdouble+0xd8>)
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b48:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002b4c:	bf00      	nop
	}

	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8002b4e:	8bba      	ldrh	r2, [r7, #28]
 8002b50:	8bfb      	ldrh	r3, [r7, #30]
 8002b52:	4619      	mov	r1, r3
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fe48 	bl	80027ea <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &font, 1);
 8002b5a:	f107 0210 	add.w	r2, r7, #16
 8002b5e:	2301      	movs	r3, #1
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <SSD1306_Putdouble+0xdc>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f846 	bl	8002bf4 <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 8002b68:	8bba      	ldrh	r2, [r7, #28]
 8002b6a:	8bfb      	ldrh	r3, [r7, #30]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff fe3b 	bl	80027ea <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, float_str, &font, 1);
 8002b74:	f107 0210 	add.w	r2, r7, #16
 8002b78:	2301      	movs	r3, #1
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f839 	bl	8002bf4 <SSD1306_Puts>
}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010
 8002b90:	20000008 	.word	0x20000008
 8002b94:	08004f8c 	.word	0x08004f8c

08002b98 <SSD1306_digits>:
/**
 * @brief  Calculates the number of digits needed to represent an integer
 * @param  int: integer to be processed
 * @retval Number of digits in an integer
 */
uint8_t SSD1306_digits(int integer){
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	uint8_t digits;
	if (integer==0){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <SSD1306_digits+0x14>
		digits = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e01b      	b.n	8002be4 <SSD1306_digits+0x4c>
	}
	else {
		digits = floor(log10(integer))+1;
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fd fc21 	bl	80003f4 <__aeabi_i2d>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f000 feeb 	bl	8003994 <log10>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	f000 fe1b 	bl	8003800 <floor>
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <SSD1306_digits+0x58>)
 8002bd0:	f7fd fac4 	bl	800015c <__adddf3>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	4621      	mov	r1, r4
 8002bdc:	f7fd ff4c 	bl	8000a78 <__aeabi_d2uiz>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]
	}
	return digits;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	3ff00000 	.word	0x3ff00000

08002bf4 <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 8002c02:	e012      	b.n	8002c2a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	7819      	ldrb	r1, [r3, #0]
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff fdff 	bl	8002810 <SSD1306_Putc>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d002      	beq.n	8002c24 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	e008      	b.n	8002c36 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e8      	bne.n	8002c04 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 8002c3e:	b5b0      	push	{r4, r5, r7, lr}
 8002c40:	b08a      	sub	sp, #40	; 0x28
 8002c42:	af02      	add	r7, sp, #8
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	72fb      	strb	r3, [r7, #11]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	466b      	mov	r3, sp
 8002c54:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	1c58      	adds	r0, r3, #1
 8002c5a:	1e43      	subs	r3, r0, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	00d4      	lsls	r4, r2, #3
 8002c70:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c74:	00cb      	lsls	r3, r1, #3
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	00d4      	lsls	r4, r2, #3
 8002c88:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c8c:	00cb      	lsls	r3, r1, #3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	3307      	adds	r3, #7
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	ebad 0d03 	sub.w	sp, sp, r3
 8002c9a:	ab02      	add	r3, sp, #8
 8002c9c:	3300      	adds	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	7afa      	ldrb	r2, [r7, #11]
 8002ca4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e00a      	b.n	8002cc2 <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	7811      	ldrb	r1, [r2, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	893a      	ldrh	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d2ef      	bcs.n	8002cac <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6858      	ldr	r0, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b299      	uxth	r1, r3
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	893c      	ldrh	r4, [r7, #8]
 8002cda:	230a      	movs	r3, #10
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4623      	mov	r3, r4
 8002ce0:	f7fe fab2 	bl	8001248 <HAL_I2C_Master_Transmit>
 8002ce4:	46ad      	mov	sp, r5
}
 8002ce6:	bf00      	nop
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}

08002cee <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af02      	add	r7, sp, #8
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	70fb      	strb	r3, [r7, #3]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002d02:	78bb      	ldrb	r3, [r7, #2]
 8002d04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6858      	ldr	r0, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	f107 020c 	add.w	r2, r7, #12
 8002d14:	230a      	movs	r3, #10
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f7fe fa95 	bl	8001248 <HAL_I2C_Master_Transmit>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6193      	str	r3, [r2, #24]
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_MspInit+0x60>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_MspInit+0x60>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000

08002d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_I2C_MspInit+0x70>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d123      	bne.n	8002df4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc8:	2312      	movs	r3, #18
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	480b      	ldr	r0, [pc, #44]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002dd8:	f7fd ffb4 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002de6:	61d3      	str	r3, [r2, #28]
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002df4:	bf00      	nop
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40005400 	.word	0x40005400
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010c00 	.word	0x40010c00

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <HardFault_Handler+0x4>

08002e1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <MemManage_Handler+0x4>

08002e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <BusFault_Handler+0x4>

08002e26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <UsageFault_Handler+0x4>

08002e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e54:	f7fd fe76 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <_sbrk+0x50>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <_sbrk+0x16>
		heap_end = &end;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <_sbrk+0x50>)
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <_sbrk+0x54>)
 8002e70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <_sbrk+0x50>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <_sbrk+0x50>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	466a      	mov	r2, sp
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d907      	bls.n	8002e96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e86:	f000 f86f 	bl	8002f68 <__errno>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e006      	b.n	8002ea4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <_sbrk+0x50>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a03      	ldr	r2, [pc, #12]	; (8002eac <_sbrk+0x50>)
 8002ea0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200000b0 	.word	0x200000b0
 8002eb0:	20000120 	.word	0x20000120

08002eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <SystemInit+0x5c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <SystemInit+0x5c>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <SystemInit+0x5c>)
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4911      	ldr	r1, [pc, #68]	; (8002f10 <SystemInit+0x5c>)
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <SystemInit+0x60>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <SystemInit+0x5c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <SystemInit+0x5c>)
 8002ed6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <SystemInit+0x5c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SystemInit+0x5c>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <SystemInit+0x5c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <SystemInit+0x5c>)
 8002ef2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ef6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SystemInit+0x5c>)
 8002efa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002efe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SystemInit+0x64>)
 8002f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f06:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40021000 	.word	0x40021000
 8002f14:	f8ff0000 	.word	0xf8ff0000
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f1e:	e003      	b.n	8002f28 <LoopCopyDataInit>

08002f20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f26:	3104      	adds	r1, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f28:	480a      	ldr	r0, [pc, #40]	; (8002f54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f30:	d3f6      	bcc.n	8002f20 <CopyDataInit>
  ldr r2, =_sbss
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f34:	e002      	b.n	8002f3c <LoopFillZerobss>

08002f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f38:	f842 3b04 	str.w	r3, [r2], #4

08002f3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f40:	d3f9      	bcc.n	8002f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f42:	f7ff ffb7 	bl	8002eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f000 f815 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f4a:	f7ff f9a1 	bl	8002290 <main>
  bx lr
 8002f4e:	4770      	bx	lr
  ldr r3, =_sidata
 8002f50:	08006500 	.word	0x08006500
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f58:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002f5c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002f60:	2000011c 	.word	0x2000011c

08002f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC1_2_IRQHandler>
	...

08002f68 <__errno>:
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <__errno+0x8>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000020 	.word	0x20000020

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2500      	movs	r5, #0
 8002f78:	4e0c      	ldr	r6, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1ba4      	subs	r4, r4, r6
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a5      	cmp	r5, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	f001 ffe0 	bl	8004f48 <_init>
 8002f88:	2500      	movs	r5, #0
 8002f8a:	4e0a      	ldr	r6, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1ba4      	subs	r4, r4, r6
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a5      	cmp	r5, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f9c:	4798      	blx	r3
 8002f9e:	3501      	adds	r5, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fa6:	4798      	blx	r3
 8002fa8:	3501      	adds	r5, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	080064f8 	.word	0x080064f8
 8002fb0:	080064f8 	.word	0x080064f8
 8002fb4:	080064f8 	.word	0x080064f8
 8002fb8:	080064fc 	.word	0x080064fc

08002fbc <malloc>:
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <malloc+0xc>)
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f000 b857 	b.w	8003074 <_malloc_r>
 8002fc6:	bf00      	nop
 8002fc8:	20000020 	.word	0x20000020

08002fcc <memset>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4402      	add	r2, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <_free_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	4605      	mov	r5, r0
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d043      	beq.n	800306c <_free_r+0x90>
 8002fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe8:	1f0c      	subs	r4, r1, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfb8      	it	lt
 8002fee:	18e4      	addlt	r4, r4, r3
 8002ff0:	f000 f8ca 	bl	8003188 <__malloc_lock>
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <_free_r+0x94>)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	b933      	cbnz	r3, 800300a <_free_r+0x2e>
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	6014      	str	r4, [r2, #0]
 8003000:	4628      	mov	r0, r5
 8003002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003006:	f000 b8c0 	b.w	800318a <__malloc_unlock>
 800300a:	42a3      	cmp	r3, r4
 800300c:	d90b      	bls.n	8003026 <_free_r+0x4a>
 800300e:	6821      	ldr	r1, [r4, #0]
 8003010:	1862      	adds	r2, r4, r1
 8003012:	4293      	cmp	r3, r2
 8003014:	bf01      	itttt	eq
 8003016:	681a      	ldreq	r2, [r3, #0]
 8003018:	685b      	ldreq	r3, [r3, #4]
 800301a:	1852      	addeq	r2, r2, r1
 800301c:	6022      	streq	r2, [r4, #0]
 800301e:	6063      	str	r3, [r4, #4]
 8003020:	6004      	str	r4, [r0, #0]
 8003022:	e7ed      	b.n	8003000 <_free_r+0x24>
 8003024:	4613      	mov	r3, r2
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	b10a      	cbz	r2, 800302e <_free_r+0x52>
 800302a:	42a2      	cmp	r2, r4
 800302c:	d9fa      	bls.n	8003024 <_free_r+0x48>
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	1858      	adds	r0, r3, r1
 8003032:	42a0      	cmp	r0, r4
 8003034:	d10b      	bne.n	800304e <_free_r+0x72>
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	4401      	add	r1, r0
 800303a:	1858      	adds	r0, r3, r1
 800303c:	4282      	cmp	r2, r0
 800303e:	6019      	str	r1, [r3, #0]
 8003040:	d1de      	bne.n	8003000 <_free_r+0x24>
 8003042:	6810      	ldr	r0, [r2, #0]
 8003044:	6852      	ldr	r2, [r2, #4]
 8003046:	4401      	add	r1, r0
 8003048:	6019      	str	r1, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	e7d8      	b.n	8003000 <_free_r+0x24>
 800304e:	d902      	bls.n	8003056 <_free_r+0x7a>
 8003050:	230c      	movs	r3, #12
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	e7d4      	b.n	8003000 <_free_r+0x24>
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	1821      	adds	r1, r4, r0
 800305a:	428a      	cmp	r2, r1
 800305c:	bf01      	itttt	eq
 800305e:	6811      	ldreq	r1, [r2, #0]
 8003060:	6852      	ldreq	r2, [r2, #4]
 8003062:	1809      	addeq	r1, r1, r0
 8003064:	6021      	streq	r1, [r4, #0]
 8003066:	6062      	str	r2, [r4, #4]
 8003068:	605c      	str	r4, [r3, #4]
 800306a:	e7c9      	b.n	8003000 <_free_r+0x24>
 800306c:	bd38      	pop	{r3, r4, r5, pc}
 800306e:	bf00      	nop
 8003070:	200000b4 	.word	0x200000b4

08003074 <_malloc_r>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	1ccd      	adds	r5, r1, #3
 8003078:	f025 0503 	bic.w	r5, r5, #3
 800307c:	3508      	adds	r5, #8
 800307e:	2d0c      	cmp	r5, #12
 8003080:	bf38      	it	cc
 8003082:	250c      	movcc	r5, #12
 8003084:	2d00      	cmp	r5, #0
 8003086:	4606      	mov	r6, r0
 8003088:	db01      	blt.n	800308e <_malloc_r+0x1a>
 800308a:	42a9      	cmp	r1, r5
 800308c:	d903      	bls.n	8003096 <_malloc_r+0x22>
 800308e:	230c      	movs	r3, #12
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	2000      	movs	r0, #0
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	f000 f877 	bl	8003188 <__malloc_lock>
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <_malloc_r+0xac>)
 800309c:	6814      	ldr	r4, [r2, #0]
 800309e:	4621      	mov	r1, r4
 80030a0:	b991      	cbnz	r1, 80030c8 <_malloc_r+0x54>
 80030a2:	4c20      	ldr	r4, [pc, #128]	; (8003124 <_malloc_r+0xb0>)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	b91b      	cbnz	r3, 80030b0 <_malloc_r+0x3c>
 80030a8:	4630      	mov	r0, r6
 80030aa:	f000 f83d 	bl	8003128 <_sbrk_r>
 80030ae:	6020      	str	r0, [r4, #0]
 80030b0:	4629      	mov	r1, r5
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 f838 	bl	8003128 <_sbrk_r>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d124      	bne.n	8003106 <_malloc_r+0x92>
 80030bc:	230c      	movs	r3, #12
 80030be:	4630      	mov	r0, r6
 80030c0:	6033      	str	r3, [r6, #0]
 80030c2:	f000 f862 	bl	800318a <__malloc_unlock>
 80030c6:	e7e4      	b.n	8003092 <_malloc_r+0x1e>
 80030c8:	680b      	ldr	r3, [r1, #0]
 80030ca:	1b5b      	subs	r3, r3, r5
 80030cc:	d418      	bmi.n	8003100 <_malloc_r+0x8c>
 80030ce:	2b0b      	cmp	r3, #11
 80030d0:	d90f      	bls.n	80030f2 <_malloc_r+0x7e>
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	18cc      	adds	r4, r1, r3
 80030d6:	50cd      	str	r5, [r1, r3]
 80030d8:	4630      	mov	r0, r6
 80030da:	f000 f856 	bl	800318a <__malloc_unlock>
 80030de:	f104 000b 	add.w	r0, r4, #11
 80030e2:	1d23      	adds	r3, r4, #4
 80030e4:	f020 0007 	bic.w	r0, r0, #7
 80030e8:	1ac3      	subs	r3, r0, r3
 80030ea:	d0d3      	beq.n	8003094 <_malloc_r+0x20>
 80030ec:	425a      	negs	r2, r3
 80030ee:	50e2      	str	r2, [r4, r3]
 80030f0:	e7d0      	b.n	8003094 <_malloc_r+0x20>
 80030f2:	684b      	ldr	r3, [r1, #4]
 80030f4:	428c      	cmp	r4, r1
 80030f6:	bf16      	itet	ne
 80030f8:	6063      	strne	r3, [r4, #4]
 80030fa:	6013      	streq	r3, [r2, #0]
 80030fc:	460c      	movne	r4, r1
 80030fe:	e7eb      	b.n	80030d8 <_malloc_r+0x64>
 8003100:	460c      	mov	r4, r1
 8003102:	6849      	ldr	r1, [r1, #4]
 8003104:	e7cc      	b.n	80030a0 <_malloc_r+0x2c>
 8003106:	1cc4      	adds	r4, r0, #3
 8003108:	f024 0403 	bic.w	r4, r4, #3
 800310c:	42a0      	cmp	r0, r4
 800310e:	d005      	beq.n	800311c <_malloc_r+0xa8>
 8003110:	1a21      	subs	r1, r4, r0
 8003112:	4630      	mov	r0, r6
 8003114:	f000 f808 	bl	8003128 <_sbrk_r>
 8003118:	3001      	adds	r0, #1
 800311a:	d0cf      	beq.n	80030bc <_malloc_r+0x48>
 800311c:	6025      	str	r5, [r4, #0]
 800311e:	e7db      	b.n	80030d8 <_malloc_r+0x64>
 8003120:	200000b4 	.word	0x200000b4
 8003124:	200000b8 	.word	0x200000b8

08003128 <_sbrk_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	2300      	movs	r3, #0
 800312c:	4c05      	ldr	r4, [pc, #20]	; (8003144 <_sbrk_r+0x1c>)
 800312e:	4605      	mov	r5, r0
 8003130:	4608      	mov	r0, r1
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	f7ff fe92 	bl	8002e5c <_sbrk>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d102      	bne.n	8003142 <_sbrk_r+0x1a>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	b103      	cbz	r3, 8003142 <_sbrk_r+0x1a>
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	20000118 	.word	0x20000118

08003148 <siprintf>:
 8003148:	b40e      	push	{r1, r2, r3}
 800314a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800314e:	b500      	push	{lr}
 8003150:	b09c      	sub	sp, #112	; 0x70
 8003152:	ab1d      	add	r3, sp, #116	; 0x74
 8003154:	9002      	str	r0, [sp, #8]
 8003156:	9006      	str	r0, [sp, #24]
 8003158:	9107      	str	r1, [sp, #28]
 800315a:	9104      	str	r1, [sp, #16]
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <siprintf+0x38>)
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <siprintf+0x3c>)
 8003160:	f853 2b04 	ldr.w	r2, [r3], #4
 8003164:	9105      	str	r1, [sp, #20]
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	a902      	add	r1, sp, #8
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	f000 f868 	bl	8003240 <_svfiprintf_r>
 8003170:	2200      	movs	r2, #0
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	b01c      	add	sp, #112	; 0x70
 8003178:	f85d eb04 	ldr.w	lr, [sp], #4
 800317c:	b003      	add	sp, #12
 800317e:	4770      	bx	lr
 8003180:	20000020 	.word	0x20000020
 8003184:	ffff0208 	.word	0xffff0208

08003188 <__malloc_lock>:
 8003188:	4770      	bx	lr

0800318a <__malloc_unlock>:
 800318a:	4770      	bx	lr

0800318c <__ssputs_r>:
 800318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	688e      	ldr	r6, [r1, #8]
 8003192:	4682      	mov	sl, r0
 8003194:	429e      	cmp	r6, r3
 8003196:	460c      	mov	r4, r1
 8003198:	4690      	mov	r8, r2
 800319a:	4699      	mov	r9, r3
 800319c:	d837      	bhi.n	800320e <__ssputs_r+0x82>
 800319e:	898a      	ldrh	r2, [r1, #12]
 80031a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031a4:	d031      	beq.n	800320a <__ssputs_r+0x7e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	6825      	ldr	r5, [r4, #0]
 80031aa:	6909      	ldr	r1, [r1, #16]
 80031ac:	1a6f      	subs	r7, r5, r1
 80031ae:	6965      	ldr	r5, [r4, #20]
 80031b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80031b8:	f109 0301 	add.w	r3, r9, #1
 80031bc:	443b      	add	r3, r7
 80031be:	429d      	cmp	r5, r3
 80031c0:	bf38      	it	cc
 80031c2:	461d      	movcc	r5, r3
 80031c4:	0553      	lsls	r3, r2, #21
 80031c6:	d530      	bpl.n	800322a <__ssputs_r+0x9e>
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7ff ff53 	bl	8003074 <_malloc_r>
 80031ce:	4606      	mov	r6, r0
 80031d0:	b950      	cbnz	r0, 80031e8 <__ssputs_r+0x5c>
 80031d2:	230c      	movs	r3, #12
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f8ca 3000 	str.w	r3, [sl]
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e2:	81a3      	strh	r3, [r4, #12]
 80031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e8:	463a      	mov	r2, r7
 80031ea:	6921      	ldr	r1, [r4, #16]
 80031ec:	f000 fab6 	bl	800375c <memcpy>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	6126      	str	r6, [r4, #16]
 80031fe:	443e      	add	r6, r7
 8003200:	6026      	str	r6, [r4, #0]
 8003202:	464e      	mov	r6, r9
 8003204:	6165      	str	r5, [r4, #20]
 8003206:	1bed      	subs	r5, r5, r7
 8003208:	60a5      	str	r5, [r4, #8]
 800320a:	454e      	cmp	r6, r9
 800320c:	d900      	bls.n	8003210 <__ssputs_r+0x84>
 800320e:	464e      	mov	r6, r9
 8003210:	4632      	mov	r2, r6
 8003212:	4641      	mov	r1, r8
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	f000 faac 	bl	8003772 <memmove>
 800321a:	68a3      	ldr	r3, [r4, #8]
 800321c:	2000      	movs	r0, #0
 800321e:	1b9b      	subs	r3, r3, r6
 8003220:	60a3      	str	r3, [r4, #8]
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	441e      	add	r6, r3
 8003226:	6026      	str	r6, [r4, #0]
 8003228:	e7dc      	b.n	80031e4 <__ssputs_r+0x58>
 800322a:	462a      	mov	r2, r5
 800322c:	f000 faba 	bl	80037a4 <_realloc_r>
 8003230:	4606      	mov	r6, r0
 8003232:	2800      	cmp	r0, #0
 8003234:	d1e2      	bne.n	80031fc <__ssputs_r+0x70>
 8003236:	6921      	ldr	r1, [r4, #16]
 8003238:	4650      	mov	r0, sl
 800323a:	f7ff fecf 	bl	8002fdc <_free_r>
 800323e:	e7c8      	b.n	80031d2 <__ssputs_r+0x46>

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	461d      	mov	r5, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	b09d      	sub	sp, #116	; 0x74
 800324a:	061f      	lsls	r7, r3, #24
 800324c:	4680      	mov	r8, r0
 800324e:	460c      	mov	r4, r1
 8003250:	4616      	mov	r6, r2
 8003252:	d50f      	bpl.n	8003274 <_svfiprintf_r+0x34>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b96b      	cbnz	r3, 8003274 <_svfiprintf_r+0x34>
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	f7ff ff0b 	bl	8003074 <_malloc_r>
 800325e:	6020      	str	r0, [r4, #0]
 8003260:	6120      	str	r0, [r4, #16]
 8003262:	b928      	cbnz	r0, 8003270 <_svfiprintf_r+0x30>
 8003264:	230c      	movs	r3, #12
 8003266:	f8c8 3000 	str.w	r3, [r8]
 800326a:	f04f 30ff 	mov.w	r0, #4294967295
 800326e:	e0c8      	b.n	8003402 <_svfiprintf_r+0x1c2>
 8003270:	2340      	movs	r3, #64	; 0x40
 8003272:	6163      	str	r3, [r4, #20]
 8003274:	2300      	movs	r3, #0
 8003276:	9309      	str	r3, [sp, #36]	; 0x24
 8003278:	2320      	movs	r3, #32
 800327a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800327e:	2330      	movs	r3, #48	; 0x30
 8003280:	f04f 0b01 	mov.w	fp, #1
 8003284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003288:	9503      	str	r5, [sp, #12]
 800328a:	4637      	mov	r7, r6
 800328c:	463d      	mov	r5, r7
 800328e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003292:	b10b      	cbz	r3, 8003298 <_svfiprintf_r+0x58>
 8003294:	2b25      	cmp	r3, #37	; 0x25
 8003296:	d13e      	bne.n	8003316 <_svfiprintf_r+0xd6>
 8003298:	ebb7 0a06 	subs.w	sl, r7, r6
 800329c:	d00b      	beq.n	80032b6 <_svfiprintf_r+0x76>
 800329e:	4653      	mov	r3, sl
 80032a0:	4632      	mov	r2, r6
 80032a2:	4621      	mov	r1, r4
 80032a4:	4640      	mov	r0, r8
 80032a6:	f7ff ff71 	bl	800318c <__ssputs_r>
 80032aa:	3001      	adds	r0, #1
 80032ac:	f000 80a4 	beq.w	80033f8 <_svfiprintf_r+0x1b8>
 80032b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b2:	4453      	add	r3, sl
 80032b4:	9309      	str	r3, [sp, #36]	; 0x24
 80032b6:	783b      	ldrb	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 809d 	beq.w	80033f8 <_svfiprintf_r+0x1b8>
 80032be:	2300      	movs	r3, #0
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	9307      	str	r3, [sp, #28]
 80032cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032d0:	931a      	str	r3, [sp, #104]	; 0x68
 80032d2:	462f      	mov	r7, r5
 80032d4:	2205      	movs	r2, #5
 80032d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032da:	4850      	ldr	r0, [pc, #320]	; (800341c <_svfiprintf_r+0x1dc>)
 80032dc:	f000 fa30 	bl	8003740 <memchr>
 80032e0:	9b04      	ldr	r3, [sp, #16]
 80032e2:	b9d0      	cbnz	r0, 800331a <_svfiprintf_r+0xda>
 80032e4:	06d9      	lsls	r1, r3, #27
 80032e6:	bf44      	itt	mi
 80032e8:	2220      	movmi	r2, #32
 80032ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ee:	071a      	lsls	r2, r3, #28
 80032f0:	bf44      	itt	mi
 80032f2:	222b      	movmi	r2, #43	; 0x2b
 80032f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032f8:	782a      	ldrb	r2, [r5, #0]
 80032fa:	2a2a      	cmp	r2, #42	; 0x2a
 80032fc:	d015      	beq.n	800332a <_svfiprintf_r+0xea>
 80032fe:	462f      	mov	r7, r5
 8003300:	2000      	movs	r0, #0
 8003302:	250a      	movs	r5, #10
 8003304:	9a07      	ldr	r2, [sp, #28]
 8003306:	4639      	mov	r1, r7
 8003308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330c:	3b30      	subs	r3, #48	; 0x30
 800330e:	2b09      	cmp	r3, #9
 8003310:	d94d      	bls.n	80033ae <_svfiprintf_r+0x16e>
 8003312:	b1b8      	cbz	r0, 8003344 <_svfiprintf_r+0x104>
 8003314:	e00f      	b.n	8003336 <_svfiprintf_r+0xf6>
 8003316:	462f      	mov	r7, r5
 8003318:	e7b8      	b.n	800328c <_svfiprintf_r+0x4c>
 800331a:	4a40      	ldr	r2, [pc, #256]	; (800341c <_svfiprintf_r+0x1dc>)
 800331c:	463d      	mov	r5, r7
 800331e:	1a80      	subs	r0, r0, r2
 8003320:	fa0b f000 	lsl.w	r0, fp, r0
 8003324:	4318      	orrs	r0, r3
 8003326:	9004      	str	r0, [sp, #16]
 8003328:	e7d3      	b.n	80032d2 <_svfiprintf_r+0x92>
 800332a:	9a03      	ldr	r2, [sp, #12]
 800332c:	1d11      	adds	r1, r2, #4
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	9103      	str	r1, [sp, #12]
 8003332:	2a00      	cmp	r2, #0
 8003334:	db01      	blt.n	800333a <_svfiprintf_r+0xfa>
 8003336:	9207      	str	r2, [sp, #28]
 8003338:	e004      	b.n	8003344 <_svfiprintf_r+0x104>
 800333a:	4252      	negs	r2, r2
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	9207      	str	r2, [sp, #28]
 8003342:	9304      	str	r3, [sp, #16]
 8003344:	783b      	ldrb	r3, [r7, #0]
 8003346:	2b2e      	cmp	r3, #46	; 0x2e
 8003348:	d10c      	bne.n	8003364 <_svfiprintf_r+0x124>
 800334a:	787b      	ldrb	r3, [r7, #1]
 800334c:	2b2a      	cmp	r3, #42	; 0x2a
 800334e:	d133      	bne.n	80033b8 <_svfiprintf_r+0x178>
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	3702      	adds	r7, #2
 8003354:	1d1a      	adds	r2, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003362:	9305      	str	r3, [sp, #20]
 8003364:	4d2e      	ldr	r5, [pc, #184]	; (8003420 <_svfiprintf_r+0x1e0>)
 8003366:	2203      	movs	r2, #3
 8003368:	7839      	ldrb	r1, [r7, #0]
 800336a:	4628      	mov	r0, r5
 800336c:	f000 f9e8 	bl	8003740 <memchr>
 8003370:	b138      	cbz	r0, 8003382 <_svfiprintf_r+0x142>
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	1b40      	subs	r0, r0, r5
 8003376:	fa03 f000 	lsl.w	r0, r3, r0
 800337a:	9b04      	ldr	r3, [sp, #16]
 800337c:	3701      	adds	r7, #1
 800337e:	4303      	orrs	r3, r0
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	7839      	ldrb	r1, [r7, #0]
 8003384:	2206      	movs	r2, #6
 8003386:	4827      	ldr	r0, [pc, #156]	; (8003424 <_svfiprintf_r+0x1e4>)
 8003388:	1c7e      	adds	r6, r7, #1
 800338a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800338e:	f000 f9d7 	bl	8003740 <memchr>
 8003392:	2800      	cmp	r0, #0
 8003394:	d038      	beq.n	8003408 <_svfiprintf_r+0x1c8>
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <_svfiprintf_r+0x1e8>)
 8003398:	bb13      	cbnz	r3, 80033e0 <_svfiprintf_r+0x1a0>
 800339a:	9b03      	ldr	r3, [sp, #12]
 800339c:	3307      	adds	r3, #7
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	3308      	adds	r3, #8
 80033a4:	9303      	str	r3, [sp, #12]
 80033a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a8:	444b      	add	r3, r9
 80033aa:	9309      	str	r3, [sp, #36]	; 0x24
 80033ac:	e76d      	b.n	800328a <_svfiprintf_r+0x4a>
 80033ae:	fb05 3202 	mla	r2, r5, r2, r3
 80033b2:	2001      	movs	r0, #1
 80033b4:	460f      	mov	r7, r1
 80033b6:	e7a6      	b.n	8003306 <_svfiprintf_r+0xc6>
 80033b8:	2300      	movs	r3, #0
 80033ba:	250a      	movs	r5, #10
 80033bc:	4619      	mov	r1, r3
 80033be:	3701      	adds	r7, #1
 80033c0:	9305      	str	r3, [sp, #20]
 80033c2:	4638      	mov	r0, r7
 80033c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c8:	3a30      	subs	r2, #48	; 0x30
 80033ca:	2a09      	cmp	r2, #9
 80033cc:	d903      	bls.n	80033d6 <_svfiprintf_r+0x196>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c8      	beq.n	8003364 <_svfiprintf_r+0x124>
 80033d2:	9105      	str	r1, [sp, #20]
 80033d4:	e7c6      	b.n	8003364 <_svfiprintf_r+0x124>
 80033d6:	fb05 2101 	mla	r1, r5, r1, r2
 80033da:	2301      	movs	r3, #1
 80033dc:	4607      	mov	r7, r0
 80033de:	e7f0      	b.n	80033c2 <_svfiprintf_r+0x182>
 80033e0:	ab03      	add	r3, sp, #12
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4622      	mov	r2, r4
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <_svfiprintf_r+0x1ec>)
 80033e8:	a904      	add	r1, sp, #16
 80033ea:	4640      	mov	r0, r8
 80033ec:	f3af 8000 	nop.w
 80033f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033f4:	4681      	mov	r9, r0
 80033f6:	d1d6      	bne.n	80033a6 <_svfiprintf_r+0x166>
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	065b      	lsls	r3, r3, #25
 80033fc:	f53f af35 	bmi.w	800326a <_svfiprintf_r+0x2a>
 8003400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003402:	b01d      	add	sp, #116	; 0x74
 8003404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003408:	ab03      	add	r3, sp, #12
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4622      	mov	r2, r4
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <_svfiprintf_r+0x1ec>)
 8003410:	a904      	add	r1, sp, #16
 8003412:	4640      	mov	r0, r8
 8003414:	f000 f882 	bl	800351c <_printf_i>
 8003418:	e7ea      	b.n	80033f0 <_svfiprintf_r+0x1b0>
 800341a:	bf00      	nop
 800341c:	08006478 	.word	0x08006478
 8003420:	0800647e 	.word	0x0800647e
 8003424:	08006482 	.word	0x08006482
 8003428:	00000000 	.word	0x00000000
 800342c:	0800318d 	.word	0x0800318d

08003430 <_printf_common>:
 8003430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	4691      	mov	r9, r2
 8003436:	461f      	mov	r7, r3
 8003438:	688a      	ldr	r2, [r1, #8]
 800343a:	690b      	ldr	r3, [r1, #16]
 800343c:	4606      	mov	r6, r0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfb8      	it	lt
 8003442:	4613      	movlt	r3, r2
 8003444:	f8c9 3000 	str.w	r3, [r9]
 8003448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344c:	460c      	mov	r4, r1
 800344e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003452:	b112      	cbz	r2, 800345a <_printf_common+0x2a>
 8003454:	3301      	adds	r3, #1
 8003456:	f8c9 3000 	str.w	r3, [r9]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0699      	lsls	r1, r3, #26
 800345e:	bf42      	ittt	mi
 8003460:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003464:	3302      	addmi	r3, #2
 8003466:	f8c9 3000 	strmi.w	r3, [r9]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d107      	bne.n	8003482 <_printf_common+0x52>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	f8d9 2000 	ldr.w	r2, [r9]
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	42ab      	cmp	r3, r5
 8003480:	dc29      	bgt.n	80034d6 <_printf_common+0xa6>
 8003482:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	3300      	adds	r3, #0
 800348a:	bf18      	it	ne
 800348c:	2301      	movne	r3, #1
 800348e:	0692      	lsls	r2, r2, #26
 8003490:	d42e      	bmi.n	80034f0 <_printf_common+0xc0>
 8003492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003496:	4639      	mov	r1, r7
 8003498:	4630      	mov	r0, r6
 800349a:	47c0      	blx	r8
 800349c:	3001      	adds	r0, #1
 800349e:	d021      	beq.n	80034e4 <_printf_common+0xb4>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	68e5      	ldr	r5, [r4, #12]
 80034a4:	f003 0306 	and.w	r3, r3, #6
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	bf18      	it	ne
 80034ac:	2500      	movne	r5, #0
 80034ae:	f8d9 2000 	ldr.w	r2, [r9]
 80034b2:	f04f 0900 	mov.w	r9, #0
 80034b6:	bf08      	it	eq
 80034b8:	1aad      	subeq	r5, r5, r2
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	6922      	ldr	r2, [r4, #16]
 80034be:	bf08      	it	eq
 80034c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bfc4      	itt	gt
 80034c8:	1a9b      	subgt	r3, r3, r2
 80034ca:	18ed      	addgt	r5, r5, r3
 80034cc:	341a      	adds	r4, #26
 80034ce:	454d      	cmp	r5, r9
 80034d0:	d11a      	bne.n	8003508 <_printf_common+0xd8>
 80034d2:	2000      	movs	r0, #0
 80034d4:	e008      	b.n	80034e8 <_printf_common+0xb8>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4652      	mov	r2, sl
 80034da:	4639      	mov	r1, r7
 80034dc:	4630      	mov	r0, r6
 80034de:	47c0      	blx	r8
 80034e0:	3001      	adds	r0, #1
 80034e2:	d103      	bne.n	80034ec <_printf_common+0xbc>
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ec:	3501      	adds	r5, #1
 80034ee:	e7c2      	b.n	8003476 <_printf_common+0x46>
 80034f0:	2030      	movs	r0, #48	; 0x30
 80034f2:	18e1      	adds	r1, r4, r3
 80034f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034fe:	4422      	add	r2, r4
 8003500:	3302      	adds	r3, #2
 8003502:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003506:	e7c4      	b.n	8003492 <_printf_common+0x62>
 8003508:	2301      	movs	r3, #1
 800350a:	4622      	mov	r2, r4
 800350c:	4639      	mov	r1, r7
 800350e:	4630      	mov	r0, r6
 8003510:	47c0      	blx	r8
 8003512:	3001      	adds	r0, #1
 8003514:	d0e6      	beq.n	80034e4 <_printf_common+0xb4>
 8003516:	f109 0901 	add.w	r9, r9, #1
 800351a:	e7d8      	b.n	80034ce <_printf_common+0x9e>

0800351c <_printf_i>:
 800351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003520:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003524:	460c      	mov	r4, r1
 8003526:	7e09      	ldrb	r1, [r1, #24]
 8003528:	b085      	sub	sp, #20
 800352a:	296e      	cmp	r1, #110	; 0x6e
 800352c:	4617      	mov	r7, r2
 800352e:	4606      	mov	r6, r0
 8003530:	4698      	mov	r8, r3
 8003532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003534:	f000 80b3 	beq.w	800369e <_printf_i+0x182>
 8003538:	d822      	bhi.n	8003580 <_printf_i+0x64>
 800353a:	2963      	cmp	r1, #99	; 0x63
 800353c:	d036      	beq.n	80035ac <_printf_i+0x90>
 800353e:	d80a      	bhi.n	8003556 <_printf_i+0x3a>
 8003540:	2900      	cmp	r1, #0
 8003542:	f000 80b9 	beq.w	80036b8 <_printf_i+0x19c>
 8003546:	2958      	cmp	r1, #88	; 0x58
 8003548:	f000 8083 	beq.w	8003652 <_printf_i+0x136>
 800354c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003550:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003554:	e032      	b.n	80035bc <_printf_i+0xa0>
 8003556:	2964      	cmp	r1, #100	; 0x64
 8003558:	d001      	beq.n	800355e <_printf_i+0x42>
 800355a:	2969      	cmp	r1, #105	; 0x69
 800355c:	d1f6      	bne.n	800354c <_printf_i+0x30>
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	0605      	lsls	r5, r0, #24
 8003564:	f103 0104 	add.w	r1, r3, #4
 8003568:	d52a      	bpl.n	80035c0 <_printf_i+0xa4>
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da03      	bge.n	800357a <_printf_i+0x5e>
 8003572:	222d      	movs	r2, #45	; 0x2d
 8003574:	425b      	negs	r3, r3
 8003576:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800357a:	486f      	ldr	r0, [pc, #444]	; (8003738 <_printf_i+0x21c>)
 800357c:	220a      	movs	r2, #10
 800357e:	e039      	b.n	80035f4 <_printf_i+0xd8>
 8003580:	2973      	cmp	r1, #115	; 0x73
 8003582:	f000 809d 	beq.w	80036c0 <_printf_i+0x1a4>
 8003586:	d808      	bhi.n	800359a <_printf_i+0x7e>
 8003588:	296f      	cmp	r1, #111	; 0x6f
 800358a:	d020      	beq.n	80035ce <_printf_i+0xb2>
 800358c:	2970      	cmp	r1, #112	; 0x70
 800358e:	d1dd      	bne.n	800354c <_printf_i+0x30>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	f043 0320 	orr.w	r3, r3, #32
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	e003      	b.n	80035a2 <_printf_i+0x86>
 800359a:	2975      	cmp	r1, #117	; 0x75
 800359c:	d017      	beq.n	80035ce <_printf_i+0xb2>
 800359e:	2978      	cmp	r1, #120	; 0x78
 80035a0:	d1d4      	bne.n	800354c <_printf_i+0x30>
 80035a2:	2378      	movs	r3, #120	; 0x78
 80035a4:	4865      	ldr	r0, [pc, #404]	; (800373c <_printf_i+0x220>)
 80035a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035aa:	e055      	b.n	8003658 <_printf_i+0x13c>
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b2:	1d19      	adds	r1, r3, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6011      	str	r1, [r2, #0]
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e08c      	b.n	80036da <_printf_i+0x1be>
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035c6:	6011      	str	r1, [r2, #0]
 80035c8:	bf18      	it	ne
 80035ca:	b21b      	sxthne	r3, r3
 80035cc:	e7cf      	b.n	800356e <_printf_i+0x52>
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	6825      	ldr	r5, [r4, #0]
 80035d2:	1d18      	adds	r0, r3, #4
 80035d4:	6010      	str	r0, [r2, #0]
 80035d6:	0628      	lsls	r0, r5, #24
 80035d8:	d501      	bpl.n	80035de <_printf_i+0xc2>
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	e002      	b.n	80035e4 <_printf_i+0xc8>
 80035de:	0668      	lsls	r0, r5, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0xbe>
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	296f      	cmp	r1, #111	; 0x6f
 80035e6:	bf14      	ite	ne
 80035e8:	220a      	movne	r2, #10
 80035ea:	2208      	moveq	r2, #8
 80035ec:	4852      	ldr	r0, [pc, #328]	; (8003738 <_printf_i+0x21c>)
 80035ee:	2100      	movs	r1, #0
 80035f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035f4:	6865      	ldr	r5, [r4, #4]
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	60a5      	str	r5, [r4, #8]
 80035fa:	f2c0 8095 	blt.w	8003728 <_printf_i+0x20c>
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	f021 0104 	bic.w	r1, r1, #4
 8003604:	6021      	str	r1, [r4, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d13d      	bne.n	8003686 <_printf_i+0x16a>
 800360a:	2d00      	cmp	r5, #0
 800360c:	f040 808e 	bne.w	800372c <_printf_i+0x210>
 8003610:	4665      	mov	r5, ip
 8003612:	2a08      	cmp	r2, #8
 8003614:	d10b      	bne.n	800362e <_printf_i+0x112>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	07db      	lsls	r3, r3, #31
 800361a:	d508      	bpl.n	800362e <_printf_i+0x112>
 800361c:	6923      	ldr	r3, [r4, #16]
 800361e:	6862      	ldr	r2, [r4, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	bfde      	ittt	le
 8003624:	2330      	movle	r3, #48	; 0x30
 8003626:	f805 3c01 	strble.w	r3, [r5, #-1]
 800362a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800362e:	ebac 0305 	sub.w	r3, ip, r5
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	f8cd 8000 	str.w	r8, [sp]
 8003638:	463b      	mov	r3, r7
 800363a:	aa03      	add	r2, sp, #12
 800363c:	4621      	mov	r1, r4
 800363e:	4630      	mov	r0, r6
 8003640:	f7ff fef6 	bl	8003430 <_printf_common>
 8003644:	3001      	adds	r0, #1
 8003646:	d14d      	bne.n	80036e4 <_printf_i+0x1c8>
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	b005      	add	sp, #20
 800364e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003652:	4839      	ldr	r0, [pc, #228]	; (8003738 <_printf_i+0x21c>)
 8003654:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	6821      	ldr	r1, [r4, #0]
 800365c:	1d1d      	adds	r5, r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6015      	str	r5, [r2, #0]
 8003662:	060a      	lsls	r2, r1, #24
 8003664:	d50b      	bpl.n	800367e <_printf_i+0x162>
 8003666:	07ca      	lsls	r2, r1, #31
 8003668:	bf44      	itt	mi
 800366a:	f041 0120 	orrmi.w	r1, r1, #32
 800366e:	6021      	strmi	r1, [r4, #0]
 8003670:	b91b      	cbnz	r3, 800367a <_printf_i+0x15e>
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	f022 0220 	bic.w	r2, r2, #32
 8003678:	6022      	str	r2, [r4, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	e7b7      	b.n	80035ee <_printf_i+0xd2>
 800367e:	064d      	lsls	r5, r1, #25
 8003680:	bf48      	it	mi
 8003682:	b29b      	uxthmi	r3, r3
 8003684:	e7ef      	b.n	8003666 <_printf_i+0x14a>
 8003686:	4665      	mov	r5, ip
 8003688:	fbb3 f1f2 	udiv	r1, r3, r2
 800368c:	fb02 3311 	mls	r3, r2, r1, r3
 8003690:	5cc3      	ldrb	r3, [r0, r3]
 8003692:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003696:	460b      	mov	r3, r1
 8003698:	2900      	cmp	r1, #0
 800369a:	d1f5      	bne.n	8003688 <_printf_i+0x16c>
 800369c:	e7b9      	b.n	8003612 <_printf_i+0xf6>
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	1d18      	adds	r0, r3, #4
 80036a4:	6961      	ldr	r1, [r4, #20]
 80036a6:	6010      	str	r0, [r2, #0]
 80036a8:	0628      	lsls	r0, r5, #24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0x196>
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <_printf_i+0x19c>
 80036b2:	066a      	lsls	r2, r5, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0x192>
 80036b6:	8019      	strh	r1, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	4665      	mov	r5, ip
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	e7b9      	b.n	8003634 <_printf_i+0x118>
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	1d19      	adds	r1, r3, #4
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	681d      	ldr	r5, [r3, #0]
 80036c8:	6862      	ldr	r2, [r4, #4]
 80036ca:	2100      	movs	r1, #0
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 f837 	bl	8003740 <memchr>
 80036d2:	b108      	cbz	r0, 80036d8 <_printf_i+0x1bc>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	6060      	str	r0, [r4, #4]
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036e2:	e7a7      	b.n	8003634 <_printf_i+0x118>
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	462a      	mov	r2, r5
 80036e8:	4639      	mov	r1, r7
 80036ea:	4630      	mov	r0, r6
 80036ec:	47c0      	blx	r8
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0aa      	beq.n	8003648 <_printf_i+0x12c>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	079b      	lsls	r3, r3, #30
 80036f6:	d413      	bmi.n	8003720 <_printf_i+0x204>
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	4298      	cmp	r0, r3
 80036fe:	bfb8      	it	lt
 8003700:	4618      	movlt	r0, r3
 8003702:	e7a3      	b.n	800364c <_printf_i+0x130>
 8003704:	2301      	movs	r3, #1
 8003706:	464a      	mov	r2, r9
 8003708:	4639      	mov	r1, r7
 800370a:	4630      	mov	r0, r6
 800370c:	47c0      	blx	r8
 800370e:	3001      	adds	r0, #1
 8003710:	d09a      	beq.n	8003648 <_printf_i+0x12c>
 8003712:	3501      	adds	r5, #1
 8003714:	68e3      	ldr	r3, [r4, #12]
 8003716:	9a03      	ldr	r2, [sp, #12]
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	42ab      	cmp	r3, r5
 800371c:	dcf2      	bgt.n	8003704 <_printf_i+0x1e8>
 800371e:	e7eb      	b.n	80036f8 <_printf_i+0x1dc>
 8003720:	2500      	movs	r5, #0
 8003722:	f104 0919 	add.w	r9, r4, #25
 8003726:	e7f5      	b.n	8003714 <_printf_i+0x1f8>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ac      	bne.n	8003686 <_printf_i+0x16a>
 800372c:	7803      	ldrb	r3, [r0, #0]
 800372e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003736:	e76c      	b.n	8003612 <_printf_i+0xf6>
 8003738:	08006489 	.word	0x08006489
 800373c:	0800649a 	.word	0x0800649a

08003740 <memchr>:
 8003740:	b510      	push	{r4, lr}
 8003742:	b2c9      	uxtb	r1, r1
 8003744:	4402      	add	r2, r0
 8003746:	4290      	cmp	r0, r2
 8003748:	4603      	mov	r3, r0
 800374a:	d101      	bne.n	8003750 <memchr+0x10>
 800374c:	2300      	movs	r3, #0
 800374e:	e003      	b.n	8003758 <memchr+0x18>
 8003750:	781c      	ldrb	r4, [r3, #0]
 8003752:	3001      	adds	r0, #1
 8003754:	428c      	cmp	r4, r1
 8003756:	d1f6      	bne.n	8003746 <memchr+0x6>
 8003758:	4618      	mov	r0, r3
 800375a:	bd10      	pop	{r4, pc}

0800375c <memcpy>:
 800375c:	b510      	push	{r4, lr}
 800375e:	1e43      	subs	r3, r0, #1
 8003760:	440a      	add	r2, r1
 8003762:	4291      	cmp	r1, r2
 8003764:	d100      	bne.n	8003768 <memcpy+0xc>
 8003766:	bd10      	pop	{r4, pc}
 8003768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800376c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003770:	e7f7      	b.n	8003762 <memcpy+0x6>

08003772 <memmove>:
 8003772:	4288      	cmp	r0, r1
 8003774:	b510      	push	{r4, lr}
 8003776:	eb01 0302 	add.w	r3, r1, r2
 800377a:	d807      	bhi.n	800378c <memmove+0x1a>
 800377c:	1e42      	subs	r2, r0, #1
 800377e:	4299      	cmp	r1, r3
 8003780:	d00a      	beq.n	8003798 <memmove+0x26>
 8003782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003786:	f802 4f01 	strb.w	r4, [r2, #1]!
 800378a:	e7f8      	b.n	800377e <memmove+0xc>
 800378c:	4283      	cmp	r3, r0
 800378e:	d9f5      	bls.n	800377c <memmove+0xa>
 8003790:	1881      	adds	r1, r0, r2
 8003792:	1ad2      	subs	r2, r2, r3
 8003794:	42d3      	cmn	r3, r2
 8003796:	d100      	bne.n	800379a <memmove+0x28>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800379e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037a2:	e7f7      	b.n	8003794 <memmove+0x22>

080037a4 <_realloc_r>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	4607      	mov	r7, r0
 80037a8:	4614      	mov	r4, r2
 80037aa:	460e      	mov	r6, r1
 80037ac:	b921      	cbnz	r1, 80037b8 <_realloc_r+0x14>
 80037ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037b2:	4611      	mov	r1, r2
 80037b4:	f7ff bc5e 	b.w	8003074 <_malloc_r>
 80037b8:	b922      	cbnz	r2, 80037c4 <_realloc_r+0x20>
 80037ba:	f7ff fc0f 	bl	8002fdc <_free_r>
 80037be:	4625      	mov	r5, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	f000 f814 	bl	80037f0 <_malloc_usable_size_r>
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d20f      	bcs.n	80037ec <_realloc_r+0x48>
 80037cc:	4621      	mov	r1, r4
 80037ce:	4638      	mov	r0, r7
 80037d0:	f7ff fc50 	bl	8003074 <_malloc_r>
 80037d4:	4605      	mov	r5, r0
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d0f2      	beq.n	80037c0 <_realloc_r+0x1c>
 80037da:	4631      	mov	r1, r6
 80037dc:	4622      	mov	r2, r4
 80037de:	f7ff ffbd 	bl	800375c <memcpy>
 80037e2:	4631      	mov	r1, r6
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff fbf9 	bl	8002fdc <_free_r>
 80037ea:	e7e9      	b.n	80037c0 <_realloc_r+0x1c>
 80037ec:	4635      	mov	r5, r6
 80037ee:	e7e7      	b.n	80037c0 <_realloc_r+0x1c>

080037f0 <_malloc_usable_size_r>:
 80037f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f4:	1f18      	subs	r0, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bfbc      	itt	lt
 80037fa:	580b      	ldrlt	r3, [r1, r0]
 80037fc:	18c0      	addlt	r0, r0, r3
 80037fe:	4770      	bx	lr

08003800 <floor>:
 8003800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003804:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003808:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800380c:	2e13      	cmp	r6, #19
 800380e:	4607      	mov	r7, r0
 8003810:	460b      	mov	r3, r1
 8003812:	460c      	mov	r4, r1
 8003814:	4605      	mov	r5, r0
 8003816:	dc35      	bgt.n	8003884 <floor+0x84>
 8003818:	2e00      	cmp	r6, #0
 800381a:	da16      	bge.n	800384a <floor+0x4a>
 800381c:	a336      	add	r3, pc, #216	; (adr r3, 80038f8 <floor+0xf8>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fc9b 	bl	800015c <__adddf3>
 8003826:	2200      	movs	r2, #0
 8003828:	2300      	movs	r3, #0
 800382a:	f7fd f8dd 	bl	80009e8 <__aeabi_dcmpgt>
 800382e:	b148      	cbz	r0, 8003844 <floor+0x44>
 8003830:	2c00      	cmp	r4, #0
 8003832:	da5b      	bge.n	80038ec <floor+0xec>
 8003834:	2500      	movs	r5, #0
 8003836:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800383a:	4a31      	ldr	r2, [pc, #196]	; (8003900 <floor+0x100>)
 800383c:	433b      	orrs	r3, r7
 800383e:	42ab      	cmp	r3, r5
 8003840:	bf18      	it	ne
 8003842:	4614      	movne	r4, r2
 8003844:	4623      	mov	r3, r4
 8003846:	462f      	mov	r7, r5
 8003848:	e026      	b.n	8003898 <floor+0x98>
 800384a:	4a2e      	ldr	r2, [pc, #184]	; (8003904 <floor+0x104>)
 800384c:	fa42 f806 	asr.w	r8, r2, r6
 8003850:	ea01 0208 	and.w	r2, r1, r8
 8003854:	4302      	orrs	r2, r0
 8003856:	d01f      	beq.n	8003898 <floor+0x98>
 8003858:	a327      	add	r3, pc, #156	; (adr r3, 80038f8 <floor+0xf8>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f7fc fc7d 	bl	800015c <__adddf3>
 8003862:	2200      	movs	r2, #0
 8003864:	2300      	movs	r3, #0
 8003866:	f7fd f8bf 	bl	80009e8 <__aeabi_dcmpgt>
 800386a:	2800      	cmp	r0, #0
 800386c:	d0ea      	beq.n	8003844 <floor+0x44>
 800386e:	2c00      	cmp	r4, #0
 8003870:	bfbe      	ittt	lt
 8003872:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003876:	fa43 f606 	asrlt.w	r6, r3, r6
 800387a:	19a4      	addlt	r4, r4, r6
 800387c:	ea24 0408 	bic.w	r4, r4, r8
 8003880:	2500      	movs	r5, #0
 8003882:	e7df      	b.n	8003844 <floor+0x44>
 8003884:	2e33      	cmp	r6, #51	; 0x33
 8003886:	dd0b      	ble.n	80038a0 <floor+0xa0>
 8003888:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800388c:	d104      	bne.n	8003898 <floor+0x98>
 800388e:	4602      	mov	r2, r0
 8003890:	f7fc fc64 	bl	800015c <__adddf3>
 8003894:	4607      	mov	r7, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4638      	mov	r0, r7
 800389a:	4619      	mov	r1, r3
 800389c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80038a8:	fa22 f808 	lsr.w	r8, r2, r8
 80038ac:	ea18 0f00 	tst.w	r8, r0
 80038b0:	d0f2      	beq.n	8003898 <floor+0x98>
 80038b2:	a311      	add	r3, pc, #68	; (adr r3, 80038f8 <floor+0xf8>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fc50 	bl	800015c <__adddf3>
 80038bc:	2200      	movs	r2, #0
 80038be:	2300      	movs	r3, #0
 80038c0:	f7fd f892 	bl	80009e8 <__aeabi_dcmpgt>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d0bd      	beq.n	8003844 <floor+0x44>
 80038c8:	2c00      	cmp	r4, #0
 80038ca:	da02      	bge.n	80038d2 <floor+0xd2>
 80038cc:	2e14      	cmp	r6, #20
 80038ce:	d103      	bne.n	80038d8 <floor+0xd8>
 80038d0:	3401      	adds	r4, #1
 80038d2:	ea25 0508 	bic.w	r5, r5, r8
 80038d6:	e7b5      	b.n	8003844 <floor+0x44>
 80038d8:	2301      	movs	r3, #1
 80038da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80038de:	fa03 f606 	lsl.w	r6, r3, r6
 80038e2:	4435      	add	r5, r6
 80038e4:	42bd      	cmp	r5, r7
 80038e6:	bf38      	it	cc
 80038e8:	18e4      	addcc	r4, r4, r3
 80038ea:	e7f2      	b.n	80038d2 <floor+0xd2>
 80038ec:	2500      	movs	r5, #0
 80038ee:	462c      	mov	r4, r5
 80038f0:	e7a8      	b.n	8003844 <floor+0x44>
 80038f2:	bf00      	nop
 80038f4:	f3af 8000 	nop.w
 80038f8:	8800759c 	.word	0x8800759c
 80038fc:	7e37e43c 	.word	0x7e37e43c
 8003900:	bff00000 	.word	0xbff00000
 8003904:	000fffff 	.word	0x000fffff

08003908 <round>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800390e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8003912:	2c13      	cmp	r4, #19
 8003914:	4606      	mov	r6, r0
 8003916:	460d      	mov	r5, r1
 8003918:	460b      	mov	r3, r1
 800391a:	468c      	mov	ip, r1
 800391c:	4602      	mov	r2, r0
 800391e:	dc17      	bgt.n	8003950 <round+0x48>
 8003920:	2c00      	cmp	r4, #0
 8003922:	da09      	bge.n	8003938 <round+0x30>
 8003924:	3401      	adds	r4, #1
 8003926:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800392a:	d103      	bne.n	8003934 <round+0x2c>
 800392c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003930:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003934:	2200      	movs	r2, #0
 8003936:	e028      	b.n	800398a <round+0x82>
 8003938:	4915      	ldr	r1, [pc, #84]	; (8003990 <round+0x88>)
 800393a:	4121      	asrs	r1, r4
 800393c:	420d      	tst	r5, r1
 800393e:	d100      	bne.n	8003942 <round+0x3a>
 8003940:	b178      	cbz	r0, 8003962 <round+0x5a>
 8003942:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003946:	4123      	asrs	r3, r4
 8003948:	4463      	add	r3, ip
 800394a:	ea23 0301 	bic.w	r3, r3, r1
 800394e:	e7f1      	b.n	8003934 <round+0x2c>
 8003950:	2c33      	cmp	r4, #51	; 0x33
 8003952:	dd09      	ble.n	8003968 <round+0x60>
 8003954:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003958:	d103      	bne.n	8003962 <round+0x5a>
 800395a:	f7fc fbff 	bl	800015c <__adddf3>
 800395e:	4606      	mov	r6, r0
 8003960:	460d      	mov	r5, r1
 8003962:	4630      	mov	r0, r6
 8003964:	4629      	mov	r1, r5
 8003966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003970:	40f8      	lsrs	r0, r7
 8003972:	4206      	tst	r6, r0
 8003974:	d0f5      	beq.n	8003962 <round+0x5a>
 8003976:	2101      	movs	r1, #1
 8003978:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800397c:	fa01 f404 	lsl.w	r4, r1, r4
 8003980:	1932      	adds	r2, r6, r4
 8003982:	bf28      	it	cs
 8003984:	185b      	addcs	r3, r3, r1
 8003986:	ea22 0200 	bic.w	r2, r2, r0
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	e7e6      	b.n	800395e <round+0x56>
 8003990:	000fffff 	.word	0x000fffff

08003994 <log10>:
 8003994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003998:	b08b      	sub	sp, #44	; 0x2c
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	f000 f9cf 	bl	8003d40 <__ieee754_log10>
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <log10+0xe0>)
 80039a4:	4680      	mov	r8, r0
 80039a6:	f993 6000 	ldrsb.w	r6, [r3]
 80039aa:	4689      	mov	r9, r1
 80039ac:	1c73      	adds	r3, r6, #1
 80039ae:	d05c      	beq.n	8003a6a <log10+0xd6>
 80039b0:	4622      	mov	r2, r4
 80039b2:	462b      	mov	r3, r5
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fd f820 	bl	80009fc <__aeabi_dcmpun>
 80039bc:	4607      	mov	r7, r0
 80039be:	2800      	cmp	r0, #0
 80039c0:	d153      	bne.n	8003a6a <log10+0xd6>
 80039c2:	2200      	movs	r2, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fff9 	bl	80009c0 <__aeabi_dcmple>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d04b      	beq.n	8003a6a <log10+0xd6>
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <log10+0xe4>)
 80039d4:	9708      	str	r7, [sp, #32]
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80039dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80039e0:	b9a6      	cbnz	r6, 8003a0c <log10+0x78>
 80039e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80039e6:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <log10+0xe8>)
 80039e8:	4620      	mov	r0, r4
 80039ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80039ee:	4629      	mov	r1, r5
 80039f0:	2200      	movs	r2, #0
 80039f2:	2300      	movs	r3, #0
 80039f4:	f7fc ffd0 	bl	8000998 <__aeabi_dcmpeq>
 80039f8:	bb40      	cbnz	r0, 8003a4c <log10+0xb8>
 80039fa:	2301      	movs	r3, #1
 80039fc:	2e02      	cmp	r6, #2
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	d119      	bne.n	8003a36 <log10+0xa2>
 8003a02:	f7ff fab1 	bl	8002f68 <__errno>
 8003a06:	2321      	movs	r3, #33	; 0x21
 8003a08:	6003      	str	r3, [r0, #0]
 8003a0a:	e019      	b.n	8003a40 <log10+0xac>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <log10+0xec>)
 8003a10:	4620      	mov	r0, r4
 8003a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a16:	4629      	mov	r1, r5
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7fc ffbc 	bl	8000998 <__aeabi_dcmpeq>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d0ea      	beq.n	80039fa <log10+0x66>
 8003a24:	2302      	movs	r3, #2
 8003a26:	429e      	cmp	r6, r3
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	d111      	bne.n	8003a50 <log10+0xbc>
 8003a2c:	f7ff fa9c 	bl	8002f68 <__errno>
 8003a30:	2322      	movs	r3, #34	; 0x22
 8003a32:	6003      	str	r3, [r0, #0]
 8003a34:	e011      	b.n	8003a5a <log10+0xc6>
 8003a36:	4668      	mov	r0, sp
 8003a38:	f000 ffc6 	bl	80049c8 <matherr>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0e0      	beq.n	8003a02 <log10+0x6e>
 8003a40:	4810      	ldr	r0, [pc, #64]	; (8003a84 <log10+0xf0>)
 8003a42:	f000 ffc3 	bl	80049cc <nan>
 8003a46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a4a:	e006      	b.n	8003a5a <log10+0xc6>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4668      	mov	r0, sp
 8003a52:	f000 ffb9 	bl	80049c8 <matherr>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d0e8      	beq.n	8003a2c <log10+0x98>
 8003a5a:	9b08      	ldr	r3, [sp, #32]
 8003a5c:	b11b      	cbz	r3, 8003a66 <log10+0xd2>
 8003a5e:	f7ff fa83 	bl	8002f68 <__errno>
 8003a62:	9b08      	ldr	r3, [sp, #32]
 8003a64:	6003      	str	r3, [r0, #0]
 8003a66:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003a6a:	4640      	mov	r0, r8
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	b00b      	add	sp, #44	; 0x2c
 8003a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a74:	20000084 	.word	0x20000084
 8003a78:	080064ab 	.word	0x080064ab
 8003a7c:	c7efffff 	.word	0xc7efffff
 8003a80:	fff00000 	.word	0xfff00000
 8003a84:	0800647d 	.word	0x0800647d

08003a88 <pow>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	b08f      	sub	sp, #60	; 0x3c
 8003a8e:	461d      	mov	r5, r3
 8003a90:	4680      	mov	r8, r0
 8003a92:	4689      	mov	r9, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	f000 f9d7 	bl	8003e48 <__ieee754_pow>
 8003a9a:	4fa1      	ldr	r7, [pc, #644]	; (8003d20 <pow+0x298>)
 8003a9c:	e9cd 0100 	strd	r0, r1, [sp]
 8003aa0:	f997 3000 	ldrsb.w	r3, [r7]
 8003aa4:	463e      	mov	r6, r7
 8003aa6:	9302      	str	r3, [sp, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	d05f      	beq.n	8003b6c <pow+0xe4>
 8003aac:	4622      	mov	r2, r4
 8003aae:	462b      	mov	r3, r5
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc ffa2 	bl	80009fc <__aeabi_dcmpun>
 8003ab8:	4682      	mov	sl, r0
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d156      	bne.n	8003b6c <pow+0xe4>
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	f7fc ff99 	bl	80009fc <__aeabi_dcmpun>
 8003aca:	9003      	str	r0, [sp, #12]
 8003acc:	b1e8      	cbz	r0, 8003b0a <pow+0x82>
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc ff5f 	bl	8000998 <__aeabi_dcmpeq>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d046      	beq.n	8003b6c <pow+0xe4>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	9304      	str	r3, [sp, #16]
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <pow+0x29c>)
 8003ae6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003aea:	9305      	str	r3, [sp, #20]
 8003aec:	4b8e      	ldr	r3, [pc, #568]	; (8003d28 <pow+0x2a0>)
 8003aee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003af2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003af6:	9b02      	ldr	r3, [sp, #8]
 8003af8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d031      	beq.n	8003b64 <pow+0xdc>
 8003b00:	a804      	add	r0, sp, #16
 8003b02:	f000 ff61 	bl	80049c8 <matherr>
 8003b06:	bb38      	cbnz	r0, 8003b58 <pow+0xd0>
 8003b08:	e058      	b.n	8003bbc <pow+0x134>
 8003b0a:	f04f 0a00 	mov.w	sl, #0
 8003b0e:	f04f 0b00 	mov.w	fp, #0
 8003b12:	4652      	mov	r2, sl
 8003b14:	465b      	mov	r3, fp
 8003b16:	4640      	mov	r0, r8
 8003b18:	4649      	mov	r1, r9
 8003b1a:	f7fc ff3d 	bl	8000998 <__aeabi_dcmpeq>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d051      	beq.n	8003bc6 <pow+0x13e>
 8003b22:	4652      	mov	r2, sl
 8003b24:	465b      	mov	r3, fp
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc ff35 	bl	8000998 <__aeabi_dcmpeq>
 8003b2e:	4606      	mov	r6, r0
 8003b30:	b308      	cbz	r0, 8003b76 <pow+0xee>
 8003b32:	2301      	movs	r3, #1
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <pow+0x29c>)
 8003b38:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003b44:	930c      	str	r3, [sp, #48]	; 0x30
 8003b46:	9b02      	ldr	r3, [sp, #8]
 8003b48:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0d7      	beq.n	8003b00 <pow+0x78>
 8003b50:	2200      	movs	r2, #0
 8003b52:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <pow+0x2a0>)
 8003b54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b5a:	b11b      	cbz	r3, 8003b64 <pow+0xdc>
 8003b5c:	f7ff fa04 	bl	8002f68 <__errno>
 8003b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b62:	6003      	str	r3, [r0, #0]
 8003b64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003b68:	e9cd 3400 	strd	r3, r4, [sp]
 8003b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b70:	b00f      	add	sp, #60	; 0x3c
 8003b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b76:	4620      	mov	r0, r4
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f000 ff1f 	bl	80049bc <finite>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d0f4      	beq.n	8003b6c <pow+0xe4>
 8003b82:	4652      	mov	r2, sl
 8003b84:	465b      	mov	r3, fp
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc ff0f 	bl	80009ac <__aeabi_dcmplt>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0ec      	beq.n	8003b6c <pow+0xe4>
 8003b92:	2301      	movs	r3, #1
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <pow+0x29c>)
 8003b98:	960c      	str	r6, [sp, #48]	; 0x30
 8003b9a:	9305      	str	r3, [sp, #20]
 8003b9c:	f997 3000 	ldrsb.w	r3, [r7]
 8003ba0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ba4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003ba8:	b913      	cbnz	r3, 8003bb0 <pow+0x128>
 8003baa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003bae:	e7a7      	b.n	8003b00 <pow+0x78>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	495e      	ldr	r1, [pc, #376]	; (8003d2c <pow+0x2a4>)
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bba:	d1a1      	bne.n	8003b00 <pow+0x78>
 8003bbc:	f7ff f9d4 	bl	8002f68 <__errno>
 8003bc0:	2321      	movs	r3, #33	; 0x21
 8003bc2:	6003      	str	r3, [r0, #0]
 8003bc4:	e7c8      	b.n	8003b58 <pow+0xd0>
 8003bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bca:	f000 fef7 	bl	80049bc <finite>
 8003bce:	9002      	str	r0, [sp, #8]
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d177      	bne.n	8003cc4 <pow+0x23c>
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	f000 fef0 	bl	80049bc <finite>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d071      	beq.n	8003cc4 <pow+0x23c>
 8003be0:	4620      	mov	r0, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	f000 feea 	bl	80049bc <finite>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d06b      	beq.n	8003cc4 <pow+0x23c>
 8003bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fc ff02 	bl	80009fc <__aeabi_dcmpun>
 8003bf8:	f997 7000 	ldrsb.w	r7, [r7]
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <pow+0x29c>)
 8003bfe:	b1a0      	cbz	r0, 8003c2a <pow+0x1a2>
 8003c00:	2201      	movs	r2, #1
 8003c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c06:	9b02      	ldr	r3, [sp, #8]
 8003c08:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8003c0e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c12:	2f00      	cmp	r7, #0
 8003c14:	d0c9      	beq.n	8003baa <pow+0x122>
 8003c16:	4652      	mov	r2, sl
 8003c18:	465b      	mov	r3, fp
 8003c1a:	4650      	mov	r0, sl
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	f7fc fd7d 	bl	800071c <__aeabi_ddiv>
 8003c22:	2f02      	cmp	r7, #2
 8003c24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c28:	e7c7      	b.n	8003bba <pow+0x132>
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	900c      	str	r0, [sp, #48]	; 0x30
 8003c2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	2200      	movs	r2, #0
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <pow+0x2a8>)
 8003c3a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c3e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c42:	f7fc fc41 	bl	80004c8 <__aeabi_dmul>
 8003c46:	4604      	mov	r4, r0
 8003c48:	460d      	mov	r5, r1
 8003c4a:	bb17      	cbnz	r7, 8003c92 <pow+0x20a>
 8003c4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c50:	4b38      	ldr	r3, [pc, #224]	; (8003d34 <pow+0x2ac>)
 8003c52:	4640      	mov	r0, r8
 8003c54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c58:	4649      	mov	r1, r9
 8003c5a:	4652      	mov	r2, sl
 8003c5c:	465b      	mov	r3, fp
 8003c5e:	f7fc fea5 	bl	80009ac <__aeabi_dcmplt>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d054      	beq.n	8003d10 <pow+0x288>
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f000 feb5 	bl	80049d8 <rint>
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	f7fc fe91 	bl	8000998 <__aeabi_dcmpeq>
 8003c76:	b920      	cbnz	r0, 8003c82 <pow+0x1fa>
 8003c78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <pow+0x2b0>)
 8003c7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c82:	f996 3000 	ldrsb.w	r3, [r6]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d142      	bne.n	8003d10 <pow+0x288>
 8003c8a:	f7ff f96d 	bl	8002f68 <__errno>
 8003c8e:	2322      	movs	r3, #34	; 0x22
 8003c90:	e797      	b.n	8003bc2 <pow+0x13a>
 8003c92:	2200      	movs	r2, #0
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <pow+0x2b4>)
 8003c96:	4640      	mov	r0, r8
 8003c98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4652      	mov	r2, sl
 8003ca0:	465b      	mov	r3, fp
 8003ca2:	f7fc fe83 	bl	80009ac <__aeabi_dcmplt>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0eb      	beq.n	8003c82 <pow+0x1fa>
 8003caa:	4620      	mov	r0, r4
 8003cac:	4629      	mov	r1, r5
 8003cae:	f000 fe93 	bl	80049d8 <rint>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f7fc fe6f 	bl	8000998 <__aeabi_dcmpeq>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d1e1      	bne.n	8003c82 <pow+0x1fa>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <pow+0x2a4>)
 8003cc2:	e7dc      	b.n	8003c7e <pow+0x1f6>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f7fc fe64 	bl	8000998 <__aeabi_dcmpeq>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	f43f af4b 	beq.w	8003b6c <pow+0xe4>
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f000 fe6f 	bl	80049bc <finite>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	f43f af44 	beq.w	8003b6c <pow+0xe4>
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f000 fe68 	bl	80049bc <finite>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	f43f af3d 	beq.w	8003b6c <pow+0xe4>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	9304      	str	r3, [sp, #16]
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <pow+0x29c>)
 8003cf8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003cfc:	9305      	str	r3, [sp, #20]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2400      	movs	r4, #0
 8003d02:	930c      	str	r3, [sp, #48]	; 0x30
 8003d04:	2300      	movs	r3, #0
 8003d06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003d0a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003d0e:	e7b8      	b.n	8003c82 <pow+0x1fa>
 8003d10:	a804      	add	r0, sp, #16
 8003d12:	f000 fe59 	bl	80049c8 <matherr>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f47f af1e 	bne.w	8003b58 <pow+0xd0>
 8003d1c:	e7b5      	b.n	8003c8a <pow+0x202>
 8003d1e:	bf00      	nop
 8003d20:	20000084 	.word	0x20000084
 8003d24:	080064b1 	.word	0x080064b1
 8003d28:	3ff00000 	.word	0x3ff00000
 8003d2c:	fff00000 	.word	0xfff00000
 8003d30:	3fe00000 	.word	0x3fe00000
 8003d34:	47efffff 	.word	0x47efffff
 8003d38:	c7efffff 	.word	0xc7efffff
 8003d3c:	7ff00000 	.word	0x7ff00000

08003d40 <__ieee754_log10>:
 8003d40:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	da26      	bge.n	8003d9e <__ieee754_log10+0x5e>
 8003d50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003d54:	4302      	orrs	r2, r0
 8003d56:	d107      	bne.n	8003d68 <__ieee754_log10+0x28>
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <__ieee754_log10+0xf8>)
 8003d60:	f7fc fcdc 	bl	800071c <__aeabi_ddiv>
 8003d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	da05      	bge.n	8003d78 <__ieee754_log10+0x38>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f7fc f9f3 	bl	8000158 <__aeabi_dsub>
 8003d72:	2200      	movs	r2, #0
 8003d74:	2300      	movs	r3, #0
 8003d76:	e7f3      	b.n	8003d60 <__ieee754_log10+0x20>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <__ieee754_log10+0xfc>)
 8003d7c:	f7fc fba4 	bl	80004c8 <__aeabi_dmul>
 8003d80:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8003d84:	4604      	mov	r4, r0
 8003d86:	460d      	mov	r5, r1
 8003d88:	460b      	mov	r3, r1
 8003d8a:	492d      	ldr	r1, [pc, #180]	; (8003e40 <__ieee754_log10+0x100>)
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	dd08      	ble.n	8003da2 <__ieee754_log10+0x62>
 8003d90:	4622      	mov	r2, r4
 8003d92:	462b      	mov	r3, r5
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7fc f9e0 	bl	800015c <__adddf3>
 8003d9c:	e7e2      	b.n	8003d64 <__ieee754_log10+0x24>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	e7f3      	b.n	8003d8a <__ieee754_log10+0x4a>
 8003da2:	1518      	asrs	r0, r3, #20
 8003da4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003da8:	4410      	add	r0, r2
 8003daa:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8003dae:	4448      	add	r0, r9
 8003db0:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8003db4:	f7fc fb1e 	bl	80003f4 <__aeabi_i2d>
 8003db8:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8003dbc:	3303      	adds	r3, #3
 8003dbe:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	460f      	mov	r7, r1
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f000 ff01 	bl	8004bd0 <__ieee754_log>
 8003dce:	a314      	add	r3, pc, #80	; (adr r3, 8003e20 <__ieee754_log10+0xe0>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	4680      	mov	r8, r0
 8003dd6:	4689      	mov	r9, r1
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc fb74 	bl	80004c8 <__aeabi_dmul>
 8003de0:	a311      	add	r3, pc, #68	; (adr r3, 8003e28 <__ieee754_log10+0xe8>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	4604      	mov	r4, r0
 8003de8:	460d      	mov	r5, r1
 8003dea:	4640      	mov	r0, r8
 8003dec:	4649      	mov	r1, r9
 8003dee:	f7fc fb6b 	bl	80004c8 <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc f9af 	bl	800015c <__adddf3>
 8003dfe:	a30c      	add	r3, pc, #48	; (adr r3, 8003e30 <__ieee754_log10+0xf0>)
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	4604      	mov	r4, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f7fc fb5c 	bl	80004c8 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4620      	mov	r0, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	e7be      	b.n	8003d98 <__ieee754_log10+0x58>
 8003e1a:	bf00      	nop
 8003e1c:	f3af 8000 	nop.w
 8003e20:	11f12b36 	.word	0x11f12b36
 8003e24:	3d59fef3 	.word	0x3d59fef3
 8003e28:	1526e50e 	.word	0x1526e50e
 8003e2c:	3fdbcb7b 	.word	0x3fdbcb7b
 8003e30:	509f6000 	.word	0x509f6000
 8003e34:	3fd34413 	.word	0x3fd34413
 8003e38:	c3500000 	.word	0xc3500000
 8003e3c:	43500000 	.word	0x43500000
 8003e40:	7fefffff 	.word	0x7fefffff
 8003e44:	00000000 	.word	0x00000000

08003e48 <__ieee754_pow>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	b091      	sub	sp, #68	; 0x44
 8003e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e52:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8003e56:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003e5a:	ea55 0302 	orrs.w	r3, r5, r2
 8003e5e:	4607      	mov	r7, r0
 8003e60:	4688      	mov	r8, r1
 8003e62:	f000 84b7 	beq.w	80047d4 <__ieee754_pow+0x98c>
 8003e66:	4b80      	ldr	r3, [pc, #512]	; (8004068 <__ieee754_pow+0x220>)
 8003e68:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	4689      	mov	r9, r1
 8003e70:	4682      	mov	sl, r0
 8003e72:	dc09      	bgt.n	8003e88 <__ieee754_pow+0x40>
 8003e74:	d103      	bne.n	8003e7e <__ieee754_pow+0x36>
 8003e76:	b938      	cbnz	r0, 8003e88 <__ieee754_pow+0x40>
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	dc0d      	bgt.n	8003e98 <__ieee754_pow+0x50>
 8003e7c:	e001      	b.n	8003e82 <__ieee754_pow+0x3a>
 8003e7e:	429d      	cmp	r5, r3
 8003e80:	dc02      	bgt.n	8003e88 <__ieee754_pow+0x40>
 8003e82:	429d      	cmp	r5, r3
 8003e84:	d10e      	bne.n	8003ea4 <__ieee754_pow+0x5c>
 8003e86:	b16a      	cbz	r2, 8003ea4 <__ieee754_pow+0x5c>
 8003e88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003e8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003e90:	ea54 030a 	orrs.w	r3, r4, sl
 8003e94:	f000 849e 	beq.w	80047d4 <__ieee754_pow+0x98c>
 8003e98:	4874      	ldr	r0, [pc, #464]	; (800406c <__ieee754_pow+0x224>)
 8003e9a:	b011      	add	sp, #68	; 0x44
 8003e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	f000 bd94 	b.w	80049cc <nan>
 8003ea4:	f1b9 0f00 	cmp.w	r9, #0
 8003ea8:	da53      	bge.n	8003f52 <__ieee754_pow+0x10a>
 8003eaa:	4b71      	ldr	r3, [pc, #452]	; (8004070 <__ieee754_pow+0x228>)
 8003eac:	429d      	cmp	r5, r3
 8003eae:	dc4e      	bgt.n	8003f4e <__ieee754_pow+0x106>
 8003eb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003eb4:	429d      	cmp	r5, r3
 8003eb6:	dd4c      	ble.n	8003f52 <__ieee754_pow+0x10a>
 8003eb8:	152b      	asrs	r3, r5, #20
 8003eba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ebe:	2b14      	cmp	r3, #20
 8003ec0:	dd28      	ble.n	8003f14 <__ieee754_pow+0xcc>
 8003ec2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003ec6:	fa22 f103 	lsr.w	r1, r2, r3
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d13f      	bne.n	8003f52 <__ieee754_pow+0x10a>
 8003ed2:	f001 0101 	and.w	r1, r1, #1
 8003ed6:	f1c1 0302 	rsb	r3, r1, #2
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d15c      	bne.n	8003f9a <__ieee754_pow+0x152>
 8003ee0:	4b61      	ldr	r3, [pc, #388]	; (8004068 <__ieee754_pow+0x220>)
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	d126      	bne.n	8003f34 <__ieee754_pow+0xec>
 8003ee6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003eea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003eee:	ea53 030a 	orrs.w	r3, r3, sl
 8003ef2:	f000 846f 	beq.w	80047d4 <__ieee754_pow+0x98c>
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <__ieee754_pow+0x22c>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	dd2c      	ble.n	8003f56 <__ieee754_pow+0x10e>
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	f280 846f 	bge.w	80047e0 <__ieee754_pow+0x998>
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	f04f 0c00 	mov.w	ip, #0
 8003f0a:	4658      	mov	r0, fp
 8003f0c:	4661      	mov	r1, ip
 8003f0e:	b011      	add	sp, #68	; 0x44
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d13e      	bne.n	8003f96 <__ieee754_pow+0x14e>
 8003f18:	f1c3 0314 	rsb	r3, r3, #20
 8003f1c:	fa45 f103 	asr.w	r1, r5, r3
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	f040 8463 	bne.w	80047f0 <__ieee754_pow+0x9a8>
 8003f2a:	f001 0101 	and.w	r1, r1, #1
 8003f2e:	f1c1 0302 	rsb	r3, r1, #2
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <__ieee754_pow+0x230>)
 8003f36:	429d      	cmp	r5, r3
 8003f38:	d114      	bne.n	8003f64 <__ieee754_pow+0x11c>
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	f280 8454 	bge.w	80047e8 <__ieee754_pow+0x9a0>
 8003f40:	463a      	mov	r2, r7
 8003f42:	4643      	mov	r3, r8
 8003f44:	2000      	movs	r0, #0
 8003f46:	494c      	ldr	r1, [pc, #304]	; (8004078 <__ieee754_pow+0x230>)
 8003f48:	f7fc fbe8 	bl	800071c <__aeabi_ddiv>
 8003f4c:	e013      	b.n	8003f76 <__ieee754_pow+0x12e>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e7c3      	b.n	8003eda <__ieee754_pow+0x92>
 8003f52:	2300      	movs	r3, #0
 8003f54:	e7c1      	b.n	8003eda <__ieee754_pow+0x92>
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	dad3      	bge.n	8003f02 <__ieee754_pow+0xba>
 8003f5a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003f5e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003f62:	e7d2      	b.n	8003f0a <__ieee754_pow+0xc2>
 8003f64:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003f68:	d108      	bne.n	8003f7c <__ieee754_pow+0x134>
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	4643      	mov	r3, r8
 8003f6e:	4638      	mov	r0, r7
 8003f70:	4641      	mov	r1, r8
 8003f72:	f7fc faa9 	bl	80004c8 <__aeabi_dmul>
 8003f76:	4683      	mov	fp, r0
 8003f78:	468c      	mov	ip, r1
 8003f7a:	e7c6      	b.n	8003f0a <__ieee754_pow+0xc2>
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	; (800407c <__ieee754_pow+0x234>)
 8003f7e:	429e      	cmp	r6, r3
 8003f80:	d10b      	bne.n	8003f9a <__ieee754_pow+0x152>
 8003f82:	f1b9 0f00 	cmp.w	r9, #0
 8003f86:	db08      	blt.n	8003f9a <__ieee754_pow+0x152>
 8003f88:	4638      	mov	r0, r7
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	b011      	add	sp, #68	; 0x44
 8003f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f92:	f000 bc63 	b.w	800485c <__ieee754_sqrt>
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	f000 fd09 	bl	80049b4 <fabs>
 8003fa2:	4683      	mov	fp, r0
 8003fa4:	468c      	mov	ip, r1
 8003fa6:	f1ba 0f00 	cmp.w	sl, #0
 8003faa:	d12b      	bne.n	8004004 <__ieee754_pow+0x1bc>
 8003fac:	b124      	cbz	r4, 8003fb8 <__ieee754_pow+0x170>
 8003fae:	4b32      	ldr	r3, [pc, #200]	; (8004078 <__ieee754_pow+0x230>)
 8003fb0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d125      	bne.n	8004004 <__ieee754_pow+0x1bc>
 8003fb8:	2e00      	cmp	r6, #0
 8003fba:	da07      	bge.n	8003fcc <__ieee754_pow+0x184>
 8003fbc:	465a      	mov	r2, fp
 8003fbe:	4663      	mov	r3, ip
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	492d      	ldr	r1, [pc, #180]	; (8004078 <__ieee754_pow+0x230>)
 8003fc4:	f7fc fbaa 	bl	800071c <__aeabi_ddiv>
 8003fc8:	4683      	mov	fp, r0
 8003fca:	468c      	mov	ip, r1
 8003fcc:	f1b9 0f00 	cmp.w	r9, #0
 8003fd0:	da9b      	bge.n	8003f0a <__ieee754_pow+0xc2>
 8003fd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003fd6:	9b00      	ldr	r3, [sp, #0]
 8003fd8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003fdc:	4323      	orrs	r3, r4
 8003fde:	d108      	bne.n	8003ff2 <__ieee754_pow+0x1aa>
 8003fe0:	465a      	mov	r2, fp
 8003fe2:	4663      	mov	r3, ip
 8003fe4:	4658      	mov	r0, fp
 8003fe6:	4661      	mov	r1, ip
 8003fe8:	f7fc f8b6 	bl	8000158 <__aeabi_dsub>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	e7aa      	b.n	8003f48 <__ieee754_pow+0x100>
 8003ff2:	9b00      	ldr	r3, [sp, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d188      	bne.n	8003f0a <__ieee754_pow+0xc2>
 8003ff8:	4658      	mov	r0, fp
 8003ffa:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003ffe:	4683      	mov	fp, r0
 8004000:	469c      	mov	ip, r3
 8004002:	e782      	b.n	8003f0a <__ieee754_pow+0xc2>
 8004004:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8004008:	f109 33ff 	add.w	r3, r9, #4294967295
 800400c:	930d      	str	r3, [sp, #52]	; 0x34
 800400e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004010:	9b00      	ldr	r3, [sp, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	d104      	bne.n	8004020 <__ieee754_pow+0x1d8>
 8004016:	463a      	mov	r2, r7
 8004018:	4643      	mov	r3, r8
 800401a:	4638      	mov	r0, r7
 800401c:	4641      	mov	r1, r8
 800401e:	e7e3      	b.n	8003fe8 <__ieee754_pow+0x1a0>
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <__ieee754_pow+0x238>)
 8004022:	429d      	cmp	r5, r3
 8004024:	f340 80fe 	ble.w	8004224 <__ieee754_pow+0x3dc>
 8004028:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800402c:	429d      	cmp	r5, r3
 800402e:	dd0b      	ble.n	8004048 <__ieee754_pow+0x200>
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <__ieee754_pow+0x22c>)
 8004032:	429c      	cmp	r4, r3
 8004034:	dc0e      	bgt.n	8004054 <__ieee754_pow+0x20c>
 8004036:	2e00      	cmp	r6, #0
 8004038:	f6bf af63 	bge.w	8003f02 <__ieee754_pow+0xba>
 800403c:	a308      	add	r3, pc, #32	; (adr r3, 8004060 <__ieee754_pow+0x218>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	e794      	b.n	8003f72 <__ieee754_pow+0x12a>
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <__ieee754_pow+0x23c>)
 800404a:	429c      	cmp	r4, r3
 800404c:	ddf3      	ble.n	8004036 <__ieee754_pow+0x1ee>
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <__ieee754_pow+0x230>)
 8004050:	429c      	cmp	r4, r3
 8004052:	dd19      	ble.n	8004088 <__ieee754_pow+0x240>
 8004054:	2e00      	cmp	r6, #0
 8004056:	dcf1      	bgt.n	800403c <__ieee754_pow+0x1f4>
 8004058:	e753      	b.n	8003f02 <__ieee754_pow+0xba>
 800405a:	bf00      	nop
 800405c:	f3af 8000 	nop.w
 8004060:	8800759c 	.word	0x8800759c
 8004064:	7e37e43c 	.word	0x7e37e43c
 8004068:	7ff00000 	.word	0x7ff00000
 800406c:	0800647d 	.word	0x0800647d
 8004070:	433fffff 	.word	0x433fffff
 8004074:	3fefffff 	.word	0x3fefffff
 8004078:	3ff00000 	.word	0x3ff00000
 800407c:	3fe00000 	.word	0x3fe00000
 8004080:	41e00000 	.word	0x41e00000
 8004084:	3feffffe 	.word	0x3feffffe
 8004088:	4661      	mov	r1, ip
 800408a:	2200      	movs	r2, #0
 800408c:	4b60      	ldr	r3, [pc, #384]	; (8004210 <__ieee754_pow+0x3c8>)
 800408e:	4658      	mov	r0, fp
 8004090:	f7fc f862 	bl	8000158 <__aeabi_dsub>
 8004094:	a354      	add	r3, pc, #336	; (adr r3, 80041e8 <__ieee754_pow+0x3a0>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	4604      	mov	r4, r0
 800409c:	460d      	mov	r5, r1
 800409e:	f7fc fa13 	bl	80004c8 <__aeabi_dmul>
 80040a2:	a353      	add	r3, pc, #332	; (adr r3, 80041f0 <__ieee754_pow+0x3a8>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	4606      	mov	r6, r0
 80040aa:	460f      	mov	r7, r1
 80040ac:	4620      	mov	r0, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7fc fa0a 	bl	80004c8 <__aeabi_dmul>
 80040b4:	2200      	movs	r2, #0
 80040b6:	4682      	mov	sl, r0
 80040b8:	468b      	mov	fp, r1
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <__ieee754_pow+0x3cc>)
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc fa02 	bl	80004c8 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	a14b      	add	r1, pc, #300	; (adr r1, 80041f8 <__ieee754_pow+0x3b0>)
 80040ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ce:	f7fc f843 	bl	8000158 <__aeabi_dsub>
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	f7fc f9f7 	bl	80004c8 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	2000      	movs	r0, #0
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <__ieee754_pow+0x3d0>)
 80040e2:	f7fc f839 	bl	8000158 <__aeabi_dsub>
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	4680      	mov	r8, r0
 80040ec:	4689      	mov	r9, r1
 80040ee:	4620      	mov	r0, r4
 80040f0:	4629      	mov	r1, r5
 80040f2:	f7fc f9e9 	bl	80004c8 <__aeabi_dmul>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4640      	mov	r0, r8
 80040fc:	4649      	mov	r1, r9
 80040fe:	f7fc f9e3 	bl	80004c8 <__aeabi_dmul>
 8004102:	a33f      	add	r3, pc, #252	; (adr r3, 8004200 <__ieee754_pow+0x3b8>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc f9de 	bl	80004c8 <__aeabi_dmul>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4650      	mov	r0, sl
 8004112:	4659      	mov	r1, fp
 8004114:	f7fc f820 	bl	8000158 <__aeabi_dsub>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	4630      	mov	r0, r6
 8004122:	4639      	mov	r1, r7
 8004124:	f7fc f81a 	bl	800015c <__adddf3>
 8004128:	2000      	movs	r0, #0
 800412a:	468b      	mov	fp, r1
 800412c:	4682      	mov	sl, r0
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	f7fc f811 	bl	8000158 <__aeabi_dsub>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc f80b 	bl	8000158 <__aeabi_dsub>
 8004142:	9b00      	ldr	r3, [sp, #0]
 8004144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004146:	3b01      	subs	r3, #1
 8004148:	4313      	orrs	r3, r2
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	4c32      	ldreq	r4, [pc, #200]	; (800421c <__ieee754_pow+0x3d4>)
 8004152:	4c2f      	ldrne	r4, [pc, #188]	; (8004210 <__ieee754_pow+0x3c8>)
 8004154:	4606      	mov	r6, r0
 8004156:	e9cd 3400 	strd	r3, r4, [sp]
 800415a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800415e:	2400      	movs	r4, #0
 8004160:	460f      	mov	r7, r1
 8004162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f7fb fff5 	bl	8000158 <__aeabi_dsub>
 800416e:	4652      	mov	r2, sl
 8004170:	465b      	mov	r3, fp
 8004172:	f7fc f9a9 	bl	80004c8 <__aeabi_dmul>
 8004176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800417a:	4680      	mov	r8, r0
 800417c:	4689      	mov	r9, r1
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f7fc f9a1 	bl	80004c8 <__aeabi_dmul>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fb ffe5 	bl	800015c <__adddf3>
 8004192:	4622      	mov	r2, r4
 8004194:	462b      	mov	r3, r5
 8004196:	4680      	mov	r8, r0
 8004198:	4689      	mov	r9, r1
 800419a:	4650      	mov	r0, sl
 800419c:	4659      	mov	r1, fp
 800419e:	f7fc f993 	bl	80004c8 <__aeabi_dmul>
 80041a2:	4604      	mov	r4, r0
 80041a4:	460d      	mov	r5, r1
 80041a6:	460b      	mov	r3, r1
 80041a8:	4602      	mov	r2, r0
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041b2:	f7fb ffd3 	bl	800015c <__adddf3>
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <__ieee754_pow+0x3d8>)
 80041b8:	4682      	mov	sl, r0
 80041ba:	4299      	cmp	r1, r3
 80041bc:	460f      	mov	r7, r1
 80041be:	460e      	mov	r6, r1
 80041c0:	f340 82e1 	ble.w	8004786 <__ieee754_pow+0x93e>
 80041c4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80041c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80041cc:	4303      	orrs	r3, r0
 80041ce:	f000 81db 	beq.w	8004588 <__ieee754_pow+0x740>
 80041d2:	a30d      	add	r3, pc, #52	; (adr r3, 8004208 <__ieee754_pow+0x3c0>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041dc:	f7fc f974 	bl	80004c8 <__aeabi_dmul>
 80041e0:	a309      	add	r3, pc, #36	; (adr r3, 8004208 <__ieee754_pow+0x3c0>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	e6c4      	b.n	8003f72 <__ieee754_pow+0x12a>
 80041e8:	60000000 	.word	0x60000000
 80041ec:	3ff71547 	.word	0x3ff71547
 80041f0:	f85ddf44 	.word	0xf85ddf44
 80041f4:	3e54ae0b 	.word	0x3e54ae0b
 80041f8:	55555555 	.word	0x55555555
 80041fc:	3fd55555 	.word	0x3fd55555
 8004200:	652b82fe 	.word	0x652b82fe
 8004204:	3ff71547 	.word	0x3ff71547
 8004208:	8800759c 	.word	0x8800759c
 800420c:	7e37e43c 	.word	0x7e37e43c
 8004210:	3ff00000 	.word	0x3ff00000
 8004214:	3fd00000 	.word	0x3fd00000
 8004218:	3fe00000 	.word	0x3fe00000
 800421c:	bff00000 	.word	0xbff00000
 8004220:	408fffff 	.word	0x408fffff
 8004224:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	da08      	bge.n	8004240 <__ieee754_pow+0x3f8>
 800422e:	4658      	mov	r0, fp
 8004230:	4bcd      	ldr	r3, [pc, #820]	; (8004568 <__ieee754_pow+0x720>)
 8004232:	4661      	mov	r1, ip
 8004234:	f7fc f948 	bl	80004c8 <__aeabi_dmul>
 8004238:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800423c:	4683      	mov	fp, r0
 800423e:	460c      	mov	r4, r1
 8004240:	1523      	asrs	r3, r4, #20
 8004242:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004246:	4413      	add	r3, r2
 8004248:	930c      	str	r3, [sp, #48]	; 0x30
 800424a:	4bc8      	ldr	r3, [pc, #800]	; (800456c <__ieee754_pow+0x724>)
 800424c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004250:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004254:	429c      	cmp	r4, r3
 8004256:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800425a:	dd08      	ble.n	800426e <__ieee754_pow+0x426>
 800425c:	4bc4      	ldr	r3, [pc, #784]	; (8004570 <__ieee754_pow+0x728>)
 800425e:	429c      	cmp	r4, r3
 8004260:	f340 815b 	ble.w	800451a <__ieee754_pow+0x6d2>
 8004264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004266:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800426a:	3301      	adds	r3, #1
 800426c:	930c      	str	r3, [sp, #48]	; 0x30
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	4658      	mov	r0, fp
 8004274:	4629      	mov	r1, r5
 8004276:	4bbf      	ldr	r3, [pc, #764]	; (8004574 <__ieee754_pow+0x72c>)
 8004278:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800427c:	444b      	add	r3, r9
 800427e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004282:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004286:	461a      	mov	r2, r3
 8004288:	4623      	mov	r3, r4
 800428a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800428e:	f7fb ff63 	bl	8000158 <__aeabi_dsub>
 8004292:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004296:	4606      	mov	r6, r0
 8004298:	460f      	mov	r7, r1
 800429a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800429e:	f7fb ff5d 	bl	800015c <__adddf3>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	2000      	movs	r0, #0
 80042a8:	49b3      	ldr	r1, [pc, #716]	; (8004578 <__ieee754_pow+0x730>)
 80042aa:	f7fc fa37 	bl	800071c <__aeabi_ddiv>
 80042ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4630      	mov	r0, r6
 80042b8:	4639      	mov	r1, r7
 80042ba:	f7fc f905 	bl	80004c8 <__aeabi_dmul>
 80042be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042c2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80042c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80042ca:	2300      	movs	r3, #0
 80042cc:	2200      	movs	r2, #0
 80042ce:	106d      	asrs	r5, r5, #1
 80042d0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80042da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80042de:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80042e2:	4650      	mov	r0, sl
 80042e4:	4659      	mov	r1, fp
 80042e6:	4614      	mov	r4, r2
 80042e8:	461d      	mov	r5, r3
 80042ea:	f7fc f8ed 	bl	80004c8 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4630      	mov	r0, r6
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fb ff2f 	bl	8000158 <__aeabi_dsub>
 80042fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042fe:	4606      	mov	r6, r0
 8004300:	460f      	mov	r7, r1
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f7fb ff27 	bl	8000158 <__aeabi_dsub>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004312:	f7fb ff21 	bl	8000158 <__aeabi_dsub>
 8004316:	4652      	mov	r2, sl
 8004318:	465b      	mov	r3, fp
 800431a:	f7fc f8d5 	bl	80004c8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	f7fb ff17 	bl	8000158 <__aeabi_dsub>
 800432a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800432e:	f7fc f8cb 	bl	80004c8 <__aeabi_dmul>
 8004332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	f7fc f8c3 	bl	80004c8 <__aeabi_dmul>
 8004342:	a377      	add	r3, pc, #476	; (adr r3, 8004520 <__ieee754_pow+0x6d8>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	4604      	mov	r4, r0
 800434a:	460d      	mov	r5, r1
 800434c:	f7fc f8bc 	bl	80004c8 <__aeabi_dmul>
 8004350:	a375      	add	r3, pc, #468	; (adr r3, 8004528 <__ieee754_pow+0x6e0>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fb ff01 	bl	800015c <__adddf3>
 800435a:	4622      	mov	r2, r4
 800435c:	462b      	mov	r3, r5
 800435e:	f7fc f8b3 	bl	80004c8 <__aeabi_dmul>
 8004362:	a373      	add	r3, pc, #460	; (adr r3, 8004530 <__ieee754_pow+0x6e8>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fb fef8 	bl	800015c <__adddf3>
 800436c:	4622      	mov	r2, r4
 800436e:	462b      	mov	r3, r5
 8004370:	f7fc f8aa 	bl	80004c8 <__aeabi_dmul>
 8004374:	a370      	add	r3, pc, #448	; (adr r3, 8004538 <__ieee754_pow+0x6f0>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fb feef 	bl	800015c <__adddf3>
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	f7fc f8a1 	bl	80004c8 <__aeabi_dmul>
 8004386:	a36e      	add	r3, pc, #440	; (adr r3, 8004540 <__ieee754_pow+0x6f8>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fb fee6 	bl	800015c <__adddf3>
 8004390:	4622      	mov	r2, r4
 8004392:	462b      	mov	r3, r5
 8004394:	f7fc f898 	bl	80004c8 <__aeabi_dmul>
 8004398:	a36b      	add	r3, pc, #428	; (adr r3, 8004548 <__ieee754_pow+0x700>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f7fb fedd 	bl	800015c <__adddf3>
 80043a2:	4622      	mov	r2, r4
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	462b      	mov	r3, r5
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc f88b 	bl	80004c8 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4630      	mov	r0, r6
 80043b8:	4639      	mov	r1, r7
 80043ba:	f7fc f885 	bl	80004c8 <__aeabi_dmul>
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c6:	4652      	mov	r2, sl
 80043c8:	465b      	mov	r3, fp
 80043ca:	f7fb fec7 	bl	800015c <__adddf3>
 80043ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043d2:	f7fc f879 	bl	80004c8 <__aeabi_dmul>
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	f7fb febf 	bl	800015c <__adddf3>
 80043de:	4652      	mov	r2, sl
 80043e0:	4606      	mov	r6, r0
 80043e2:	460f      	mov	r7, r1
 80043e4:	465b      	mov	r3, fp
 80043e6:	4650      	mov	r0, sl
 80043e8:	4659      	mov	r1, fp
 80043ea:	f7fc f86d 	bl	80004c8 <__aeabi_dmul>
 80043ee:	2200      	movs	r2, #0
 80043f0:	4b62      	ldr	r3, [pc, #392]	; (800457c <__ieee754_pow+0x734>)
 80043f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043f6:	f7fb feb1 	bl	800015c <__adddf3>
 80043fa:	4632      	mov	r2, r6
 80043fc:	463b      	mov	r3, r7
 80043fe:	f7fb fead 	bl	800015c <__adddf3>
 8004402:	9804      	ldr	r0, [sp, #16]
 8004404:	460d      	mov	r5, r1
 8004406:	4604      	mov	r4, r0
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4650      	mov	r0, sl
 800440e:	4659      	mov	r1, fp
 8004410:	f7fc f85a 	bl	80004c8 <__aeabi_dmul>
 8004414:	2200      	movs	r2, #0
 8004416:	4682      	mov	sl, r0
 8004418:	468b      	mov	fp, r1
 800441a:	4b58      	ldr	r3, [pc, #352]	; (800457c <__ieee754_pow+0x734>)
 800441c:	4620      	mov	r0, r4
 800441e:	4629      	mov	r1, r5
 8004420:	f7fb fe9a 	bl	8000158 <__aeabi_dsub>
 8004424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004428:	f7fb fe96 	bl	8000158 <__aeabi_dsub>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4630      	mov	r0, r6
 8004432:	4639      	mov	r1, r7
 8004434:	f7fb fe90 	bl	8000158 <__aeabi_dsub>
 8004438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800443c:	f7fc f844 	bl	80004c8 <__aeabi_dmul>
 8004440:	4622      	mov	r2, r4
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800444a:	462b      	mov	r3, r5
 800444c:	f7fc f83c 	bl	80004c8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4630      	mov	r0, r6
 8004456:	4639      	mov	r1, r7
 8004458:	f7fb fe80 	bl	800015c <__adddf3>
 800445c:	4606      	mov	r6, r0
 800445e:	460f      	mov	r7, r1
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4650      	mov	r0, sl
 8004466:	4659      	mov	r1, fp
 8004468:	f7fb fe78 	bl	800015c <__adddf3>
 800446c:	a338      	add	r3, pc, #224	; (adr r3, 8004550 <__ieee754_pow+0x708>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	9804      	ldr	r0, [sp, #16]
 8004474:	460d      	mov	r5, r1
 8004476:	4604      	mov	r4, r0
 8004478:	f7fc f826 	bl	80004c8 <__aeabi_dmul>
 800447c:	4652      	mov	r2, sl
 800447e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004482:	465b      	mov	r3, fp
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	f7fb fe66 	bl	8000158 <__aeabi_dsub>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4630      	mov	r0, r6
 8004492:	4639      	mov	r1, r7
 8004494:	f7fb fe60 	bl	8000158 <__aeabi_dsub>
 8004498:	a32f      	add	r3, pc, #188	; (adr r3, 8004558 <__ieee754_pow+0x710>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc f813 	bl	80004c8 <__aeabi_dmul>
 80044a2:	a32f      	add	r3, pc, #188	; (adr r3, 8004560 <__ieee754_pow+0x718>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	4606      	mov	r6, r0
 80044aa:	460f      	mov	r7, r1
 80044ac:	4620      	mov	r0, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7fc f80a 	bl	80004c8 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fb fe4e 	bl	800015c <__adddf3>
 80044c0:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <__ieee754_pow+0x738>)
 80044c2:	444b      	add	r3, r9
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fb fe48 	bl	800015c <__adddf3>
 80044cc:	4604      	mov	r4, r0
 80044ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80044d0:	460d      	mov	r5, r1
 80044d2:	f7fb ff8f 	bl	80003f4 <__aeabi_i2d>
 80044d6:	4606      	mov	r6, r0
 80044d8:	460f      	mov	r7, r1
 80044da:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <__ieee754_pow+0x73c>)
 80044dc:	4622      	mov	r2, r4
 80044de:	444b      	add	r3, r9
 80044e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044e4:	462b      	mov	r3, r5
 80044e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044ea:	f7fb fe37 	bl	800015c <__adddf3>
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	f7fb fe33 	bl	800015c <__adddf3>
 80044f6:	4632      	mov	r2, r6
 80044f8:	463b      	mov	r3, r7
 80044fa:	f7fb fe2f 	bl	800015c <__adddf3>
 80044fe:	9804      	ldr	r0, [sp, #16]
 8004500:	4632      	mov	r2, r6
 8004502:	463b      	mov	r3, r7
 8004504:	4682      	mov	sl, r0
 8004506:	468b      	mov	fp, r1
 8004508:	f7fb fe26 	bl	8000158 <__aeabi_dsub>
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f7fb fe22 	bl	8000158 <__aeabi_dsub>
 8004514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004518:	e60b      	b.n	8004132 <__ieee754_pow+0x2ea>
 800451a:	f04f 0801 	mov.w	r8, #1
 800451e:	e6a8      	b.n	8004272 <__ieee754_pow+0x42a>
 8004520:	4a454eef 	.word	0x4a454eef
 8004524:	3fca7e28 	.word	0x3fca7e28
 8004528:	93c9db65 	.word	0x93c9db65
 800452c:	3fcd864a 	.word	0x3fcd864a
 8004530:	a91d4101 	.word	0xa91d4101
 8004534:	3fd17460 	.word	0x3fd17460
 8004538:	518f264d 	.word	0x518f264d
 800453c:	3fd55555 	.word	0x3fd55555
 8004540:	db6fabff 	.word	0xdb6fabff
 8004544:	3fdb6db6 	.word	0x3fdb6db6
 8004548:	33333303 	.word	0x33333303
 800454c:	3fe33333 	.word	0x3fe33333
 8004550:	e0000000 	.word	0xe0000000
 8004554:	3feec709 	.word	0x3feec709
 8004558:	dc3a03fd 	.word	0xdc3a03fd
 800455c:	3feec709 	.word	0x3feec709
 8004560:	145b01f5 	.word	0x145b01f5
 8004564:	be3e2fe0 	.word	0xbe3e2fe0
 8004568:	43400000 	.word	0x43400000
 800456c:	0003988e 	.word	0x0003988e
 8004570:	000bb679 	.word	0x000bb679
 8004574:	080064b8 	.word	0x080064b8
 8004578:	3ff00000 	.word	0x3ff00000
 800457c:	40080000 	.word	0x40080000
 8004580:	080064d8 	.word	0x080064d8
 8004584:	080064c8 	.word	0x080064c8
 8004588:	a39b      	add	r3, pc, #620	; (adr r3, 80047f8 <__ieee754_pow+0x9b0>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	4640      	mov	r0, r8
 8004590:	4649      	mov	r1, r9
 8004592:	f7fb fde3 	bl	800015c <__adddf3>
 8004596:	4622      	mov	r2, r4
 8004598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800459c:	462b      	mov	r3, r5
 800459e:	4650      	mov	r0, sl
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fb fdd9 	bl	8000158 <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ae:	f7fc fa1b 	bl	80009e8 <__aeabi_dcmpgt>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	f47f ae0d 	bne.w	80041d2 <__ieee754_pow+0x38a>
 80045b8:	4aa3      	ldr	r2, [pc, #652]	; (8004848 <__ieee754_pow+0xa00>)
 80045ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80045be:	4293      	cmp	r3, r2
 80045c0:	f340 8103 	ble.w	80047ca <__ieee754_pow+0x982>
 80045c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80045c8:	2000      	movs	r0, #0
 80045ca:	151b      	asrs	r3, r3, #20
 80045cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80045d0:	fa4a f303 	asr.w	r3, sl, r3
 80045d4:	4433      	add	r3, r6
 80045d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80045da:	4f9c      	ldr	r7, [pc, #624]	; (800484c <__ieee754_pow+0xa04>)
 80045dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80045e0:	4117      	asrs	r7, r2
 80045e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80045e6:	ea23 0107 	bic.w	r1, r3, r7
 80045ea:	f1c2 0214 	rsb	r2, r2, #20
 80045ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80045f2:	fa4a fa02 	asr.w	sl, sl, r2
 80045f6:	2e00      	cmp	r6, #0
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	bfb8      	it	lt
 8004602:	f1ca 0a00 	rsblt	sl, sl, #0
 8004606:	f7fb fda7 	bl	8000158 <__aeabi_dsub>
 800460a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800460e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	f7fb fda1 	bl	800015c <__adddf3>
 800461a:	a379      	add	r3, pc, #484	; (adr r3, 8004800 <__ieee754_pow+0x9b8>)
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	2000      	movs	r0, #0
 8004622:	460d      	mov	r5, r1
 8004624:	4604      	mov	r4, r0
 8004626:	f7fb ff4f 	bl	80004c8 <__aeabi_dmul>
 800462a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800462e:	4606      	mov	r6, r0
 8004630:	460f      	mov	r7, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fb fd8f 	bl	8000158 <__aeabi_dsub>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fb fd89 	bl	8000158 <__aeabi_dsub>
 8004646:	a370      	add	r3, pc, #448	; (adr r3, 8004808 <__ieee754_pow+0x9c0>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb ff3c 	bl	80004c8 <__aeabi_dmul>
 8004650:	a36f      	add	r3, pc, #444	; (adr r3, 8004810 <__ieee754_pow+0x9c8>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	4680      	mov	r8, r0
 8004658:	4689      	mov	r9, r1
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f7fb ff33 	bl	80004c8 <__aeabi_dmul>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4640      	mov	r0, r8
 8004668:	4649      	mov	r1, r9
 800466a:	f7fb fd77 	bl	800015c <__adddf3>
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fb fd6f 	bl	800015c <__adddf3>
 800467e:	4632      	mov	r2, r6
 8004680:	463b      	mov	r3, r7
 8004682:	4680      	mov	r8, r0
 8004684:	4689      	mov	r9, r1
 8004686:	f7fb fd67 	bl	8000158 <__aeabi_dsub>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fb fd61 	bl	8000158 <__aeabi_dsub>
 8004696:	4642      	mov	r2, r8
 8004698:	4606      	mov	r6, r0
 800469a:	460f      	mov	r7, r1
 800469c:	464b      	mov	r3, r9
 800469e:	4640      	mov	r0, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	f7fb ff11 	bl	80004c8 <__aeabi_dmul>
 80046a6:	a35c      	add	r3, pc, #368	; (adr r3, 8004818 <__ieee754_pow+0x9d0>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	4604      	mov	r4, r0
 80046ae:	460d      	mov	r5, r1
 80046b0:	f7fb ff0a 	bl	80004c8 <__aeabi_dmul>
 80046b4:	a35a      	add	r3, pc, #360	; (adr r3, 8004820 <__ieee754_pow+0x9d8>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb fd4d 	bl	8000158 <__aeabi_dsub>
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	f7fb ff01 	bl	80004c8 <__aeabi_dmul>
 80046c6:	a358      	add	r3, pc, #352	; (adr r3, 8004828 <__ieee754_pow+0x9e0>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb fd46 	bl	800015c <__adddf3>
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	f7fb fef8 	bl	80004c8 <__aeabi_dmul>
 80046d8:	a355      	add	r3, pc, #340	; (adr r3, 8004830 <__ieee754_pow+0x9e8>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb fd3b 	bl	8000158 <__aeabi_dsub>
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	f7fb feef 	bl	80004c8 <__aeabi_dmul>
 80046ea:	a353      	add	r3, pc, #332	; (adr r3, 8004838 <__ieee754_pow+0x9f0>)
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f7fb fd34 	bl	800015c <__adddf3>
 80046f4:	4622      	mov	r2, r4
 80046f6:	462b      	mov	r3, r5
 80046f8:	f7fb fee6 	bl	80004c8 <__aeabi_dmul>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb fd28 	bl	8000158 <__aeabi_dsub>
 8004708:	4604      	mov	r4, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4640      	mov	r0, r8
 8004712:	4649      	mov	r1, r9
 8004714:	f7fb fed8 	bl	80004c8 <__aeabi_dmul>
 8004718:	2200      	movs	r2, #0
 800471a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fb fd17 	bl	8000158 <__aeabi_dsub>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004732:	f7fb fff3 	bl	800071c <__aeabi_ddiv>
 8004736:	4632      	mov	r2, r6
 8004738:	4604      	mov	r4, r0
 800473a:	460d      	mov	r5, r1
 800473c:	463b      	mov	r3, r7
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	f7fb fec1 	bl	80004c8 <__aeabi_dmul>
 8004746:	4632      	mov	r2, r6
 8004748:	463b      	mov	r3, r7
 800474a:	f7fb fd07 	bl	800015c <__adddf3>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	f7fb fcff 	bl	8000158 <__aeabi_dsub>
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	f7fb fcfb 	bl	8000158 <__aeabi_dsub>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	2000      	movs	r0, #0
 8004768:	4939      	ldr	r1, [pc, #228]	; (8004850 <__ieee754_pow+0xa08>)
 800476a:	f7fb fcf5 	bl	8000158 <__aeabi_dsub>
 800476e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004772:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004776:	da2b      	bge.n	80047d0 <__ieee754_pow+0x988>
 8004778:	4652      	mov	r2, sl
 800477a:	f000 f9b9 	bl	8004af0 <scalbn>
 800477e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004782:	f7ff bbf6 	b.w	8003f72 <__ieee754_pow+0x12a>
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <__ieee754_pow+0xa0c>)
 8004788:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800478c:	429f      	cmp	r7, r3
 800478e:	f77f af13 	ble.w	80045b8 <__ieee754_pow+0x770>
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <__ieee754_pow+0xa10>)
 8004794:	440b      	add	r3, r1
 8004796:	4303      	orrs	r3, r0
 8004798:	d00b      	beq.n	80047b2 <__ieee754_pow+0x96a>
 800479a:	a329      	add	r3, pc, #164	; (adr r3, 8004840 <__ieee754_pow+0x9f8>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047a4:	f7fb fe90 	bl	80004c8 <__aeabi_dmul>
 80047a8:	a325      	add	r3, pc, #148	; (adr r3, 8004840 <__ieee754_pow+0x9f8>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7ff bbe0 	b.w	8003f72 <__ieee754_pow+0x12a>
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	f7fb fccf 	bl	8000158 <__aeabi_dsub>
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	f7fc f909 	bl	80009d4 <__aeabi_dcmpge>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f43f aef8 	beq.w	80045b8 <__ieee754_pow+0x770>
 80047c8:	e7e7      	b.n	800479a <__ieee754_pow+0x952>
 80047ca:	f04f 0a00 	mov.w	sl, #0
 80047ce:	e71e      	b.n	800460e <__ieee754_pow+0x7c6>
 80047d0:	4621      	mov	r1, r4
 80047d2:	e7d4      	b.n	800477e <__ieee754_pow+0x936>
 80047d4:	f04f 0b00 	mov.w	fp, #0
 80047d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004850 <__ieee754_pow+0xa08>
 80047dc:	f7ff bb95 	b.w	8003f0a <__ieee754_pow+0xc2>
 80047e0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80047e4:	f7ff bb91 	b.w	8003f0a <__ieee754_pow+0xc2>
 80047e8:	4638      	mov	r0, r7
 80047ea:	4641      	mov	r1, r8
 80047ec:	f7ff bbc3 	b.w	8003f76 <__ieee754_pow+0x12e>
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	f7ff bb9f 	b.w	8003f34 <__ieee754_pow+0xec>
 80047f6:	bf00      	nop
 80047f8:	652b82fe 	.word	0x652b82fe
 80047fc:	3c971547 	.word	0x3c971547
 8004800:	00000000 	.word	0x00000000
 8004804:	3fe62e43 	.word	0x3fe62e43
 8004808:	fefa39ef 	.word	0xfefa39ef
 800480c:	3fe62e42 	.word	0x3fe62e42
 8004810:	0ca86c39 	.word	0x0ca86c39
 8004814:	be205c61 	.word	0xbe205c61
 8004818:	72bea4d0 	.word	0x72bea4d0
 800481c:	3e663769 	.word	0x3e663769
 8004820:	c5d26bf1 	.word	0xc5d26bf1
 8004824:	3ebbbd41 	.word	0x3ebbbd41
 8004828:	af25de2c 	.word	0xaf25de2c
 800482c:	3f11566a 	.word	0x3f11566a
 8004830:	16bebd93 	.word	0x16bebd93
 8004834:	3f66c16c 	.word	0x3f66c16c
 8004838:	5555553e 	.word	0x5555553e
 800483c:	3fc55555 	.word	0x3fc55555
 8004840:	c2f8f359 	.word	0xc2f8f359
 8004844:	01a56e1f 	.word	0x01a56e1f
 8004848:	3fe00000 	.word	0x3fe00000
 800484c:	000fffff 	.word	0x000fffff
 8004850:	3ff00000 	.word	0x3ff00000
 8004854:	4090cbff 	.word	0x4090cbff
 8004858:	3f6f3400 	.word	0x3f6f3400

0800485c <__ieee754_sqrt>:
 800485c:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <__ieee754_sqrt+0x154>)
 800485e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004862:	438b      	bics	r3, r1
 8004864:	4606      	mov	r6, r0
 8004866:	460d      	mov	r5, r1
 8004868:	460a      	mov	r2, r1
 800486a:	460c      	mov	r4, r1
 800486c:	d10f      	bne.n	800488e <__ieee754_sqrt+0x32>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	f7fb fe29 	bl	80004c8 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4630      	mov	r0, r6
 800487c:	4629      	mov	r1, r5
 800487e:	f7fb fc6d 	bl	800015c <__adddf3>
 8004882:	4606      	mov	r6, r0
 8004884:	460d      	mov	r5, r1
 8004886:	4630      	mov	r0, r6
 8004888:	4629      	mov	r1, r5
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800488e:	2900      	cmp	r1, #0
 8004890:	4607      	mov	r7, r0
 8004892:	4603      	mov	r3, r0
 8004894:	dc0e      	bgt.n	80048b4 <__ieee754_sqrt+0x58>
 8004896:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800489a:	ea5c 0707 	orrs.w	r7, ip, r7
 800489e:	d0f2      	beq.n	8004886 <__ieee754_sqrt+0x2a>
 80048a0:	b141      	cbz	r1, 80048b4 <__ieee754_sqrt+0x58>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	f7fb fc57 	bl	8000158 <__aeabi_dsub>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	f7fb ff35 	bl	800071c <__aeabi_ddiv>
 80048b2:	e7e6      	b.n	8004882 <__ieee754_sqrt+0x26>
 80048b4:	1512      	asrs	r2, r2, #20
 80048b6:	d074      	beq.n	80049a2 <__ieee754_sqrt+0x146>
 80048b8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80048bc:	07d5      	lsls	r5, r2, #31
 80048be:	f04f 0500 	mov.w	r5, #0
 80048c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048c6:	bf48      	it	mi
 80048c8:	0fd9      	lsrmi	r1, r3, #31
 80048ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80048ce:	bf44      	itt	mi
 80048d0:	005b      	lslmi	r3, r3, #1
 80048d2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80048d6:	1051      	asrs	r1, r2, #1
 80048d8:	0fda      	lsrs	r2, r3, #31
 80048da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80048de:	4628      	mov	r0, r5
 80048e0:	2216      	movs	r2, #22
 80048e2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	1987      	adds	r7, r0, r6
 80048ea:	42a7      	cmp	r7, r4
 80048ec:	bfde      	ittt	le
 80048ee:	19b8      	addle	r0, r7, r6
 80048f0:	1be4      	suble	r4, r4, r7
 80048f2:	19ad      	addle	r5, r5, r6
 80048f4:	0fdf      	lsrs	r7, r3, #31
 80048f6:	3a01      	subs	r2, #1
 80048f8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80048fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004904:	d1f0      	bne.n	80048e8 <__ieee754_sqrt+0x8c>
 8004906:	f04f 0c20 	mov.w	ip, #32
 800490a:	4696      	mov	lr, r2
 800490c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004910:	4284      	cmp	r4, r0
 8004912:	eb06 070e 	add.w	r7, r6, lr
 8004916:	dc02      	bgt.n	800491e <__ieee754_sqrt+0xc2>
 8004918:	d112      	bne.n	8004940 <__ieee754_sqrt+0xe4>
 800491a:	429f      	cmp	r7, r3
 800491c:	d810      	bhi.n	8004940 <__ieee754_sqrt+0xe4>
 800491e:	2f00      	cmp	r7, #0
 8004920:	eb07 0e06 	add.w	lr, r7, r6
 8004924:	da42      	bge.n	80049ac <__ieee754_sqrt+0x150>
 8004926:	f1be 0f00 	cmp.w	lr, #0
 800492a:	db3f      	blt.n	80049ac <__ieee754_sqrt+0x150>
 800492c:	f100 0801 	add.w	r8, r0, #1
 8004930:	1a24      	subs	r4, r4, r0
 8004932:	4640      	mov	r0, r8
 8004934:	429f      	cmp	r7, r3
 8004936:	bf88      	it	hi
 8004938:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800493c:	1bdb      	subs	r3, r3, r7
 800493e:	4432      	add	r2, r6
 8004940:	0064      	lsls	r4, r4, #1
 8004942:	f1bc 0c01 	subs.w	ip, ip, #1
 8004946:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800494a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800494e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004952:	d1dd      	bne.n	8004910 <__ieee754_sqrt+0xb4>
 8004954:	4323      	orrs	r3, r4
 8004956:	d006      	beq.n	8004966 <__ieee754_sqrt+0x10a>
 8004958:	1c54      	adds	r4, r2, #1
 800495a:	bf0b      	itete	eq
 800495c:	4662      	moveq	r2, ip
 800495e:	3201      	addne	r2, #1
 8004960:	3501      	addeq	r5, #1
 8004962:	f022 0201 	bicne.w	r2, r2, #1
 8004966:	106b      	asrs	r3, r5, #1
 8004968:	0852      	lsrs	r2, r2, #1
 800496a:	07e8      	lsls	r0, r5, #31
 800496c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004970:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004974:	bf48      	it	mi
 8004976:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800497a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800497e:	4616      	mov	r6, r2
 8004980:	e781      	b.n	8004886 <__ieee754_sqrt+0x2a>
 8004982:	0adc      	lsrs	r4, r3, #11
 8004984:	3915      	subs	r1, #21
 8004986:	055b      	lsls	r3, r3, #21
 8004988:	2c00      	cmp	r4, #0
 800498a:	d0fa      	beq.n	8004982 <__ieee754_sqrt+0x126>
 800498c:	02e6      	lsls	r6, r4, #11
 800498e:	d50a      	bpl.n	80049a6 <__ieee754_sqrt+0x14a>
 8004990:	f1c2 0020 	rsb	r0, r2, #32
 8004994:	fa23 f000 	lsr.w	r0, r3, r0
 8004998:	1e55      	subs	r5, r2, #1
 800499a:	4093      	lsls	r3, r2
 800499c:	4304      	orrs	r4, r0
 800499e:	1b4a      	subs	r2, r1, r5
 80049a0:	e78a      	b.n	80048b8 <__ieee754_sqrt+0x5c>
 80049a2:	4611      	mov	r1, r2
 80049a4:	e7f0      	b.n	8004988 <__ieee754_sqrt+0x12c>
 80049a6:	0064      	lsls	r4, r4, #1
 80049a8:	3201      	adds	r2, #1
 80049aa:	e7ef      	b.n	800498c <__ieee754_sqrt+0x130>
 80049ac:	4680      	mov	r8, r0
 80049ae:	e7bf      	b.n	8004930 <__ieee754_sqrt+0xd4>
 80049b0:	7ff00000 	.word	0x7ff00000

080049b4 <fabs>:
 80049b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049b8:	4619      	mov	r1, r3
 80049ba:	4770      	bx	lr

080049bc <finite>:
 80049bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80049c0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80049c4:	0fc0      	lsrs	r0, r0, #31
 80049c6:	4770      	bx	lr

080049c8 <matherr>:
 80049c8:	2000      	movs	r0, #0
 80049ca:	4770      	bx	lr

080049cc <nan>:
 80049cc:	2000      	movs	r0, #0
 80049ce:	4901      	ldr	r1, [pc, #4]	; (80049d4 <nan+0x8>)
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	7ff80000 	.word	0x7ff80000

080049d8 <rint>:
 80049d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049de:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80049e2:	f1bc 0f13 	cmp.w	ip, #19
 80049e6:	4604      	mov	r4, r0
 80049e8:	460d      	mov	r5, r1
 80049ea:	460b      	mov	r3, r1
 80049ec:	4606      	mov	r6, r0
 80049ee:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80049f2:	dc5a      	bgt.n	8004aaa <rint+0xd2>
 80049f4:	f1bc 0f00 	cmp.w	ip, #0
 80049f8:	da2b      	bge.n	8004a52 <rint+0x7a>
 80049fa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80049fe:	4302      	orrs	r2, r0
 8004a00:	d023      	beq.n	8004a4a <rint+0x72>
 8004a02:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004a06:	4302      	orrs	r2, r0
 8004a08:	4256      	negs	r6, r2
 8004a0a:	4316      	orrs	r6, r2
 8004a0c:	0c4b      	lsrs	r3, r1, #17
 8004a0e:	0b36      	lsrs	r6, r6, #12
 8004a10:	4934      	ldr	r1, [pc, #208]	; (8004ae4 <rint+0x10c>)
 8004a12:	045b      	lsls	r3, r3, #17
 8004a14:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8004a18:	ea46 0503 	orr.w	r5, r6, r3
 8004a1c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004a20:	4602      	mov	r2, r0
 8004a22:	462b      	mov	r3, r5
 8004a24:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fb96 	bl	800015c <__adddf3>
 8004a30:	e9cd 0100 	strd	r0, r1, [sp]
 8004a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a38:	462b      	mov	r3, r5
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	f7fb fb8c 	bl	8000158 <__aeabi_dsub>
 8004a40:	4604      	mov	r4, r0
 8004a42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a46:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	b003      	add	sp, #12
 8004a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a52:	4a25      	ldr	r2, [pc, #148]	; (8004ae8 <rint+0x110>)
 8004a54:	fa42 f20c 	asr.w	r2, r2, ip
 8004a58:	4011      	ands	r1, r2
 8004a5a:	4301      	orrs	r1, r0
 8004a5c:	d0f5      	beq.n	8004a4a <rint+0x72>
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	ea05 0102 	and.w	r1, r5, r2
 8004a64:	ea50 0601 	orrs.w	r6, r0, r1
 8004a68:	d00c      	beq.n	8004a84 <rint+0xac>
 8004a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a6e:	f1bc 0f13 	cmp.w	ip, #19
 8004a72:	bf0c      	ite	eq
 8004a74:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8004a78:	2600      	movne	r6, #0
 8004a7a:	ea25 0202 	bic.w	r2, r5, r2
 8004a7e:	fa43 f30c 	asr.w	r3, r3, ip
 8004a82:	4313      	orrs	r3, r2
 8004a84:	4917      	ldr	r1, [pc, #92]	; (8004ae4 <rint+0x10c>)
 8004a86:	4632      	mov	r2, r6
 8004a88:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8004a8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	f7fb fb62 	bl	800015c <__adddf3>
 8004a98:	e9cd 0100 	strd	r0, r1, [sp]
 8004a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	f7fb fb58 	bl	8000158 <__aeabi_dsub>
 8004aa8:	e008      	b.n	8004abc <rint+0xe4>
 8004aaa:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8004aae:	dd08      	ble.n	8004ac2 <rint+0xea>
 8004ab0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8004ab4:	d1c9      	bne.n	8004a4a <rint+0x72>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f7fb fb50 	bl	800015c <__adddf3>
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	e7c3      	b.n	8004a4a <rint+0x72>
 8004ac2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8004ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aca:	40ca      	lsrs	r2, r1
 8004acc:	4210      	tst	r0, r2
 8004ace:	d0bc      	beq.n	8004a4a <rint+0x72>
 8004ad0:	0852      	lsrs	r2, r2, #1
 8004ad2:	4210      	tst	r0, r2
 8004ad4:	bf1f      	itttt	ne
 8004ad6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8004ada:	ea20 0202 	bicne.w	r2, r0, r2
 8004ade:	410e      	asrne	r6, r1
 8004ae0:	4316      	orrne	r6, r2
 8004ae2:	e7cf      	b.n	8004a84 <rint+0xac>
 8004ae4:	080064e8 	.word	0x080064e8
 8004ae8:	000fffff 	.word	0x000fffff
 8004aec:	00000000 	.word	0x00000000

08004af0 <scalbn>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	4616      	mov	r6, r2
 8004af4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004af8:	4604      	mov	r4, r0
 8004afa:	460d      	mov	r5, r1
 8004afc:	460b      	mov	r3, r1
 8004afe:	b982      	cbnz	r2, 8004b22 <scalbn+0x32>
 8004b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b04:	4303      	orrs	r3, r0
 8004b06:	d034      	beq.n	8004b72 <scalbn+0x82>
 8004b08:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <scalbn+0xd0>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f7fb fcdc 	bl	80004c8 <__aeabi_dmul>
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <scalbn+0xd4>)
 8004b12:	4604      	mov	r4, r0
 8004b14:	429e      	cmp	r6, r3
 8004b16:	460d      	mov	r5, r1
 8004b18:	da0d      	bge.n	8004b36 <scalbn+0x46>
 8004b1a:	a325      	add	r3, pc, #148	; (adr r3, 8004bb0 <scalbn+0xc0>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	e01c      	b.n	8004b5c <scalbn+0x6c>
 8004b22:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004b26:	42ba      	cmp	r2, r7
 8004b28:	d109      	bne.n	8004b3e <scalbn+0x4e>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	f7fb fb16 	bl	800015c <__adddf3>
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	e01d      	b.n	8004b72 <scalbn+0x82>
 8004b36:	460b      	mov	r3, r1
 8004b38:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b3c:	3a36      	subs	r2, #54	; 0x36
 8004b3e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b42:	4432      	add	r2, r6
 8004b44:	428a      	cmp	r2, r1
 8004b46:	dd0c      	ble.n	8004b62 <scalbn+0x72>
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	a11a      	add	r1, pc, #104	; (adr r1, 8004bb8 <scalbn+0xc8>)
 8004b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b52:	f000 f9ef 	bl	8004f34 <copysign>
 8004b56:	a318      	add	r3, pc, #96	; (adr r3, 8004bb8 <scalbn+0xc8>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fcb4 	bl	80004c8 <__aeabi_dmul>
 8004b60:	e7e6      	b.n	8004b30 <scalbn+0x40>
 8004b62:	2a00      	cmp	r2, #0
 8004b64:	dd08      	ble.n	8004b78 <scalbn+0x88>
 8004b66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b6e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b7c:	da0b      	bge.n	8004b96 <scalbn+0xa6>
 8004b7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004b82:	429e      	cmp	r6, r3
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	dce0      	bgt.n	8004b4c <scalbn+0x5c>
 8004b8a:	a109      	add	r1, pc, #36	; (adr r1, 8004bb0 <scalbn+0xc0>)
 8004b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b90:	f000 f9d0 	bl	8004f34 <copysign>
 8004b94:	e7c1      	b.n	8004b1a <scalbn+0x2a>
 8004b96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b9a:	3236      	adds	r2, #54	; 0x36
 8004b9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ba0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <scalbn+0xd8>)
 8004bac:	e7d6      	b.n	8004b5c <scalbn+0x6c>
 8004bae:	bf00      	nop
 8004bb0:	c2f8f359 	.word	0xc2f8f359
 8004bb4:	01a56e1f 	.word	0x01a56e1f
 8004bb8:	8800759c 	.word	0x8800759c
 8004bbc:	7e37e43c 	.word	0x7e37e43c
 8004bc0:	43500000 	.word	0x43500000
 8004bc4:	ffff3cb0 	.word	0xffff3cb0
 8004bc8:	3c900000 	.word	0x3c900000
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <__ieee754_log>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004bd8:	b087      	sub	sp, #28
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	460d      	mov	r5, r1
 8004be0:	da24      	bge.n	8004c2c <__ieee754_log+0x5c>
 8004be2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004be6:	4304      	orrs	r4, r0
 8004be8:	d108      	bne.n	8004bfc <__ieee754_log+0x2c>
 8004bea:	2200      	movs	r2, #0
 8004bec:	2300      	movs	r3, #0
 8004bee:	2000      	movs	r0, #0
 8004bf0:	49cb      	ldr	r1, [pc, #812]	; (8004f20 <__ieee754_log+0x350>)
 8004bf2:	f7fb fd93 	bl	800071c <__aeabi_ddiv>
 8004bf6:	b007      	add	sp, #28
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	da04      	bge.n	8004c0a <__ieee754_log+0x3a>
 8004c00:	f7fb faaa 	bl	8000158 <__aeabi_dsub>
 8004c04:	2200      	movs	r2, #0
 8004c06:	2300      	movs	r3, #0
 8004c08:	e7f3      	b.n	8004bf2 <__ieee754_log+0x22>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4bc5      	ldr	r3, [pc, #788]	; (8004f24 <__ieee754_log+0x354>)
 8004c0e:	f7fb fc5b 	bl	80004c8 <__aeabi_dmul>
 8004c12:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	49c2      	ldr	r1, [pc, #776]	; (8004f28 <__ieee754_log+0x358>)
 8004c1e:	428d      	cmp	r5, r1
 8004c20:	dd06      	ble.n	8004c30 <__ieee754_log+0x60>
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fb fa99 	bl	800015c <__adddf3>
 8004c2a:	e7e4      	b.n	8004bf6 <__ieee754_log+0x26>
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	e7f5      	b.n	8004c1c <__ieee754_log+0x4c>
 8004c30:	152c      	asrs	r4, r5, #20
 8004c32:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004c36:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8004c3a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c3e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8004c42:	4426      	add	r6, r4
 8004c44:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8004c48:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8004c4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004c50:	ea41 0305 	orr.w	r3, r1, r5
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4bb4      	ldr	r3, [pc, #720]	; (8004f2c <__ieee754_log+0x35c>)
 8004c5c:	f7fb fa7c 	bl	8000158 <__aeabi_dsub>
 8004c60:	1cab      	adds	r3, r5, #2
 8004c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8004c6c:	4682      	mov	sl, r0
 8004c6e:	468b      	mov	fp, r1
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	dc53      	bgt.n	8004d1e <__ieee754_log+0x14e>
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb fe8e 	bl	8000998 <__aeabi_dcmpeq>
 8004c7c:	b1d0      	cbz	r0, 8004cb4 <__ieee754_log+0xe4>
 8004c7e:	2c00      	cmp	r4, #0
 8004c80:	f000 8120 	beq.w	8004ec4 <__ieee754_log+0x2f4>
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fb fbb5 	bl	80003f4 <__aeabi_i2d>
 8004c8a:	a391      	add	r3, pc, #580	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	f7fb fc18 	bl	80004c8 <__aeabi_dmul>
 8004c98:	a38f      	add	r3, pc, #572	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	f7fb fc0f 	bl	80004c8 <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	e7b8      	b.n	8004c26 <__ieee754_log+0x56>
 8004cb4:	a38a      	add	r3, pc, #552	; (adr r3, 8004ee0 <__ieee754_log+0x310>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	4650      	mov	r0, sl
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	f7fb fc03 	bl	80004c8 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	4999      	ldr	r1, [pc, #612]	; (8004f30 <__ieee754_log+0x360>)
 8004cca:	f7fb fa45 	bl	8000158 <__aeabi_dsub>
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	460f      	mov	r7, r1
 8004cd4:	465b      	mov	r3, fp
 8004cd6:	4650      	mov	r0, sl
 8004cd8:	4659      	mov	r1, fp
 8004cda:	f7fb fbf5 	bl	80004c8 <__aeabi_dmul>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f7fb fbef 	bl	80004c8 <__aeabi_dmul>
 8004cea:	4606      	mov	r6, r0
 8004cec:	460f      	mov	r7, r1
 8004cee:	b914      	cbnz	r4, 8004cf6 <__ieee754_log+0x126>
 8004cf0:	4632      	mov	r2, r6
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	e0a0      	b.n	8004e38 <__ieee754_log+0x268>
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7fb fb7c 	bl	80003f4 <__aeabi_i2d>
 8004cfc:	a374      	add	r3, pc, #464	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	4680      	mov	r8, r0
 8004d04:	4689      	mov	r9, r1
 8004d06:	f7fb fbdf 	bl	80004c8 <__aeabi_dmul>
 8004d0a:	a373      	add	r3, pc, #460	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	4604      	mov	r4, r0
 8004d12:	460d      	mov	r5, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fbd6 	bl	80004c8 <__aeabi_dmul>
 8004d1c:	e0a5      	b.n	8004e6a <__ieee754_log+0x29a>
 8004d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d22:	f7fb fa1b 	bl	800015c <__adddf3>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	f7fb fcf5 	bl	800071c <__aeabi_ddiv>
 8004d32:	e9cd 0100 	strd	r0, r1, [sp]
 8004d36:	4620      	mov	r0, r4
 8004d38:	f7fb fb5c 	bl	80003f4 <__aeabi_i2d>
 8004d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7fb fbbe 	bl	80004c8 <__aeabi_dmul>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d54:	f7fb fbb8 	bl	80004c8 <__aeabi_dmul>
 8004d58:	a363      	add	r3, pc, #396	; (adr r3, 8004ee8 <__ieee754_log+0x318>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	4680      	mov	r8, r0
 8004d60:	4689      	mov	r9, r1
 8004d62:	f7fb fbb1 	bl	80004c8 <__aeabi_dmul>
 8004d66:	a362      	add	r3, pc, #392	; (adr r3, 8004ef0 <__ieee754_log+0x320>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb f9f6 	bl	800015c <__adddf3>
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	f7fb fba8 	bl	80004c8 <__aeabi_dmul>
 8004d78:	a35f      	add	r3, pc, #380	; (adr r3, 8004ef8 <__ieee754_log+0x328>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb f9ed 	bl	800015c <__adddf3>
 8004d82:	4642      	mov	r2, r8
 8004d84:	464b      	mov	r3, r9
 8004d86:	f7fb fb9f 	bl	80004c8 <__aeabi_dmul>
 8004d8a:	a35d      	add	r3, pc, #372	; (adr r3, 8004f00 <__ieee754_log+0x330>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb f9e4 	bl	800015c <__adddf3>
 8004d94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d98:	f7fb fb96 	bl	80004c8 <__aeabi_dmul>
 8004d9c:	a35a      	add	r3, pc, #360	; (adr r3, 8004f08 <__ieee754_log+0x338>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb fb8d 	bl	80004c8 <__aeabi_dmul>
 8004dae:	a358      	add	r3, pc, #352	; (adr r3, 8004f10 <__ieee754_log+0x340>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb f9d2 	bl	800015c <__adddf3>
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	f7fb fb84 	bl	80004c8 <__aeabi_dmul>
 8004dc0:	a355      	add	r3, pc, #340	; (adr r3, 8004f18 <__ieee754_log+0x348>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb f9c9 	bl	800015c <__adddf3>
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	f7fb fb7b 	bl	80004c8 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dda:	f7fb f9bf 	bl	800015c <__adddf3>
 8004dde:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8004de2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004de6:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8004dea:	3551      	adds	r5, #81	; 0x51
 8004dec:	4335      	orrs	r5, r6
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	4680      	mov	r8, r0
 8004df2:	4689      	mov	r9, r1
 8004df4:	dd48      	ble.n	8004e88 <__ieee754_log+0x2b8>
 8004df6:	2200      	movs	r2, #0
 8004df8:	4b4d      	ldr	r3, [pc, #308]	; (8004f30 <__ieee754_log+0x360>)
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	f7fb fb63 	bl	80004c8 <__aeabi_dmul>
 8004e02:	4652      	mov	r2, sl
 8004e04:	465b      	mov	r3, fp
 8004e06:	f7fb fb5f 	bl	80004c8 <__aeabi_dmul>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	4640      	mov	r0, r8
 8004e14:	4649      	mov	r1, r9
 8004e16:	f7fb f9a1 	bl	800015c <__adddf3>
 8004e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1e:	f7fb fb53 	bl	80004c8 <__aeabi_dmul>
 8004e22:	4680      	mov	r8, r0
 8004e24:	4689      	mov	r9, r1
 8004e26:	b964      	cbnz	r4, 8004e42 <__ieee754_log+0x272>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	4639      	mov	r1, r7
 8004e30:	f7fb f992 	bl	8000158 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4650      	mov	r0, sl
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	f7fb f98c 	bl	8000158 <__aeabi_dsub>
 8004e40:	e6d9      	b.n	8004bf6 <__ieee754_log+0x26>
 8004e42:	a323      	add	r3, pc, #140	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4c:	f7fb fb3c 	bl	80004c8 <__aeabi_dmul>
 8004e50:	a321      	add	r3, pc, #132	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	4604      	mov	r4, r0
 8004e58:	460d      	mov	r5, r1
 8004e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e5e:	f7fb fb33 	bl	80004c8 <__aeabi_dmul>
 8004e62:	4642      	mov	r2, r8
 8004e64:	464b      	mov	r3, r9
 8004e66:	f7fb f979 	bl	800015c <__adddf3>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4639      	mov	r1, r7
 8004e72:	f7fb f971 	bl	8000158 <__aeabi_dsub>
 8004e76:	4652      	mov	r2, sl
 8004e78:	465b      	mov	r3, fp
 8004e7a:	f7fb f96d 	bl	8000158 <__aeabi_dsub>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	e7d9      	b.n	8004e3c <__ieee754_log+0x26c>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb f962 	bl	8000158 <__aeabi_dsub>
 8004e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e98:	f7fb fb16 	bl	80004c8 <__aeabi_dmul>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	460f      	mov	r7, r1
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	f43f af25 	beq.w	8004cf0 <__ieee754_log+0x120>
 8004ea6:	a30a      	add	r3, pc, #40	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	a308      	add	r3, pc, #32	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec2:	e729      	b.n	8004d18 <__ieee754_log+0x148>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	e695      	b.n	8004bf6 <__ieee754_log+0x26>
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	fee00000 	.word	0xfee00000
 8004ed4:	3fe62e42 	.word	0x3fe62e42
 8004ed8:	35793c76 	.word	0x35793c76
 8004edc:	3dea39ef 	.word	0x3dea39ef
 8004ee0:	55555555 	.word	0x55555555
 8004ee4:	3fd55555 	.word	0x3fd55555
 8004ee8:	df3e5244 	.word	0xdf3e5244
 8004eec:	3fc2f112 	.word	0x3fc2f112
 8004ef0:	96cb03de 	.word	0x96cb03de
 8004ef4:	3fc74664 	.word	0x3fc74664
 8004ef8:	94229359 	.word	0x94229359
 8004efc:	3fd24924 	.word	0x3fd24924
 8004f00:	55555593 	.word	0x55555593
 8004f04:	3fe55555 	.word	0x3fe55555
 8004f08:	d078c69f 	.word	0xd078c69f
 8004f0c:	3fc39a09 	.word	0x3fc39a09
 8004f10:	1d8e78af 	.word	0x1d8e78af
 8004f14:	3fcc71c5 	.word	0x3fcc71c5
 8004f18:	9997fa04 	.word	0x9997fa04
 8004f1c:	3fd99999 	.word	0x3fd99999
 8004f20:	c3500000 	.word	0xc3500000
 8004f24:	43500000 	.word	0x43500000
 8004f28:	7fefffff 	.word	0x7fefffff
 8004f2c:	3ff00000 	.word	0x3ff00000
 8004f30:	3fe00000 	.word	0x3fe00000

08004f34 <copysign>:
 8004f34:	b530      	push	{r4, r5, lr}
 8004f36:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3e:	ea42 0503 	orr.w	r5, r2, r3
 8004f42:	4629      	mov	r1, r5
 8004f44:	bd30      	pop	{r4, r5, pc}
	...

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
